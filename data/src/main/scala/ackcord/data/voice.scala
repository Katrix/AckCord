//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/voice.yaml

import java.time.OffsetDateTime

import ackcord.data.base._
import io.circe.Json

/** Used to represent a user's voice connection status. */
class VoiceState(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The guild id this voice state is for */
  @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")

  /** The channel id this user is connected to */
  @inline def channelId: Option[VoiceGuildChannelId] = selectDynamic[Option[VoiceGuildChannelId]]("channel_id")

  /** The user id this voice state is for */
  @inline def userId: UserId = selectDynamic[UserId]("user_id")

  /** The guild member this voice state is for */
  @inline def member: UndefOr[GuildMember] = selectDynamic[UndefOr[GuildMember]]("member")

  /** The session id for this voice state */
  @inline def sessionId: String = selectDynamic[String]("session_id")

  /** Whether this user is deafened by the server */
  @inline def deaf: Boolean = selectDynamic[Boolean]("deaf")

  /** Whether this user is muted by the server */
  @inline def mute: Boolean = selectDynamic[Boolean]("mute")

  /** Whether this user is locally deafened */
  @inline def selfDeaf: Boolean = selectDynamic[Boolean]("self_deaf")

  /** Whether this user is locally muted */
  @inline def selfMute: Boolean = selectDynamic[Boolean]("self_mute")

  /** Whether this user is streaming using "Go Live" */
  @inline def selfStream: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("self_stream")

  /** Whether this user's camera is enabled */
  @inline def selfVideo: Boolean = selectDynamic[Boolean]("self_video")

  /** Whether this user's permission to speak is denied */
  @inline def suppress: Boolean = selectDynamic[Boolean]("suppress")

  /** The time at which the user requested to speak */
  @inline def requestToSpeakTimestamp: Option[OffsetDateTime] =
    selectDynamic[Option[OffsetDateTime]]("request_to_speak_timestamp")

  override def values: Seq[() => Any] = Seq(
    () => guildId,
    () => channelId,
    () => userId,
    () => member,
    () => sessionId,
    () => deaf,
    () => mute,
    () => selfDeaf,
    () => selfMute,
    () => selfStream,
    () => selfVideo,
    () => suppress,
    () => requestToSpeakTimestamp
  )
}
object VoiceState extends DiscordObjectCompanion[VoiceState] {
  def makeRaw(json: Json, cache: Map[String, Any]): VoiceState = new VoiceState(json, cache)

  /**
    * @param guildId
    *   The guild id this voice state is for
    * @param channelId
    *   The channel id this user is connected to
    * @param userId
    *   The user id this voice state is for
    * @param member
    *   The guild member this voice state is for
    * @param sessionId
    *   The session id for this voice state
    * @param deaf
    *   Whether this user is deafened by the server
    * @param mute
    *   Whether this user is muted by the server
    * @param selfDeaf
    *   Whether this user is locally deafened
    * @param selfMute
    *   Whether this user is locally muted
    * @param selfStream
    *   Whether this user is streaming using "Go Live"
    * @param selfVideo
    *   Whether this user's camera is enabled
    * @param suppress
    *   Whether this user's permission to speak is denied
    * @param requestToSpeakTimestamp
    *   The time at which the user requested to speak
    */
  def make20(
      guildId: UndefOr[GuildId] = UndefOrUndefined,
      channelId: Option[VoiceGuildChannelId],
      userId: UserId,
      member: UndefOr[GuildMember] = UndefOrUndefined,
      sessionId: String,
      deaf: Boolean,
      mute: Boolean,
      selfDeaf: Boolean,
      selfMute: Boolean,
      selfStream: UndefOr[Boolean] = UndefOrUndefined,
      selfVideo: Boolean,
      suppress: Boolean,
      requestToSpeakTimestamp: Option[OffsetDateTime]
  ): VoiceState = makeRawFromFields(
    "guild_id"                  :=? guildId,
    "channel_id"                 := channelId,
    "user_id"                    := userId,
    "member"                    :=? member,
    "session_id"                 := sessionId,
    "deaf"                       := deaf,
    "mute"                       := mute,
    "self_deaf"                  := selfDeaf,
    "self_mute"                  := selfMute,
    "self_stream"               :=? selfStream,
    "self_video"                 := selfVideo,
    "suppress"                   := suppress,
    "request_to_speak_timestamp" := requestToSpeakTimestamp
  )

}

class VoiceRegion(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Unique ID for the region */
  @inline def id: String = selectDynamic[String]("id")

  /** Name of the region */
  @inline def name: String = selectDynamic[String]("name")

  /** True for a single server that is closest to the current user's client */
  @inline def optimal: Boolean = selectDynamic[Boolean]("optimal")

  /** Whether this is a deprecated voice region (avoid switching to these) */
  @inline def deprecated: Boolean = selectDynamic[Boolean]("deprecated")

  /** Whether this is a custom voice region (used for events/etc) */
  @inline def custom: Boolean = selectDynamic[Boolean]("custom")

  override def values: Seq[() => Any] = Seq(() => id, () => name, () => optimal, () => deprecated, () => custom)
}
object VoiceRegion extends DiscordObjectCompanion[VoiceRegion] {
  def makeRaw(json: Json, cache: Map[String, Any]): VoiceRegion = new VoiceRegion(json, cache)

  /**
    * @param id
    *   Unique ID for the region
    * @param name
    *   Name of the region
    * @param optimal
    *   True for a single server that is closest to the current user's client
    * @param deprecated
    *   Whether this is a deprecated voice region (avoid switching to these)
    * @param custom
    *   Whether this is a custom voice region (used for events/etc)
    */
  def make20(id: String, name: String, optimal: Boolean, deprecated: Boolean, custom: Boolean): VoiceRegion =
    makeRawFromFields("id" := id, "name" := name, "optimal" := optimal, "deprecated" := deprecated, "custom" := custom)

}
