//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/guild.yaml

import java.time.OffsetDateTime

import ackcord.data.base._
import io.circe.Json

/**
  * Guilds in Discord represent an isolated collection of users and channels,
  * and are often referred to as "servers" in the UI.
  */
class Guild(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Guild id */
  @inline def id: GuildId = selectDynamic[GuildId]("id")

  /**
    * Guild name (2-100 characters, excluding trailing and leading whitespace)
    */
  @inline def name: String = selectDynamic[String]("name")

  /** Icon hash */
  @inline def icon: Option[ImageHash] = selectDynamic[Option[ImageHash]]("icon")

  /** Icon hash, returned when in the template object */
  @inline def iconHash: JsonOption[ImageHash] = selectDynamic[JsonOption[ImageHash]]("icon_hash")

  /** Splash hash */
  @inline def splash: Option[ImageHash] = selectDynamic[Option[ImageHash]]("splash")

  /**
    * Discovery splash hash; only present for guilds with the "DISCOVERABLE"
    * feature
    */
  @inline def discoverySplash: Option[ImageHash] = selectDynamic[Option[ImageHash]]("discovery_splash")

  /** True if the user is the owner of the guild */
  @inline def owner: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("owner")

  /** Id of owner */
  @inline def ownerId: UserId = selectDynamic[UserId]("owner_id")

  /** Total permissions for the user in the guild (excludes overwrites) */
  @inline def permissions: UndefOr[Permissions] = selectDynamic[UndefOr[Permissions]]("permissions")

  /** Id of afk channel */
  @inline def afkChannelId: Option[VoiceGuildChannelId] = selectDynamic[Option[VoiceGuildChannelId]]("afk_channel_id")

  /** Afk timeout in seconds */
  @inline def afkTimeout: Int = selectDynamic[Int]("afk_timeout")

  /** True if the server widget is enabled */
  @inline def widgetEnabled: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("widget_enabled")

  /**
    * The channel id that the widget will generate an invite to, or null if set
    * to no invite
    */
  @inline def widgetChannelId: JsonOption[GuildChannelId] =
    selectDynamic[JsonOption[GuildChannelId]]("widget_channel_id")

  /** Verification level required for the guild */
  @inline def verificationLevel: Guild.VerificationLevel = selectDynamic[Guild.VerificationLevel]("verification_level")

  /** Default message notifications level */
  @inline def defaultMessageNotifications: Guild.MessageNotificationLevel =
    selectDynamic[Guild.MessageNotificationLevel]("default_message_notifications")

  /** Explicit content filter level */
  @inline def explicitContentFilter: Guild.ExplicitContentFilterLevel =
    selectDynamic[Guild.ExplicitContentFilterLevel]("explicit_content_filter")

  /** Roles in the guild */
  @inline def roles: Seq[Role] = selectDynamic[Seq[Role]]("roles")

  /** Custom guild emojis */
  @inline def emojis: Seq[Emoji] = selectDynamic[Seq[Emoji]]("emojis")

  /** Enabled guild features */
  @inline def features: Seq[Guild.GuildFeature] = selectDynamic[Seq[Guild.GuildFeature]]("features")

  /** Required MFA level for the guild */
  @inline def mfaLevel: Guild.MFALevel = selectDynamic[Guild.MFALevel]("mfa_level")

  /** Application id of the guild creator if it is bot-created */
  @inline def applicationId: Option[ApplicationId] = selectDynamic[Option[ApplicationId]]("application_id")

  /**
    * The id of the channel where guild notices such as welcome messages and
    * boost events are posted
    */
  @inline def systemChannelId: Option[TextGuildChannelId] =
    selectDynamic[Option[TextGuildChannelId]]("system_channel_id")

  /** System channel flags */
  @inline def systemChannelFlags: Guild.SystemChannelFlags =
    selectDynamic[Guild.SystemChannelFlags]("system_channel_flags")

  /**
    * The id of the channel where Community guilds can display rules and/or
    * guidelines
    */
  @inline def rulesChannelId: Option[TextGuildChannelId] = selectDynamic[Option[TextGuildChannelId]]("rules_channel_id")

  /**
    * The maximum number of presences for the guild (null is always returned,
    * apart from the largest of guilds)
    */
  @inline def maxPresences: JsonOption[Int] = selectDynamic[JsonOption[Int]]("max_presences")

  /** The maximum number of members for the guild */
  @inline def maxMembers: UndefOr[Int] = selectDynamic[UndefOr[Int]]("max_members")

  /** The vanity url code for the guild */
  @inline def vanityUrlCode: Option[String] = selectDynamic[Option[String]]("vanity_url_code")

  /** The description of a guild */
  @inline def description: Option[String] = selectDynamic[Option[String]]("description")

  /** Banner hash */
  @inline def banner: Option[ImageHash] = selectDynamic[Option[ImageHash]]("banner")

  /** Premium tier (Server Boost level) */
  @inline def premiumTier: Guild.PremiumTier = selectDynamic[Guild.PremiumTier]("premium_tier")

  /** The number of boosts this guild currently has */
  @inline def premiumSubscriptionCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("premium_subscription_count")

  /**
    * The preferred locale of a Community guild; used in server discovery and
    * notices from Discord, and sent in interactions; defaults to "en-US"
    */
  @inline def preferredLocale: String = selectDynamic[String]("preferred_locale")

  /**
    * The id of the channel where admins and moderators of Community guilds
    * receive notices from Discord
    */
  @inline def publicUpdatesChannelId: Option[TextGuildChannelId] =
    selectDynamic[Option[TextGuildChannelId]]("public_updates_channel_id")

  /** The maximum amount of users in a video channel */
  @inline def maxVideoChannelUsers: UndefOr[Int] = selectDynamic[UndefOr[Int]]("max_video_channel_users")

  /** The maximum amount of users in a stage video channel */
  @inline def maxStageVideoChannelUsers: UndefOr[Int] = selectDynamic[UndefOr[Int]]("max_stage_video_channel_users")

  /**
    * Approximate number of members in this guild, returned from the GET
    * /guilds/<id> and /users/@me/guilds endpoints when with_counts is true
    */
  @inline def approximateMemberCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("approximate_member_count")

  /**
    * Approximate number of non-offline members in this guild, returned from the
    * GET /guilds/<id> and /users/@me/guilds endpoints when with_counts is true
    */
  @inline def approximatePresenceCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("approximate_presence_count")

  /**
    * The welcome screen of a Community guild, shown to new members, returned in
    * an Invite's guild object
    */
  @inline def welcomeScreen: UndefOr[WelcomeScreen] = selectDynamic[UndefOr[WelcomeScreen]]("welcome_screen")

  /** Guild NSFW level */
  @inline def nsfwLevel: Guild.GuildNSFWLevel = selectDynamic[Guild.GuildNSFWLevel]("nsfw_level")

  /** Custom guild stickers */
  @inline def stickers: UndefOr[Seq[Sticker]] = selectDynamic[UndefOr[Seq[Sticker]]]("stickers")

  /** Whether the guild has the boost progress bar enabled */
  @inline def premiumProgressBarEnabled: Boolean = selectDynamic[Boolean]("premium_progress_bar_enabled")

  /**
    * The id of the channel where admins and moderators of Community guilds
    * receive safety alerts from Discord
    */
  @inline def safetyAlertsChannelId: Option[TextGuildChannelId] =
    selectDynamic[Option[TextGuildChannelId]]("safety_alerts_channel_id")

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => name,
    () => icon,
    () => iconHash,
    () => splash,
    () => discoverySplash,
    () => owner,
    () => ownerId,
    () => permissions,
    () => afkChannelId,
    () => afkTimeout,
    () => widgetEnabled,
    () => widgetChannelId,
    () => verificationLevel,
    () => defaultMessageNotifications,
    () => explicitContentFilter,
    () => roles,
    () => emojis,
    () => features,
    () => mfaLevel,
    () => applicationId,
    () => systemChannelId,
    () => systemChannelFlags,
    () => rulesChannelId,
    () => maxPresences,
    () => maxMembers,
    () => vanityUrlCode,
    () => description,
    () => banner,
    () => premiumTier,
    () => premiumSubscriptionCount,
    () => preferredLocale,
    () => publicUpdatesChannelId,
    () => maxVideoChannelUsers,
    () => maxStageVideoChannelUsers,
    () => approximateMemberCount,
    () => approximatePresenceCount,
    () => welcomeScreen,
    () => nsfwLevel,
    () => stickers,
    () => premiumProgressBarEnabled,
    () => safetyAlertsChannelId
  )
}
object Guild extends DiscordObjectCompanion[Guild] {
  def makeRaw(json: Json, cache: Map[String, Any]): Guild = new Guild(json, cache)

  /**
    * @param id
    *   Guild id
    * @param name
    *   Guild name (2-100 characters, excluding trailing and leading whitespace)
    * @param icon
    *   Icon hash
    * @param iconHash
    *   Icon hash, returned when in the template object
    * @param splash
    *   Splash hash
    * @param discoverySplash
    *   Discovery splash hash; only present for guilds with the "DISCOVERABLE"
    *   feature
    * @param owner
    *   True if the user is the owner of the guild
    * @param ownerId
    *   Id of owner
    * @param permissions
    *   Total permissions for the user in the guild (excludes overwrites)
    * @param afkChannelId
    *   Id of afk channel
    * @param afkTimeout
    *   Afk timeout in seconds
    * @param widgetEnabled
    *   True if the server widget is enabled
    * @param widgetChannelId
    *   The channel id that the widget will generate an invite to, or null if
    *   set to no invite
    * @param verificationLevel
    *   Verification level required for the guild
    * @param defaultMessageNotifications
    *   Default message notifications level
    * @param explicitContentFilter
    *   Explicit content filter level
    * @param roles
    *   Roles in the guild
    * @param emojis
    *   Custom guild emojis
    * @param features
    *   Enabled guild features
    * @param mfaLevel
    *   Required MFA level for the guild
    * @param applicationId
    *   Application id of the guild creator if it is bot-created
    * @param systemChannelId
    *   The id of the channel where guild notices such as welcome messages and
    *   boost events are posted
    * @param systemChannelFlags
    *   System channel flags
    * @param rulesChannelId
    *   The id of the channel where Community guilds can display rules and/or
    *   guidelines
    * @param maxPresences
    *   The maximum number of presences for the guild (null is always returned,
    *   apart from the largest of guilds)
    * @param maxMembers
    *   The maximum number of members for the guild
    * @param vanityUrlCode
    *   The vanity url code for the guild
    * @param description
    *   The description of a guild
    * @param banner
    *   Banner hash
    * @param premiumTier
    *   Premium tier (Server Boost level)
    * @param premiumSubscriptionCount
    *   The number of boosts this guild currently has
    * @param preferredLocale
    *   The preferred locale of a Community guild; used in server discovery and
    *   notices from Discord, and sent in interactions; defaults to "en-US"
    * @param publicUpdatesChannelId
    *   The id of the channel where admins and moderators of Community guilds
    *   receive notices from Discord
    * @param maxVideoChannelUsers
    *   The maximum amount of users in a video channel
    * @param maxStageVideoChannelUsers
    *   The maximum amount of users in a stage video channel
    * @param approximateMemberCount
    *   Approximate number of members in this guild, returned from the GET
    *   /guilds/<id> and /users/@me/guilds endpoints when with_counts is true
    * @param approximatePresenceCount
    *   Approximate number of non-offline members in this guild, returned from
    *   the GET /guilds/<id> and /users/@me/guilds endpoints when with_counts is
    *   true
    * @param welcomeScreen
    *   The welcome screen of a Community guild, shown to new members, returned
    *   in an Invite's guild object
    * @param nsfwLevel
    *   Guild NSFW level
    * @param stickers
    *   Custom guild stickers
    * @param premiumProgressBarEnabled
    *   Whether the guild has the boost progress bar enabled
    * @param safetyAlertsChannelId
    *   The id of the channel where admins and moderators of Community guilds
    *   receive safety alerts from Discord
    */
  def make20(
      id: GuildId,
      name: String,
      icon: Option[ImageHash],
      iconHash: JsonOption[ImageHash] = JsonUndefined,
      splash: Option[ImageHash],
      discoverySplash: Option[ImageHash],
      owner: UndefOr[Boolean] = UndefOrUndefined,
      ownerId: UserId,
      permissions: UndefOr[Permissions] = UndefOrUndefined,
      afkChannelId: Option[VoiceGuildChannelId],
      afkTimeout: Int,
      widgetEnabled: UndefOr[Boolean] = UndefOrUndefined,
      widgetChannelId: JsonOption[GuildChannelId] = JsonUndefined,
      verificationLevel: Guild.VerificationLevel,
      defaultMessageNotifications: Guild.MessageNotificationLevel,
      explicitContentFilter: Guild.ExplicitContentFilterLevel,
      roles: Seq[Role],
      emojis: Seq[Emoji],
      features: Seq[Guild.GuildFeature],
      mfaLevel: Guild.MFALevel,
      applicationId: Option[ApplicationId],
      systemChannelId: Option[TextGuildChannelId],
      systemChannelFlags: Guild.SystemChannelFlags,
      rulesChannelId: Option[TextGuildChannelId],
      maxPresences: JsonOption[Int] = JsonUndefined,
      maxMembers: UndefOr[Int] = UndefOrUndefined,
      vanityUrlCode: Option[String],
      description: Option[String],
      banner: Option[ImageHash],
      premiumTier: Guild.PremiumTier,
      premiumSubscriptionCount: UndefOr[Int] = UndefOrUndefined,
      preferredLocale: String,
      publicUpdatesChannelId: Option[TextGuildChannelId],
      maxVideoChannelUsers: UndefOr[Int] = UndefOrUndefined,
      maxStageVideoChannelUsers: UndefOr[Int] = UndefOrUndefined,
      approximateMemberCount: UndefOr[Int] = UndefOrUndefined,
      approximatePresenceCount: UndefOr[Int] = UndefOrUndefined,
      welcomeScreen: UndefOr[WelcomeScreen] = UndefOrUndefined,
      nsfwLevel: Guild.GuildNSFWLevel,
      stickers: UndefOr[Seq[Sticker]] = UndefOrUndefined,
      premiumProgressBarEnabled: Boolean,
      safetyAlertsChannelId: Option[TextGuildChannelId]
  ): Guild = makeRawFromFields(
    "id"                             := id,
    "name"                           := name,
    "icon"                           := icon,
    "icon_hash"                     :=? iconHash,
    "splash"                         := splash,
    "discovery_splash"               := discoverySplash,
    "owner"                         :=? owner,
    "owner_id"                       := ownerId,
    "permissions"                   :=? permissions,
    "afk_channel_id"                 := afkChannelId,
    "afk_timeout"                    := afkTimeout,
    "widget_enabled"                :=? widgetEnabled,
    "widget_channel_id"             :=? widgetChannelId,
    "verification_level"             := verificationLevel,
    "default_message_notifications"  := defaultMessageNotifications,
    "explicit_content_filter"        := explicitContentFilter,
    "roles"                          := roles,
    "emojis"                         := emojis,
    "features"                       := features,
    "mfa_level"                      := mfaLevel,
    "application_id"                 := applicationId,
    "system_channel_id"              := systemChannelId,
    "system_channel_flags"           := systemChannelFlags,
    "rules_channel_id"               := rulesChannelId,
    "max_presences"                 :=? maxPresences,
    "max_members"                   :=? maxMembers,
    "vanity_url_code"                := vanityUrlCode,
    "description"                    := description,
    "banner"                         := banner,
    "premium_tier"                   := premiumTier,
    "premium_subscription_count"    :=? premiumSubscriptionCount,
    "preferred_locale"               := preferredLocale,
    "public_updates_channel_id"      := publicUpdatesChannelId,
    "max_video_channel_users"       :=? maxVideoChannelUsers,
    "max_stage_video_channel_users" :=? maxStageVideoChannelUsers,
    "approximate_member_count"      :=? approximateMemberCount,
    "approximate_presence_count"    :=? approximatePresenceCount,
    "welcome_screen"                :=? welcomeScreen,
    "nsfw_level"                     := nsfwLevel,
    "stickers"                      :=? stickers,
    "premium_progress_bar_enabled"   := premiumProgressBarEnabled,
    "safety_alerts_channel_id"       := safetyAlertsChannelId
  )

  sealed case class MessageNotificationLevel private (value: Int) extends DiscordEnum[Int]
  object MessageNotificationLevel extends DiscordEnumCompanion[Int, MessageNotificationLevel] {

    /** Members will receive notifications for all messages by default */
    val ALL_MESSAGES: MessageNotificationLevel = MessageNotificationLevel(0)

    /**
      * Members will receive notifications only for messages that @mention them
      * by default
      */
    val ONLY_MENTIONS: MessageNotificationLevel = MessageNotificationLevel(1)

    def unknown(value: Int): MessageNotificationLevel = new MessageNotificationLevel(value)

    def values: Seq[MessageNotificationLevel] = Seq(ALL_MESSAGES, ONLY_MENTIONS)

  }

  sealed case class ExplicitContentFilterLevel private (value: Int) extends DiscordEnum[Int]
  object ExplicitContentFilterLevel extends DiscordEnumCompanion[Int, ExplicitContentFilterLevel] {

    /** Media content will not be scanned */
    val DISABLED: ExplicitContentFilterLevel = ExplicitContentFilterLevel(0)

    /** Media content sent by members without roles will be scanned */
    val MEMBERS_WITHOUT_ROLES: ExplicitContentFilterLevel = ExplicitContentFilterLevel(1)

    /** Media content sent by all members will be scanned */
    val ALL_MEMBERS: ExplicitContentFilterLevel = ExplicitContentFilterLevel(2)

    def unknown(value: Int): ExplicitContentFilterLevel = new ExplicitContentFilterLevel(value)

    def values: Seq[ExplicitContentFilterLevel] = Seq(DISABLED, MEMBERS_WITHOUT_ROLES, ALL_MEMBERS)

  }

  sealed case class MFALevel private (value: Int) extends DiscordEnum[Int]
  object MFALevel                                 extends DiscordEnumCompanion[Int, MFALevel] {

    /** Guild has no MFA/2FA requirement for moderation actions */
    val NONE: MFALevel = MFALevel(0)

    /** Guild has a 2FA requirement for moderation actions */
    val ELEVATED: MFALevel = MFALevel(1)

    def unknown(value: Int): MFALevel = new MFALevel(value)

    def values: Seq[MFALevel] = Seq(NONE, ELEVATED)

  }

  sealed case class VerificationLevel private (value: Int) extends DiscordEnum[Int]
  object VerificationLevel                                 extends DiscordEnumCompanion[Int, VerificationLevel] {

    /** Unrestricted */
    val NONE: VerificationLevel = VerificationLevel(0)

    /** Must have verified email on account */
    val LOW: VerificationLevel = VerificationLevel(1)

    /** Must be registered on Discord for longer than 5 minutes */
    val MEDIUM: VerificationLevel = VerificationLevel(2)

    /** Must be a member of the server for longer than 10 minutes */
    val HIGH: VerificationLevel = VerificationLevel(3)

    /** Must have a verified phone number */
    val VERY_HIGH: VerificationLevel = VerificationLevel(4)

    def unknown(value: Int): VerificationLevel = new VerificationLevel(value)

    def values: Seq[VerificationLevel] = Seq(NONE, LOW, MEDIUM, HIGH, VERY_HIGH)

  }

  sealed case class GuildNSFWLevel private (value: Int) extends DiscordEnum[Int]
  object GuildNSFWLevel extends DiscordEnumCompanion[Int, GuildNSFWLevel] {

    val DEFAULT: GuildNSFWLevel        = GuildNSFWLevel(0)
    val EXPLICIT: GuildNSFWLevel       = GuildNSFWLevel(1)
    val SAFE: GuildNSFWLevel           = GuildNSFWLevel(2)
    val AGE_RESTRICTED: GuildNSFWLevel = GuildNSFWLevel(3)

    def unknown(value: Int): GuildNSFWLevel = new GuildNSFWLevel(value)

    def values: Seq[GuildNSFWLevel] = Seq(DEFAULT, EXPLICIT, SAFE, AGE_RESTRICTED)

  }

  sealed case class PremiumTier private (value: Int) extends DiscordEnum[Int]
  object PremiumTier                                 extends DiscordEnumCompanion[Int, PremiumTier] {

    /** Guild has not unlocked any Server Boost perks */
    val NONE: PremiumTier = PremiumTier(0)

    /** Guild has unlocked Server Boost level 1 perks */
    val TIER_1: PremiumTier = PremiumTier(1)

    /** Guild has unlocked Server Boost level 2 perks */
    val TIER_2: PremiumTier = PremiumTier(2)

    /** Guild has unlocked Server Boost level 3 perks */
    val TIER_3: PremiumTier = PremiumTier(3)

    def unknown(value: Int): PremiumTier = new PremiumTier(value)

    def values: Seq[PremiumTier] = Seq(NONE, TIER_1, TIER_2, TIER_3)

  }

  sealed case class SystemChannelFlags private (value: Int) extends DiscordEnum[Int]
  object SystemChannelFlags                                 extends DiscordEnumCompanion[Int, SystemChannelFlags] {

    /** Suppress member join notifications */
    val SUPPRESS_JOIN_NOTIFICATIONS: SystemChannelFlags = SystemChannelFlags(1 << 0)

    /** Suppress server boost notifications */
    val SUPPRESS_PREMIUM_SUBSCRIPTIONS: SystemChannelFlags = SystemChannelFlags(1 << 1)

    /** Suppress server setup tips */
    val SUPPRESS_GUILD_REMINDER_NOTIFICATIONS: SystemChannelFlags = SystemChannelFlags(1 << 2)

    /** Hide member join sticker reply buttons */
    val SUPPRESS_JOIN_NOTIFICATION_REPLIES: SystemChannelFlags = SystemChannelFlags(1 << 3)

    /** Suppress role subscription purchase and renewal notifications */
    val SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS: SystemChannelFlags = SystemChannelFlags(1 << 4)

    /** Hide role subscription sticker reply buttons */
    val SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES: SystemChannelFlags = SystemChannelFlags(1 << 5)

    def unknown(value: Int): SystemChannelFlags = new SystemChannelFlags(value)

    def values: Seq[SystemChannelFlags] = Seq(
      SUPPRESS_JOIN_NOTIFICATIONS,
      SUPPRESS_PREMIUM_SUBSCRIPTIONS,
      SUPPRESS_GUILD_REMINDER_NOTIFICATIONS,
      SUPPRESS_JOIN_NOTIFICATION_REPLIES,
      SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS,
      SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES
    )

    implicit class SystemChannelFlagsBitFieldOps(private val here: SystemChannelFlags) extends AnyVal {
      def toInt: Int = here.value

      def ++(there: SystemChannelFlags): SystemChannelFlags = SystemChannelFlags(here.value | there.value)

      def --(there: SystemChannelFlags): SystemChannelFlags = SystemChannelFlags(here.value & ~there.value)

      def isNone: Boolean = here.value == 0
    }
  }

  sealed case class GuildFeature private (value: String) extends DiscordEnum[String]
  object GuildFeature                                    extends DiscordEnumCompanion[String, GuildFeature] {

    /** Guild has access to set an animated guild banner image */
    val ANIMATED_BANNER: GuildFeature = GuildFeature("ANIMATED_BANNER")

    /** Guild has access to set an animated guild icon */
    val ANIMATED_ICON: GuildFeature = GuildFeature("ANIMATED_ICON")

    /** Guild is using the old permissions configuration behavior */
    val APPLICATION_COMMAND_PERMISSIONS_V2: GuildFeature = GuildFeature("APPLICATION_COMMAND_PERMISSIONS_V2")

    /** Guild has set up auto moderation rules */
    val AUTO_MODERATION: GuildFeature = GuildFeature("AUTO_MODERATION")

    /** Guild has access to set a guild banner image */
    val BANNER: GuildFeature = GuildFeature("BANNER")

    /**
      * Guild can enable welcome screen, Membership Screening, stage channels
      * and discovery, and receives community updates
      */
    val COMMUNITY: GuildFeature = GuildFeature("COMMUNITY")

    /** Guild has enabled monetization */
    val CREATOR_MONETIZABLE_PROVISIONAL: GuildFeature = GuildFeature("CREATOR_MONETIZABLE_PROVISIONAL")

    /** Guild has enabled the role subscription promo page */
    val CREATOR_STORE_PAGE: GuildFeature = GuildFeature("CREATOR_STORE_PAGE")

    /** Guild has been set as a support server on the App Directory */
    val DEVELOPER_SUPPORT_SERVER: GuildFeature = GuildFeature("DEVELOPER_SUPPORT_SERVER")

    /** Guild is able to be discovered in the directory */
    val DISCOVERABLE: GuildFeature = GuildFeature("DISCOVERABLE")

    /** Guild is able to be featured in the directory */
    val FEATURABLE: GuildFeature = GuildFeature("FEATURABLE")

    /** Guild has paused invites, preventing new users from joining */
    val INVITES_DISABLED: GuildFeature = GuildFeature("INVITES_DISABLED")

    /** Guild has access to set an invite splash background */
    val INVITE_SPLASH: GuildFeature = GuildFeature("INVITE_SPLASH")

    /** Guild has enabled Membership Screening */
    val MEMBER_VERIFICATION_GATE_ENABLED: GuildFeature = GuildFeature("MEMBER_VERIFICATION_GATE_ENABLED")

    /** Guild has increased custom sticker slots */
    val MORE_STICKERS: GuildFeature = GuildFeature("MORE_STICKERS")

    /** Guild has access to create announcement channels */
    val NEWS: GuildFeature = GuildFeature("NEWS")

    /** Guild is partnered */
    val PARTNERED: GuildFeature = GuildFeature("PARTNERED")

    /**
      * Guild can be previewed before joining via Membership Screening or the
      * directory
      */
    val PREVIEW_ENABLED: GuildFeature = GuildFeature("PREVIEW_ENABLED")

    /**
      * Guild has disabled alerts for join raids in the configured safety alerts
      * channel
      */
    val RAID_ALERTS_DISABLED: GuildFeature = GuildFeature("RAID_ALERTS_DISABLED")

    /** Guild is able to set role icons */
    val ROLE_ICONS: GuildFeature = GuildFeature("ROLE_ICONS")

    /** Guild has role subscriptions that can be purchased */
    val ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE: GuildFeature = GuildFeature(
      "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE"
    )

    /** Guild has enabled role subscriptions */
    val ROLE_SUBSCRIPTIONS_ENABLED: GuildFeature = GuildFeature("ROLE_SUBSCRIPTIONS_ENABLED")

    /** Guild has enabled ticketed events */
    val TICKETED_EVENTS_ENABLED: GuildFeature = GuildFeature("TICKETED_EVENTS_ENABLED")

    /** Guild has access to set a vanity URL */
    val VANITY_URL: GuildFeature = GuildFeature("VANITY_URL")

    /** Guild is verified */
    val VERIFIED: GuildFeature = GuildFeature("VERIFIED")

    /**
      * Guild has access to set 384kbps bitrate in voice (previously VIP voice
      * servers)
      */
    val VIP_REGIONS: GuildFeature = GuildFeature("VIP_REGIONS")

    /** Guild has enabled the welcome screen */
    val WELCOME_SCREEN_ENABLED: GuildFeature = GuildFeature("WELCOME_SCREEN_ENABLED")

    def unknown(value: String): GuildFeature = new GuildFeature(value)

    def values: Seq[GuildFeature] = Seq(
      ANIMATED_BANNER,
      ANIMATED_ICON,
      APPLICATION_COMMAND_PERMISSIONS_V2,
      AUTO_MODERATION,
      BANNER,
      COMMUNITY,
      CREATOR_MONETIZABLE_PROVISIONAL,
      CREATOR_STORE_PAGE,
      DEVELOPER_SUPPORT_SERVER,
      DISCOVERABLE,
      FEATURABLE,
      INVITES_DISABLED,
      INVITE_SPLASH,
      MEMBER_VERIFICATION_GATE_ENABLED,
      MORE_STICKERS,
      NEWS,
      PARTNERED,
      PREVIEW_ENABLED,
      RAID_ALERTS_DISABLED,
      ROLE_ICONS,
      ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE,
      ROLE_SUBSCRIPTIONS_ENABLED,
      TICKETED_EVENTS_ENABLED,
      VANITY_URL,
      VERIFIED,
      VIP_REGIONS,
      WELCOME_SCREEN_ENABLED
    )

  }

  sealed case class MutableGuildFeature private (value: String) extends DiscordEnum[String]
  object MutableGuildFeature extends DiscordEnumCompanion[String, MutableGuildFeature] {

    /** Enables Community Features in the guild */
    val COMMUNITY: MutableGuildFeature = MutableGuildFeature("COMMUNITY")

    /** Enables discovery in the guild, making it publicly listed */
    val DISCOVERABLE: MutableGuildFeature = MutableGuildFeature("DISCOVERABLE*")

    /** Pauses all invites/access to the server */
    val INVITES_DISABLED: MutableGuildFeature = MutableGuildFeature("INVITES_DISABLED")

    /** Disables alerts for join raids */
    val RAID_ALERTS_DISABLED: MutableGuildFeature = MutableGuildFeature("RAID_ALERTS_DISABLED")

    def unknown(value: String): MutableGuildFeature = new MutableGuildFeature(value)

    def values: Seq[MutableGuildFeature] = Seq(COMMUNITY, DISCOVERABLE, INVITES_DISABLED, RAID_ALERTS_DISABLED)

  }
}

/**
  * A partial guild object. Represents an Offline Guild, or a Guild whose
  * information has not been provided through Guild Create events during the
  * Gateway connect.
  */
class UnavailableGuild(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Guild id */
  @inline def id: GuildId = selectDynamic[GuildId]("id")

  @inline def unavailable: Boolean = selectDynamic[Boolean]("unavailable")

  override def values: Seq[() => Any] = Seq(() => id, () => unavailable)
}
object UnavailableGuild extends DiscordObjectCompanion[UnavailableGuild] {
  def makeRaw(json: Json, cache: Map[String, Any]): UnavailableGuild = new UnavailableGuild(json, cache)

  /** @param id Guild id */
  def make20(id: GuildId, unavailable: Boolean): UnavailableGuild =
    makeRawFromFields("id" := id, "unavailable" := unavailable)

}

class GuildPreview(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Guild id */
  @inline def id: RawSnowflake = selectDynamic[RawSnowflake]("id")

  /** Guild name (2-100 characters) */
  @inline def name: String = selectDynamic[String]("name")

  /** Icon hash */
  @inline def icon: Option[ImageHash] = selectDynamic[Option[ImageHash]]("icon")

  /** Splash hash */
  @inline def splash: Option[ImageHash] = selectDynamic[Option[ImageHash]]("splash")

  /** Discovery splash hash */
  @inline def discoverySplash: Option[ImageHash] = selectDynamic[Option[ImageHash]]("discovery_splash")

  /** Custom guild emojis */
  @inline def emojis: Seq[Emoji] = selectDynamic[Seq[Emoji]]("emojis")

  /** Enabled guild features */
  @inline def features: Seq[Guild.GuildFeature] = selectDynamic[Seq[Guild.GuildFeature]]("features")

  /** Approximate number of members in this guild */
  @inline def approximateMemberCount: Int = selectDynamic[Int]("approximate_member_count")

  /** Approximate number of online members in this guild */
  @inline def approximatePresenceCount: Int = selectDynamic[Int]("approximate_presence_count")

  /** The description for the guild */
  @inline def description: Option[String] = selectDynamic[Option[String]]("description")

  /** Custom guild stickers */
  @inline def stickers: Seq[Sticker] = selectDynamic[Seq[Sticker]]("stickers")

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => name,
    () => icon,
    () => splash,
    () => discoverySplash,
    () => emojis,
    () => features,
    () => approximateMemberCount,
    () => approximatePresenceCount,
    () => description,
    () => stickers
  )
}
object GuildPreview extends DiscordObjectCompanion[GuildPreview] {
  def makeRaw(json: Json, cache: Map[String, Any]): GuildPreview = new GuildPreview(json, cache)

  /**
    * @param id
    *   Guild id
    * @param name
    *   Guild name (2-100 characters)
    * @param icon
    *   Icon hash
    * @param splash
    *   Splash hash
    * @param discoverySplash
    *   Discovery splash hash
    * @param emojis
    *   Custom guild emojis
    * @param features
    *   Enabled guild features
    * @param approximateMemberCount
    *   Approximate number of members in this guild
    * @param approximatePresenceCount
    *   Approximate number of online members in this guild
    * @param description
    *   The description for the guild
    * @param stickers
    *   Custom guild stickers
    */
  def make20(
      id: RawSnowflake,
      name: String,
      icon: Option[ImageHash],
      splash: Option[ImageHash],
      discoverySplash: Option[ImageHash],
      emojis: Seq[Emoji],
      features: Seq[Guild.GuildFeature],
      approximateMemberCount: Int,
      approximatePresenceCount: Int,
      description: Option[String],
      stickers: Seq[Sticker]
  ): GuildPreview = makeRawFromFields(
    "id"                         := id,
    "name"                       := name,
    "icon"                       := icon,
    "splash"                     := splash,
    "discovery_splash"           := discoverySplash,
    "emojis"                     := emojis,
    "features"                   := features,
    "approximate_member_count"   := approximateMemberCount,
    "approximate_presence_count" := approximatePresenceCount,
    "description"                := description,
    "stickers"                   := stickers
  )

}

class GuildWidgetSettings(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Whether the widget is enabled */
  @inline def enabled: Boolean = selectDynamic[Boolean]("enabled")

  /** The widget channel id */
  @inline def channelId: Option[GuildChannelId] = selectDynamic[Option[GuildChannelId]]("channel_id")

  override def values: Seq[() => Any] = Seq(() => enabled, () => channelId)
}
object GuildWidgetSettings extends DiscordObjectCompanion[GuildWidgetSettings] {
  def makeRaw(json: Json, cache: Map[String, Any]): GuildWidgetSettings = new GuildWidgetSettings(json, cache)

  /**
    * @param enabled
    *   Whether the widget is enabled
    * @param channelId
    *   The widget channel id
    */
  def make20(enabled: Boolean, channelId: Option[GuildChannelId]): GuildWidgetSettings =
    makeRawFromFields("enabled" := enabled, "channel_id" := channelId)

}

class GuildWidget(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Guild id */
  @inline def id: GuildId = selectDynamic[GuildId]("id")

  /** Guild name (2-100 characters) */
  @inline def name: String = selectDynamic[String]("name")

  /** Instant invite for the guilds specified widget invite channel */
  @inline def instantInvite: Option[String] = selectDynamic[Option[String]]("instant_invite")

  /** Voice and stage channels which are accessible by @everyone */
  @inline def channels: Seq[GuildWidget.GuildWidgetChannel] =
    selectDynamic[Seq[GuildWidget.GuildWidgetChannel]]("channels")

  /** Special widget user objects that includes users presence (Limit 100) */
  @inline def members: Seq[GuildWidget.GuildWidgetUser] = selectDynamic[Seq[GuildWidget.GuildWidgetUser]]("members")

  /** Number of online members in this guild */
  @inline def presenceCount: Int = selectDynamic[Int]("presence_count")

  override def values: Seq[() => Any] =
    Seq(() => id, () => name, () => instantInvite, () => channels, () => members, () => presenceCount)
}
object GuildWidget extends DiscordObjectCompanion[GuildWidget] {
  def makeRaw(json: Json, cache: Map[String, Any]): GuildWidget = new GuildWidget(json, cache)

  /**
    * @param id
    *   Guild id
    * @param name
    *   Guild name (2-100 characters)
    * @param instantInvite
    *   Instant invite for the guilds specified widget invite channel
    * @param channels
    *   Voice and stage channels which are accessible by @everyone
    * @param members
    *   Special widget user objects that includes users presence (Limit 100)
    * @param presenceCount
    *   Number of online members in this guild
    */
  def make20(
      id: GuildId,
      name: String,
      instantInvite: Option[String],
      channels: Seq[GuildWidget.GuildWidgetChannel],
      members: Seq[GuildWidget.GuildWidgetUser],
      presenceCount: Int
  ): GuildWidget = makeRawFromFields(
    "id"             := id,
    "name"           := name,
    "instant_invite" := instantInvite,
    "channels"       := channels,
    "members"        := members,
    "presence_count" := presenceCount
  )

  class GuildWidgetChannel(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
    @inline def id: GuildChannelId = selectDynamic[GuildChannelId]("id")

    @inline def name: String = selectDynamic[String]("name")

    @inline def position: Int = selectDynamic[Int]("position")

    override def values: Seq[() => Any] = Seq(() => id, () => name, () => position)
  }
  object GuildWidgetChannel extends DiscordObjectCompanion[GuildWidgetChannel] {
    def makeRaw(json: Json, cache: Map[String, Any]): GuildWidgetChannel = new GuildWidgetChannel(json, cache)

    def make20(id: GuildChannelId, name: String, position: Int): GuildWidgetChannel =
      makeRawFromFields("id" := id, "name" := name, "position" := position)

  }

  class GuildWidgetUser(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
    @inline def id: UserId = selectDynamic[UserId]("id")

    @inline def username: String = selectDynamic[String]("username")

    @inline def discriminator: String = selectDynamic[String]("discriminator")

    @inline def avatar: Option[ImageHash] = selectDynamic[Option[ImageHash]]("avatar")

    @inline def status: Status = selectDynamic[Status]("status")

    @inline def avatarUrl: String = selectDynamic[String]("avatar_url")

    override def values: Seq[() => Any] =
      Seq(() => id, () => username, () => discriminator, () => avatar, () => status, () => avatarUrl)
  }
  object GuildWidgetUser extends DiscordObjectCompanion[GuildWidgetUser] {
    def makeRaw(json: Json, cache: Map[String, Any]): GuildWidgetUser = new GuildWidgetUser(json, cache)

    def make20(
        id: UserId,
        username: String,
        discriminator: String,
        avatar: Option[ImageHash],
        status: Status,
        avatarUrl: String
    ): GuildWidgetUser = makeRawFromFields(
      "id"            := id,
      "username"      := username,
      "discriminator" := discriminator,
      "avatar"        := avatar,
      "status"        := status,
      "avatar_url"    := avatarUrl
    )

  }
}

class GuildMember(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The user this guild member represents */
  @inline def user: UndefOr[User] = selectDynamic[UndefOr[User]]("user")

  /** This user's guild nickname */
  @inline def nick: JsonOption[String] = selectDynamic[JsonOption[String]]("nick")

  /** The member's guild avatar hash */
  @inline def avatar: JsonOption[ImageHash] = selectDynamic[JsonOption[ImageHash]]("avatar")

  /** Array of role object ids */
  @inline def roles: Seq[RoleId] = selectDynamic[Seq[RoleId]]("roles")

  /** When the user joined the guild */
  @inline def joinedAt: OffsetDateTime = selectDynamic[OffsetDateTime]("joined_at")

  /** When the user started boosting the guild */
  @inline def premiumSince: JsonOption[OffsetDateTime] = selectDynamic[JsonOption[OffsetDateTime]]("premium_since")

  /** Whether the user is deafened in voice channels */
  @inline def deaf: Boolean = selectDynamic[Boolean]("deaf")

  /** Whether the user is muted in voice channels */
  @inline def mute: Boolean = selectDynamic[Boolean]("mute")

  /** Guild member flags represented as a bit set, defaults to 0 */
  @inline def flags: GuildMember.GuildMemberFlags = selectDynamic[GuildMember.GuildMemberFlags]("flags")

  /**
    * Whether the user has not yet passed the guild's Membership Screening
    * requirements
    */
  @inline def pending: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("pending")

  /**
    * Total permissions of the member in the channel, including overwrites,
    * returned when in the interaction object
    */
  @inline def permissions: UndefOr[Permissions] = selectDynamic[UndefOr[Permissions]]("permissions")

  /**
    * When the user's timeout will expire and the user will be able to
    * communicate in the guild again, null or a time in the past if the user is
    * not timed out
    */
  @inline def communicationDisabledUntil: JsonOption[OffsetDateTime] =
    selectDynamic[JsonOption[OffsetDateTime]]("communication_disabled_until")

  override def values: Seq[() => Any] = Seq(
    () => user,
    () => nick,
    () => avatar,
    () => roles,
    () => joinedAt,
    () => premiumSince,
    () => deaf,
    () => mute,
    () => flags,
    () => pending,
    () => permissions,
    () => communicationDisabledUntil
  )
}
object GuildMember extends DiscordObjectCompanion[GuildMember] {
  def makeRaw(json: Json, cache: Map[String, Any]): GuildMember = new GuildMember(json, cache)

  /**
    * @param user
    *   The user this guild member represents
    * @param nick
    *   This user's guild nickname
    * @param avatar
    *   The member's guild avatar hash
    * @param roles
    *   Array of role object ids
    * @param joinedAt
    *   When the user joined the guild
    * @param premiumSince
    *   When the user started boosting the guild
    * @param deaf
    *   Whether the user is deafened in voice channels
    * @param mute
    *   Whether the user is muted in voice channels
    * @param flags
    *   Guild member flags represented as a bit set, defaults to 0
    * @param pending
    *   Whether the user has not yet passed the guild's Membership Screening
    *   requirements
    * @param permissions
    *   Total permissions of the member in the channel, including overwrites,
    *   returned when in the interaction object
    * @param communicationDisabledUntil
    *   When the user's timeout will expire and the user will be able to
    *   communicate in the guild again, null or a time in the past if the user
    *   is not timed out
    */
  def make20(
      user: UndefOr[User] = UndefOrUndefined,
      nick: JsonOption[String] = JsonUndefined,
      avatar: JsonOption[ImageHash] = JsonUndefined,
      roles: Seq[RoleId],
      joinedAt: OffsetDateTime,
      premiumSince: JsonOption[OffsetDateTime] = JsonUndefined,
      deaf: Boolean,
      mute: Boolean,
      flags: GuildMember.GuildMemberFlags,
      pending: UndefOr[Boolean] = UndefOrUndefined,
      permissions: UndefOr[Permissions] = UndefOrUndefined,
      communicationDisabledUntil: JsonOption[OffsetDateTime] = JsonUndefined
  ): GuildMember = makeRawFromFields(
    "user"                         :=? user,
    "nick"                         :=? nick,
    "avatar"                       :=? avatar,
    "roles"                         := roles,
    "joined_at"                     := joinedAt,
    "premium_since"                :=? premiumSince,
    "deaf"                          := deaf,
    "mute"                          := mute,
    "flags"                         := flags,
    "pending"                      :=? pending,
    "permissions"                  :=? permissions,
    "communication_disabled_until" :=? communicationDisabledUntil
  )

  sealed case class GuildMemberFlags private (value: Int) extends DiscordEnum[Int]
  object GuildMemberFlags                                 extends DiscordEnumCompanion[Int, GuildMemberFlags] {

    /** Member has left and rejoined the guild */
    val DID_REJOIN: GuildMemberFlags = GuildMemberFlags(1 << 0)

    /** Member has completed onboarding */
    val COMPLETED_ONBOARDING: GuildMemberFlags = GuildMemberFlags(1 << 1)

    /** Member is exempt from guild verification requirements */
    val BYPASSES_VERIFICATION: GuildMemberFlags = GuildMemberFlags(1 << 2)

    /** Member has started onboarding */
    val STARTED_ONBOARDING: GuildMemberFlags = GuildMemberFlags(1 << 3)

    def unknown(value: Int): GuildMemberFlags = new GuildMemberFlags(value)

    def values: Seq[GuildMemberFlags] = Seq(DID_REJOIN, COMPLETED_ONBOARDING, BYPASSES_VERIFICATION, STARTED_ONBOARDING)

    implicit class GuildMemberFlagsBitFieldOps(private val here: GuildMemberFlags) extends AnyVal {
      def toInt: Int = here.value

      def ++(there: GuildMemberFlags): GuildMemberFlags = GuildMemberFlags(here.value | there.value)

      def --(there: GuildMemberFlags): GuildMemberFlags = GuildMemberFlags(here.value & ~there.value)

      def isNone: Boolean = here.value == 0
    }
  }
}

class Integration(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Integration id */
  @inline def id: Snowflake[Integration] = selectDynamic[Snowflake[Integration]]("id")

  /** Integration name */
  @inline def name: String = selectDynamic[String]("name")

  /** Integration type (twitch, youtube, discord, or guild_subscription) */
  @inline def tpe: String = selectDynamic[String]("type")

  /** Is this integration enabled */
  @inline def enabled: Boolean = selectDynamic[Boolean]("enabled")

  /** Is this integration syncing */
  @inline def syncing: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("syncing")

  /** Id that this integration uses for "subscribers" */
  @inline def roleId: UndefOr[RoleId] = selectDynamic[UndefOr[RoleId]]("role_id")

  /**
    * Whether emoticons should be synced for this integration (twitch only
    * currently)
    */
  @inline def enableEmoticons: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("enable_emoticons")

  /** The behavior of expiring subscribers */
  @inline def expireBehavior: UndefOr[Integration.IntegrationExpireBehavior] =
    selectDynamic[UndefOr[Integration.IntegrationExpireBehavior]]("expire_behavior")

  /** The grace period (in days) before expiring subscribers */
  @inline def expireGracePeriod: UndefOr[Int] = selectDynamic[UndefOr[Int]]("expire_grace_period")

  /** User for this integration */
  @inline def user: UndefOr[User] = selectDynamic[UndefOr[User]]("user")

  /** Integration account information */
  @inline def account: Integration.IntegrationAccount = selectDynamic[Integration.IntegrationAccount]("account")

  /** When this integration was last synced */
  @inline def syncedAt: UndefOr[OffsetDateTime] = selectDynamic[UndefOr[OffsetDateTime]]("synced_at")

  /** How many subscribers this integration has */
  @inline def subscriberCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("subscriber_count")

  /** Has this integration been revoked */
  @inline def revoked: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("revoked")

  /** The bot/OAuth2 application for discord integrations */
  @inline def application: UndefOr[Application] = selectDynamic[UndefOr[Application]]("application")

  /** The scopes the application has been authorized for */
  @inline def scopes: UndefOr[Seq[OAuth2Scope]] = selectDynamic[UndefOr[Seq[OAuth2Scope]]]("scopes")

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => name,
    () => tpe,
    () => enabled,
    () => syncing,
    () => roleId,
    () => enableEmoticons,
    () => expireBehavior,
    () => expireGracePeriod,
    () => user,
    () => account,
    () => syncedAt,
    () => subscriberCount,
    () => revoked,
    () => application,
    () => scopes
  )
}
object Integration extends DiscordObjectCompanion[Integration] {
  def makeRaw(json: Json, cache: Map[String, Any]): Integration = new Integration(json, cache)

  /**
    * @param id
    *   Integration id
    * @param name
    *   Integration name
    * @param tpe
    *   Integration type (twitch, youtube, discord, or guild_subscription)
    * @param enabled
    *   Is this integration enabled
    * @param syncing
    *   Is this integration syncing
    * @param roleId
    *   Id that this integration uses for "subscribers"
    * @param enableEmoticons
    *   Whether emoticons should be synced for this integration (twitch only
    *   currently)
    * @param expireBehavior
    *   The behavior of expiring subscribers
    * @param expireGracePeriod
    *   The grace period (in days) before expiring subscribers
    * @param user
    *   User for this integration
    * @param account
    *   Integration account information
    * @param syncedAt
    *   When this integration was last synced
    * @param subscriberCount
    *   How many subscribers this integration has
    * @param revoked
    *   Has this integration been revoked
    * @param application
    *   The bot/OAuth2 application for discord integrations
    * @param scopes
    *   The scopes the application has been authorized for
    */
  def make20(
      id: Snowflake[Integration],
      name: String,
      tpe: String,
      enabled: Boolean,
      syncing: UndefOr[Boolean] = UndefOrUndefined,
      roleId: UndefOr[RoleId] = UndefOrUndefined,
      enableEmoticons: UndefOr[Boolean] = UndefOrUndefined,
      expireBehavior: UndefOr[Integration.IntegrationExpireBehavior] = UndefOrUndefined,
      expireGracePeriod: UndefOr[Int] = UndefOrUndefined,
      user: UndefOr[User] = UndefOrUndefined,
      account: Integration.IntegrationAccount,
      syncedAt: UndefOr[OffsetDateTime] = UndefOrUndefined,
      subscriberCount: UndefOr[Int] = UndefOrUndefined,
      revoked: UndefOr[Boolean] = UndefOrUndefined,
      application: UndefOr[Application] = UndefOrUndefined,
      scopes: UndefOr[Seq[OAuth2Scope]] = UndefOrUndefined
  ): Integration = makeRawFromFields(
    "id"                   := id,
    "name"                 := name,
    "type"                 := tpe,
    "enabled"              := enabled,
    "syncing"             :=? syncing,
    "role_id"             :=? roleId,
    "enable_emoticons"    :=? enableEmoticons,
    "expire_behavior"     :=? expireBehavior,
    "expire_grace_period" :=? expireGracePeriod,
    "user"                :=? user,
    "account"              := account,
    "synced_at"           :=? syncedAt,
    "subscriber_count"    :=? subscriberCount,
    "revoked"             :=? revoked,
    "application"         :=? application,
    "scopes"              :=? scopes
  )

  sealed case class IntegrationExpireBehavior private (value: Int) extends DiscordEnum[Int]
  object IntegrationExpireBehavior extends DiscordEnumCompanion[Int, IntegrationExpireBehavior] {

    /** Remove role */
    val RemoveRole: IntegrationExpireBehavior = IntegrationExpireBehavior(0)

    /** Kick */
    val Kick: IntegrationExpireBehavior = IntegrationExpireBehavior(1)

    def unknown(value: Int): IntegrationExpireBehavior = new IntegrationExpireBehavior(value)

    def values: Seq[IntegrationExpireBehavior] = Seq(RemoveRole, Kick)

  }

  class IntegrationAccount(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Id of the account */
    @inline def id: String = selectDynamic[String]("id")

    /** Name of the account */
    @inline def name: String = selectDynamic[String]("name")

    override def values: Seq[() => Any] = Seq(() => id, () => name)
  }
  object IntegrationAccount extends DiscordObjectCompanion[IntegrationAccount] {
    def makeRaw(json: Json, cache: Map[String, Any]): IntegrationAccount = new IntegrationAccount(json, cache)

    /**
      * @param id
      *   Id of the account
      * @param name
      *   Name of the account
      */
    def make20(id: String, name: String): IntegrationAccount = makeRawFromFields("id" := id, "name" := name)

  }

  class IntegrationApplication(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** The id of the app */
    @inline def id: ApplicationId = selectDynamic[ApplicationId]("id")

    /** The name of the app */
    @inline def name: String = selectDynamic[String]("name")

    /** The icon hash of the app */
    @inline def icon: Option[ImageHash] = selectDynamic[Option[ImageHash]]("icon")

    /** The description of the app */
    @inline def description: String = selectDynamic[String]("description")

    /** The bot associated with this application */
    @inline def bot: UndefOr[User] = selectDynamic[UndefOr[User]]("bot")

    override def values: Seq[() => Any] = Seq(() => id, () => name, () => icon, () => description, () => bot)
  }
  object IntegrationApplication extends DiscordObjectCompanion[IntegrationApplication] {
    def makeRaw(json: Json, cache: Map[String, Any]): IntegrationApplication = new IntegrationApplication(json, cache)

    /**
      * @param id
      *   The id of the app
      * @param name
      *   The name of the app
      * @param icon
      *   The icon hash of the app
      * @param description
      *   The description of the app
      * @param bot
      *   The bot associated with this application
      */
    def make20(
        id: ApplicationId,
        name: String,
        icon: Option[ImageHash],
        description: String,
        bot: UndefOr[User] = UndefOrUndefined
    ): IntegrationApplication =
      makeRawFromFields("id" := id, "name" := name, "icon" := icon, "description" := description, "bot" :=? bot)

  }
}

class Ban(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The reason for the ban */
  @inline def reason: Option[String] = selectDynamic[Option[String]]("reason")

  /** The banned user */
  @inline def user: User = selectDynamic[User]("user")

  override def values: Seq[() => Any] = Seq(() => reason, () => user)
}
object Ban extends DiscordObjectCompanion[Ban] {
  def makeRaw(json: Json, cache: Map[String, Any]): Ban = new Ban(json, cache)

  /**
    * @param reason
    *   The reason for the ban
    * @param user
    *   The banned user
    */
  def make20(reason: Option[String], user: User): Ban = makeRawFromFields("reason" := reason, "user" := user)

}

class WelcomeScreen(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The server description shown in the welcome screen */
  @inline def description: Option[String] = selectDynamic[Option[String]]("description")

  /** The channels shown in the welcome screen, up to 5 */
  @inline def welcomeChannels: Seq[WelcomeScreen.WelcomeScreenChannel] =
    selectDynamic[Seq[WelcomeScreen.WelcomeScreenChannel]]("welcome_channels")

  override def values: Seq[() => Any] = Seq(() => description, () => welcomeChannels)
}
object WelcomeScreen extends DiscordObjectCompanion[WelcomeScreen] {
  def makeRaw(json: Json, cache: Map[String, Any]): WelcomeScreen = new WelcomeScreen(json, cache)

  /**
    * @param description
    *   The server description shown in the welcome screen
    * @param welcomeChannels
    *   The channels shown in the welcome screen, up to 5
    */
  def make20(description: Option[String], welcomeChannels: Seq[WelcomeScreen.WelcomeScreenChannel]): WelcomeScreen =
    makeRawFromFields("description" := description, "welcome_channels" := welcomeChannels)

  class WelcomeScreenChannel(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** The channel's id */
    @inline def channelId: GuildChannelId = selectDynamic[GuildChannelId]("channel_id")

    /** The description shown for the channel */
    @inline def description: String = selectDynamic[String]("description")

    /** The emoji id, if the emoji is custom */
    @inline def emojiId: Option[Snowflake[Emoji]] = selectDynamic[Option[Snowflake[Emoji]]]("emoji_id")

    /**
      * The emoji name if custom, the unicode character if standard, or null if
      * no emoji is set
      */
    @inline def emojiName: Option[String] = selectDynamic[Option[String]]("emoji_name")

    override def values: Seq[() => Any] = Seq(() => channelId, () => description, () => emojiId, () => emojiName)
  }
  object WelcomeScreenChannel extends DiscordObjectCompanion[WelcomeScreenChannel] {
    def makeRaw(json: Json, cache: Map[String, Any]): WelcomeScreenChannel = new WelcomeScreenChannel(json, cache)

    /**
      * @param channelId
      *   The channel's id
      * @param description
      *   The description shown for the channel
      * @param emojiId
      *   The emoji id, if the emoji is custom
      * @param emojiName
      *   The emoji name if custom, the unicode character if standard, or null
      *   if no emoji is set
      */
    def make20(
        channelId: GuildChannelId,
        description: String,
        emojiId: Option[Snowflake[Emoji]],
        emojiName: Option[String]
    ): WelcomeScreenChannel = makeRawFromFields(
      "channel_id"  := channelId,
      "description" := description,
      "emoji_id"    := emojiId,
      "emoji_name"  := emojiName
    )

  }
}

class GuildOnboarding(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** ID of the guild this onboarding is part of */
  @inline def guildId: GuildId = selectDynamic[GuildId]("guild_id")

  /** Prompts shown during onboarding and in customize community */
  @inline def prompts: Seq[GuildOnboarding.OnboardingPrompt] =
    selectDynamic[Seq[GuildOnboarding.OnboardingPrompt]]("prompts")

  /** Channel IDs that members get opted into automatically */
  @inline def defaultChannelIds: Seq[GuildChannelId] = selectDynamic[Seq[GuildChannelId]]("default_channel_ids")

  /** Whether onboarding is enabled in the guild */
  @inline def enabled: Boolean = selectDynamic[Boolean]("enabled")

  /** Current mode of onboarding */
  @inline def mode: GuildOnboarding.OnboardingMode = selectDynamic[GuildOnboarding.OnboardingMode]("mode")

  override def values: Seq[() => Any] =
    Seq(() => guildId, () => prompts, () => defaultChannelIds, () => enabled, () => mode)
}
object GuildOnboarding extends DiscordObjectCompanion[GuildOnboarding] {
  def makeRaw(json: Json, cache: Map[String, Any]): GuildOnboarding = new GuildOnboarding(json, cache)

  /**
    * @param guildId
    *   ID of the guild this onboarding is part of
    * @param prompts
    *   Prompts shown during onboarding and in customize community
    * @param defaultChannelIds
    *   Channel IDs that members get opted into automatically
    * @param enabled
    *   Whether onboarding is enabled in the guild
    * @param mode
    *   Current mode of onboarding
    */
  def make20(
      guildId: GuildId,
      prompts: Seq[GuildOnboarding.OnboardingPrompt],
      defaultChannelIds: Seq[GuildChannelId],
      enabled: Boolean,
      mode: GuildOnboarding.OnboardingMode
  ): GuildOnboarding = makeRawFromFields(
    "guild_id"            := guildId,
    "prompts"             := prompts,
    "default_channel_ids" := defaultChannelIds,
    "enabled"             := enabled,
    "mode"                := mode
  )

  class OnboardingPrompt(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** ID of the prompt */
    @inline def id: Snowflake[OnboardingPrompt] = selectDynamic[Snowflake[OnboardingPrompt]]("id")

    /** Type of prompt */
    @inline def tpe: GuildOnboarding.PromptType = selectDynamic[GuildOnboarding.PromptType]("type")

    /** Options available within the prompt */
    @inline def options: Seq[GuildOnboarding.PromptOption] = selectDynamic[Seq[GuildOnboarding.PromptOption]]("options")

    /** Title of the prompt */
    @inline def title: String = selectDynamic[String]("title")

    /**
      * Indicates whether users are limited to selecting one option for the
      * prompt
      */
    @inline def singleSelect: Boolean = selectDynamic[Boolean]("single_select")

    /**
      * Indicates whether the prompt is required before a user completes the
      * onboarding flow
      */
    @inline def required: Boolean = selectDynamic[Boolean]("required")

    /**
      * Indicates whether the prompt is present in the onboarding flow. If
      * false, the prompt will only appear in the Channels & Roles tab
      */
    @inline def inOnboarding: Boolean = selectDynamic[Boolean]("in_onboarding")

    override def values: Seq[() => Any] =
      Seq(() => id, () => tpe, () => options, () => title, () => singleSelect, () => required, () => inOnboarding)
  }
  object OnboardingPrompt extends DiscordObjectCompanion[OnboardingPrompt] {
    def makeRaw(json: Json, cache: Map[String, Any]): OnboardingPrompt = new OnboardingPrompt(json, cache)

    /**
      * @param id
      *   ID of the prompt
      * @param tpe
      *   Type of prompt
      * @param options
      *   Options available within the prompt
      * @param title
      *   Title of the prompt
      * @param singleSelect
      *   Indicates whether users are limited to selecting one option for the
      *   prompt
      * @param required
      *   Indicates whether the prompt is required before a user completes the
      *   onboarding flow
      * @param inOnboarding
      *   Indicates whether the prompt is present in the onboarding flow. If
      *   false, the prompt will only appear in the Channels & Roles tab
      */
    def make20(
        id: Snowflake[OnboardingPrompt],
        tpe: GuildOnboarding.PromptType,
        options: Seq[GuildOnboarding.PromptOption],
        title: String,
        singleSelect: Boolean,
        required: Boolean,
        inOnboarding: Boolean
    ): OnboardingPrompt = makeRawFromFields(
      "id"            := id,
      "type"          := tpe,
      "options"       := options,
      "title"         := title,
      "single_select" := singleSelect,
      "required"      := required,
      "in_onboarding" := inOnboarding
    )

  }

  class PromptOption(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** ID of the prompt option */
    @inline def id: Snowflake[PromptOption] = selectDynamic[Snowflake[PromptOption]]("id")

    /** IDs for channels a member is added to when the option is selected */
    @inline def channelIds: Seq[GuildChannelId] = selectDynamic[Seq[GuildChannelId]]("channel_ids")

    /** IDs for roles assigned to a member when the option is selected */
    @inline def roleIds: Seq[RoleId] = selectDynamic[Seq[RoleId]]("role_ids")

    /** Emoji of the option */
    @inline def emoji: Emoji = selectDynamic[Emoji]("emoji")

    /** Title of the option */
    @inline def title: String = selectDynamic[String]("title")

    /** Description of the option */
    @inline def description: Option[String] = selectDynamic[Option[String]]("description")

    override def values: Seq[() => Any] =
      Seq(() => id, () => channelIds, () => roleIds, () => emoji, () => title, () => description)
  }
  object PromptOption extends DiscordObjectCompanion[PromptOption] {
    def makeRaw(json: Json, cache: Map[String, Any]): PromptOption = new PromptOption(json, cache)

    /**
      * @param id
      *   ID of the prompt option
      * @param channelIds
      *   IDs for channels a member is added to when the option is selected
      * @param roleIds
      *   IDs for roles assigned to a member when the option is selected
      * @param emoji
      *   Emoji of the option
      * @param title
      *   Title of the option
      * @param description
      *   Description of the option
      */
    def make20(
        id: Snowflake[PromptOption],
        channelIds: Seq[GuildChannelId],
        roleIds: Seq[RoleId],
        emoji: Emoji,
        title: String,
        description: Option[String]
    ): PromptOption = makeRawFromFields(
      "id"          := id,
      "channel_ids" := channelIds,
      "role_ids"    := roleIds,
      "emoji"       := emoji,
      "title"       := title,
      "description" := description
    )

  }

  /**
    * Defines the criteria used to satisfy Onboarding constraints that are
    * required for enabling.
    */
  sealed case class OnboardingMode private (value: Int) extends DiscordEnum[Int]
  object OnboardingMode                                 extends DiscordEnumCompanion[Int, OnboardingMode] {

    /** Counts only Default Channels towards constraints */
    val ONBOARDING_DEFAULT: OnboardingMode = OnboardingMode(0)

    /** Counts Default Channels and Questions towards constraints */
    val ONBOARDING_ADVANCED: OnboardingMode = OnboardingMode(1)

    def unknown(value: Int): OnboardingMode = new OnboardingMode(value)

    def values: Seq[OnboardingMode] = Seq(ONBOARDING_DEFAULT, ONBOARDING_ADVANCED)

  }

  sealed case class PromptType private (value: Int) extends DiscordEnum[Int]
  object PromptType extends DiscordEnumCompanion[Int, PromptType] {

    val MULTIPLE_CHOICE: PromptType = PromptType(0)
    val DROPDOWN: PromptType        = PromptType(1)

    def unknown(value: Int): PromptType = new PromptType(value)

    def values: Seq[PromptType] = Seq(MULTIPLE_CHOICE, DROPDOWN)

  }
}
