//noinspection ScalaWeakerAccess, ScalaUnusedSymbol
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/invite.yaml

import java.time.OffsetDateTime

import ackcord.data.base._
import io.circe.Json

/**
  * Represents a code that when used, adds a user to a guild or group DM
  * channel.
  */
class Invite(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The invite code (unique ID) */
  @inline def code: String = selectDynamic[String]("code")

  /** The guild this invite is for */
  @inline def guild: UndefOr[Invite.InviteGuild] = selectDynamic[UndefOr[Invite.InviteGuild]]("guild")

  /** The channel this invite is for */
  @inline def channel: Option[Invite.InviteChannel] = selectDynamic[Option[Invite.InviteChannel]]("channel")

  /** The user who created the invite */
  @inline def inviter: UndefOr[User] = selectDynamic[UndefOr[User]]("inviter")

  /** The type of target for this voice channel invite */
  @inline def targetType: UndefOr[Invite.InviteTargetType] =
    selectDynamic[UndefOr[Invite.InviteTargetType]]("target_type")

  /** The user whose stream to display for this voice channel stream invite */
  @inline def targetUser: UndefOr[User] = selectDynamic[UndefOr[User]]("target_user")

  /**
    * The embedded application to open for this voice channel embedded
    * application invite
    */
  @inline def targetApplication: UndefOr[Invite.InviteApplication] =
    selectDynamic[UndefOr[Invite.InviteApplication]]("target_application")

  /**
    * Approximate count of online members, returned from the GET /invites/<code>
    * endpoint when with_counts is true
    */
  @inline def approximatePresenceCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("approximate_presence_count")

  /**
    * Approximate count of total members, returned from the GET /invites/<code>
    * endpoint when with_counts is true
    */
  @inline def approximateMemberCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("approximate_member_count")

  /**
    * The expiration date of this invite, returned from the GET /invites/<code>
    * endpoint when with_expiration is true
    */
  @inline def expiresAt: JsonOption[OffsetDateTime] = selectDynamic[JsonOption[OffsetDateTime]]("expires_at")

  /**
    * Guild scheduled event data, only included if guild_scheduled_event_id
    * contains a valid guild scheduled event id
    */
  @inline def guildScheduledEvent: UndefOr[GuildScheduledEvent] =
    selectDynamic[UndefOr[GuildScheduledEvent]]("guild_scheduled_event")

  override def values: Seq[() => Any] = Seq(
    () => code,
    () => guild,
    () => channel,
    () => inviter,
    () => targetType,
    () => targetUser,
    () => targetApplication,
    () => approximatePresenceCount,
    () => approximateMemberCount,
    () => expiresAt,
    () => guildScheduledEvent
  )
}
object Invite extends DiscordObjectCompanion[Invite] {
  def makeRaw(json: Json, cache: Map[String, Any]): Invite = new Invite(json, cache)

  /**
    * @param code
    *   The invite code (unique ID)
    * @param guild
    *   The guild this invite is for
    * @param channel
    *   The channel this invite is for
    * @param inviter
    *   The user who created the invite
    * @param targetType
    *   The type of target for this voice channel invite
    * @param targetUser
    *   The user whose stream to display for this voice channel stream invite
    * @param targetApplication
    *   The embedded application to open for this voice channel embedded
    *   application invite
    * @param approximatePresenceCount
    *   Approximate count of online members, returned from the GET
    *   /invites/<code> endpoint when with_counts is true
    * @param approximateMemberCount
    *   Approximate count of total members, returned from the GET
    *   /invites/<code> endpoint when with_counts is true
    * @param expiresAt
    *   The expiration date of this invite, returned from the GET
    *   /invites/<code> endpoint when with_expiration is true
    * @param guildScheduledEvent
    *   Guild scheduled event data, only included if guild_scheduled_event_id
    *   contains a valid guild scheduled event id
    */
  def make20(
      code: String,
      guild: UndefOr[Invite.InviteGuild],
      channel: Option[Invite.InviteChannel],
      inviter: UndefOr[User],
      targetType: UndefOr[Invite.InviteTargetType],
      targetUser: UndefOr[User],
      targetApplication: UndefOr[Invite.InviteApplication],
      approximatePresenceCount: UndefOr[Int],
      approximateMemberCount: UndefOr[Int],
      expiresAt: JsonOption[OffsetDateTime],
      guildScheduledEvent: UndefOr[GuildScheduledEvent]
  ): Invite = makeRawFromFields(
    "code"                        := code,
    "guild"                      :=? guild,
    "channel"                     := channel,
    "inviter"                    :=? inviter,
    "target_type"                :=? targetType,
    "target_user"                :=? targetUser,
    "target_application"         :=? targetApplication,
    "approximate_presence_count" :=? approximatePresenceCount,
    "approximate_member_count"   :=? approximateMemberCount,
    "expires_at"                 :=? expiresAt,
    "guild_scheduled_event"      :=? guildScheduledEvent
  )

  sealed case class InviteTargetType private (value: Int) extends DiscordEnum[Int]
  object InviteTargetType extends DiscordEnumCompanion[Int, InviteTargetType] {

    val STREAM: InviteTargetType               = InviteTargetType(1)
    val EMBEDDED_APPLICATION: InviteTargetType = InviteTargetType(2)

    def unknown(value: Int): InviteTargetType = new InviteTargetType(value)

    def values: Seq[InviteTargetType] = Seq(STREAM, EMBEDDED_APPLICATION)

  }

  class InviteGuild(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
    @inline def id: GuildId = selectDynamic[GuildId]("id")

    @inline def name: String = selectDynamic[String]("name")

    @inline def splash: Option[ImageHash] = selectDynamic[Option[ImageHash]]("splash")

    @inline def banner: Option[ImageHash] = selectDynamic[Option[ImageHash]]("banner")

    @inline def description: String = selectDynamic[String]("description")

    @inline def icon: Option[ImageHash] = selectDynamic[Option[ImageHash]]("icon")

    @inline def features: Seq[Guild.GuildFeature] = selectDynamic[Seq[Guild.GuildFeature]]("features")

    @inline def verificationLevel: Guild.VerificationLevel =
      selectDynamic[Guild.VerificationLevel]("verification_level")

    @inline def vanityUrlCode: Option[String] = selectDynamic[Option[String]]("vanity_url_code")

    @inline def nsfwLevel: Guild.ExplicitContentFilterLevel =
      selectDynamic[Guild.ExplicitContentFilterLevel]("nsfw_level")

    @inline def premiumSubscriptionCount: Int = selectDynamic[Int]("premium_subscription_count")

    override def values: Seq[() => Any] = Seq(
      () => id,
      () => name,
      () => splash,
      () => banner,
      () => description,
      () => icon,
      () => features,
      () => verificationLevel,
      () => vanityUrlCode,
      () => nsfwLevel,
      () => premiumSubscriptionCount
    )
  }
  object InviteGuild extends DiscordObjectCompanion[InviteGuild] {
    def makeRaw(json: Json, cache: Map[String, Any]): InviteGuild = new InviteGuild(json, cache)

    def make20(
        id: GuildId,
        name: String,
        splash: Option[ImageHash],
        banner: Option[ImageHash],
        description: String,
        icon: Option[ImageHash],
        features: Seq[Guild.GuildFeature],
        verificationLevel: Guild.VerificationLevel,
        vanityUrlCode: Option[String],
        nsfwLevel: Guild.ExplicitContentFilterLevel,
        premiumSubscriptionCount: Int
    ): InviteGuild = makeRawFromFields(
      "id"                         := id,
      "name"                       := name,
      "splash"                     := splash,
      "banner"                     := banner,
      "description"                := description,
      "icon"                       := icon,
      "features"                   := features,
      "verification_level"         := verificationLevel,
      "vanity_url_code"            := vanityUrlCode,
      "nsfw_level"                 := nsfwLevel,
      "premium_subscription_count" := premiumSubscriptionCount
    )

  }

  class InviteChannel(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
    @inline def id: GuildChannelId = selectDynamic[GuildChannelId]("id")

    @inline def name: String = selectDynamic[String]("name")

    @inline def tpe: Channel.ChannelType = selectDynamic[Channel.ChannelType]("type")

    override def values: Seq[() => Any] = Seq(() => id, () => name, () => tpe)
  }
  object InviteChannel extends DiscordObjectCompanion[InviteChannel] {
    def makeRaw(json: Json, cache: Map[String, Any]): InviteChannel = new InviteChannel(json, cache)

    def make20(id: GuildChannelId, name: String, tpe: Channel.ChannelType): InviteChannel =
      makeRawFromFields("id" := id, "name" := name, "type" := tpe)

  }

  class InviteApplication(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    override def values: Seq[() => Any] = Seq()
  }
  object InviteApplication extends DiscordObjectCompanion[InviteApplication] {
    def makeRaw(json: Json, cache: Map[String, Any]): InviteApplication = new InviteApplication(json, cache)

    def make20(): InviteApplication = makeRawFromFields()

  }
}

/** Extra information about an invite, will extend the invite object. */
class InviteMetadata(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Rest of the invite object */
  @inline def invite: Invite = Invite.makeRaw(json, extensionCache("invite"))

  /** Number of times this invite has been used */
  @inline def uses: Int = selectDynamic[Int]("uses")

  /** Max number of times this invite can be used */
  @inline def maxUses: Int = selectDynamic[Int]("max_uses")

  /** Duration (in seconds) after which the invite expires */
  @inline def maxAge: Int = selectDynamic[Int]("max_age")

  /** Whether this invite only grants temporary membership */
  @inline def temporary: Boolean = selectDynamic[Boolean]("temporary")

  /** When this invite was created */
  @inline def createdAt: OffsetDateTime = selectDynamic[OffsetDateTime]("created_at")

  override def values: Seq[() => Any] =
    Seq(() => invite, () => uses, () => maxUses, () => maxAge, () => temporary, () => createdAt)
}
object InviteMetadata extends DiscordObjectCompanion[InviteMetadata] {
  def makeRaw(json: Json, cache: Map[String, Any]): InviteMetadata = new InviteMetadata(json, cache)

  /**
    * @param invite
    *   Rest of the invite object
    * @param uses
    *   Number of times this invite has been used
    * @param maxUses
    *   Max number of times this invite can be used
    * @param maxAge
    *   Duration (in seconds) after which the invite expires
    * @param temporary
    *   Whether this invite only grants temporary membership
    * @param createdAt
    *   When this invite was created
    */
  def make20(
      invite: Invite,
      uses: Int,
      maxUses: Int,
      maxAge: Int,
      temporary: Boolean,
      createdAt: OffsetDateTime
  ): InviteMetadata = makeRawFromFields(
    DiscordObjectFrom.FromExtension("invite", invite),
    "uses"       := uses,
    "max_uses"   := maxUses,
    "max_age"    := maxAge,
    "temporary"  := temporary,
    "created_at" := createdAt
  )

}
