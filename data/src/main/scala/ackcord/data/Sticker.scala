//noinspection ScalaWeakerAccess, ScalaUnusedSymbol
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/Sticker.yaml

import ackcord.data.base._
import io.circe.Json

/** Represents a sticker that can be sent in messages. */
class Sticker(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** Id of the sticker */
  @inline def id: Snowflake[Sticker] = selectDynamic[Snowflake[Sticker]]("id")

  /** For standard stickers, id of the pack the sticker is from */
  @inline def packId: UndefOr[Snowflake[Sticker.StickerPack]] =
    selectDynamic[UndefOr[Snowflake[Sticker.StickerPack]]]("pack_id")

  /** Name of the sticker */
  @inline def name: String = selectDynamic[String]("name")

  /** Description of the sticker */
  @inline def description: Option[String] = selectDynamic[Option[String]]("description")

  /** Autocomplete/suggestion tags for the sticker (max 200 characters) */
  @inline def tags: String = selectDynamic[String]("tags")

  /** Type of sticker */
  @inline def tpe: Sticker.StickerType = selectDynamic[Sticker.StickerType]("type")

  /** Type of sticker format */
  @inline def formatType: Sticker.StickerFormatType = selectDynamic[Sticker.StickerFormatType]("format_type")

  /**
    * Whether this guild sticker can be used, may be false due to loss of Server
    * Boosts
    */
  @inline def available: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("available")

  /** Id of the guild that owns this sticker */
  @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")

  /** The user that uploaded the guild sticker */
  @inline def user: UndefOr[User] = selectDynamic[UndefOr[User]]("user")

  /** The standard sticker's sort order within its pack */
  @inline def sortValue: UndefOr[Int] = selectDynamic[UndefOr[Int]]("sort_value")

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => packId,
    () => name,
    () => description,
    () => tags,
    () => tpe,
    () => formatType,
    () => available,
    () => guildId,
    () => user,
    () => sortValue
  )
}
object Sticker extends DiscordObjectCompanion[Sticker] {
  def makeRaw(json: Json, cache: Map[String, Any]): Sticker = new Sticker(json, cache)

  /**
    * @param id
    *   Id of the sticker
    * @param packId
    *   For standard stickers, id of the pack the sticker is from
    * @param name
    *   Name of the sticker
    * @param description
    *   Description of the sticker
    * @param tags
    *   Autocomplete/suggestion tags for the sticker (max 200 characters)
    * @param tpe
    *   Type of sticker
    * @param formatType
    *   Type of sticker format
    * @param available
    *   Whether this guild sticker can be used, may be false due to loss of
    *   Server Boosts
    * @param guildId
    *   Id of the guild that owns this sticker
    * @param user
    *   The user that uploaded the guild sticker
    * @param sortValue
    *   The standard sticker's sort order within its pack
    */
  def make20(
      id: Snowflake[Sticker],
      packId: UndefOr[Snowflake[Sticker.StickerPack]],
      name: String,
      description: Option[String],
      tags: String,
      tpe: Sticker.StickerType,
      formatType: Sticker.StickerFormatType,
      available: UndefOr[Boolean],
      guildId: UndefOr[GuildId],
      user: UndefOr[User],
      sortValue: UndefOr[Int]
  ): Sticker = makeRawFromFields(
    "id"          := id,
    "pack_id"    :=? packId,
    "name"        := name,
    "description" := description,
    "tags"        := tags,
    "type"        := tpe,
    "format_type" := formatType,
    "available"  :=? available,
    "guild_id"   :=? guildId,
    "user"       :=? user,
    "sort_value" :=? sortValue
  )

  sealed case class StickerType private (value: Int) extends DiscordEnum[Int]
  object StickerType                                 extends DiscordEnumCompanion[Int, StickerType] {

    /**
      * An official sticker in a pack, part of Nitro or in a removed purchasable
      * pack
      */
    val STANDARD: StickerType = StickerType(1)

    /** A sticker uploaded to a guild for the guild's members */
    val GUILD: StickerType = StickerType(2)

    def unknown(value: Int): StickerType = new StickerType(value)

    def values: Seq[StickerType] = Seq(STANDARD, GUILD)

  }

  sealed case class StickerFormatType private (value: Int) extends DiscordEnum[Int]
  object StickerFormatType extends DiscordEnumCompanion[Int, StickerFormatType] {

    val PNG: StickerFormatType    = StickerFormatType(1)
    val APNG: StickerFormatType   = StickerFormatType(2)
    val LOTTIE: StickerFormatType = StickerFormatType(3)
    val GIF: StickerFormatType    = StickerFormatType(4)

    def unknown(value: Int): StickerFormatType = new StickerFormatType(value)

    def values: Seq[StickerFormatType] = Seq(PNG, APNG, LOTTIE, GIF)

  }

  /**
    * The smallest amount of data required to render a sticker. A partial
    * sticker object.
    */
  class StickerItem(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Id of the sticker */
    @inline def id: RawSnowflake = selectDynamic[RawSnowflake]("id")

    /** Name of the sticker */
    @inline def name: String = selectDynamic[String]("name")

    /** Type of sticker format */
    @inline def formatType: Sticker.StickerFormatType = selectDynamic[Sticker.StickerFormatType]("format_type")

    override def values: Seq[() => Any] = Seq(() => id, () => name, () => formatType)
  }
  object StickerItem extends DiscordObjectCompanion[StickerItem] {
    def makeRaw(json: Json, cache: Map[String, Any]): StickerItem = new StickerItem(json, cache)

    /**
      * @param id
      *   Id of the sticker
      * @param name
      *   Name of the sticker
      * @param formatType
      *   Type of sticker format
      */
    def make20(id: RawSnowflake, name: String, formatType: Sticker.StickerFormatType): StickerItem =
      makeRawFromFields("id" := id, "name" := name, "format_type" := formatType)

  }

  /** Represents a pack of standard stickers. */
  class StickerPack(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Id of the sticker pack */
    @inline def id: RawSnowflake = selectDynamic[RawSnowflake]("id")

    /** The stickers in the pack */
    @inline def stickers: Seq[Sticker] = selectDynamic[Seq[Sticker]]("stickers")

    /** Name of the sticker pack */
    @inline def name: String = selectDynamic[String]("name")

    /** Id of the pack's SKU */
    @inline def skuId: RawSnowflake = selectDynamic[RawSnowflake]("sku_id")

    /** Id of a sticker in the pack which is shown as the pack's icon */
    @inline def coverStickerId: UndefOr[Snowflake[Sticker]] =
      selectDynamic[UndefOr[Snowflake[Sticker]]]("cover_sticker_id")

    /** Description of the sticker pack */
    @inline def description: String = selectDynamic[String]("description")

    /** Id of the sticker pack's banner image */
    @inline def bannerAssetId: UndefOr[RawSnowflake] = selectDynamic[UndefOr[RawSnowflake]]("banner_asset_id")

    override def values: Seq[() => Any] = Seq(
      () => id,
      () => stickers,
      () => name,
      () => skuId,
      () => coverStickerId,
      () => description,
      () => bannerAssetId
    )
  }
  object StickerPack extends DiscordObjectCompanion[StickerPack] {
    def makeRaw(json: Json, cache: Map[String, Any]): StickerPack = new StickerPack(json, cache)

    /**
      * @param id
      *   Id of the sticker pack
      * @param stickers
      *   The stickers in the pack
      * @param name
      *   Name of the sticker pack
      * @param skuId
      *   Id of the pack's SKU
      * @param coverStickerId
      *   Id of a sticker in the pack which is shown as the pack's icon
      * @param description
      *   Description of the sticker pack
      * @param bannerAssetId
      *   Id of the sticker pack's banner image
      */
    def make20(
        id: RawSnowflake,
        stickers: Seq[Sticker],
        name: String,
        skuId: RawSnowflake,
        coverStickerId: UndefOr[Snowflake[Sticker]],
        description: String,
        bannerAssetId: UndefOr[RawSnowflake]
    ): StickerPack = makeRawFromFields(
      "id"                := id,
      "stickers"          := stickers,
      "name"              := name,
      "sku_id"            := skuId,
      "cover_sticker_id" :=? coverStickerId,
      "description"       := description,
      "banner_asset_id"  :=? bannerAssetId
    )

  }
}
