//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/StageInstance.yaml

import ackcord.data.base._
import io.circe.Json

class StageInstance(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The id of this Stage instance */
  @inline def id: Snowflake[StageInstance] = selectDynamic[Snowflake[StageInstance]]("id")

  /** The guild id of the associated Stage channel */
  @inline def guildId: GuildId = selectDynamic[GuildId]("guild_id")

  /** The id of the associated Stage channel */
  @inline def channelId: StageChannelId = selectDynamic[StageChannelId]("channel_id")

  /** The topic of the Stage instance (1-120 characters) */
  @inline def topic: String = selectDynamic[String]("topic")

  /** The privacy level of the Stage instance */
  @inline def privacyLevel: StageInstance.StagePrivacyLevel =
    selectDynamic[StageInstance.StagePrivacyLevel]("privacy_level")

  /** The id of the scheduled event for this Stage instance */
  @inline def guildScheduledEventId: Option[Snowflake[GuildScheduledEvent]] =
    selectDynamic[Option[Snowflake[GuildScheduledEvent]]]("guild_scheduled_event_id")

  override def values: Seq[() => Any] =
    Seq(() => id, () => guildId, () => channelId, () => topic, () => privacyLevel, () => guildScheduledEventId)
}
object StageInstance extends DiscordObjectCompanion[StageInstance] {
  def makeRaw(json: Json, cache: Map[String, Any]): StageInstance = new StageInstance(json, cache)

  /**
    * @param id
    *   The id of this Stage instance
    * @param guildId
    *   The guild id of the associated Stage channel
    * @param channelId
    *   The id of the associated Stage channel
    * @param topic
    *   The topic of the Stage instance (1-120 characters)
    * @param privacyLevel
    *   The privacy level of the Stage instance
    * @param guildScheduledEventId
    *   The id of the scheduled event for this Stage instance
    */
  def make20(
      id: Snowflake[StageInstance],
      guildId: GuildId,
      channelId: StageChannelId,
      topic: String,
      privacyLevel: StageInstance.StagePrivacyLevel,
      guildScheduledEventId: Option[Snowflake[GuildScheduledEvent]]
  ): StageInstance = makeRawFromFields(
    "id"                       := id,
    "guild_id"                 := guildId,
    "channel_id"               := channelId,
    "topic"                    := topic,
    "privacy_level"            := privacyLevel,
    "guild_scheduled_event_id" := guildScheduledEventId
  )

  sealed case class StagePrivacyLevel private (value: Int) extends DiscordEnum[Int]
  object StagePrivacyLevel                                 extends DiscordEnumCompanion[Int, StagePrivacyLevel] {

    /** The Stage instance is visible to only guild members. */
    val GUILD_ONLY: StagePrivacyLevel = StagePrivacyLevel(2)

    def unknown(value: Int): StagePrivacyLevel = new StagePrivacyLevel(value)

    def values: Seq[StagePrivacyLevel] = Seq(GUILD_ONLY)

  }
}
