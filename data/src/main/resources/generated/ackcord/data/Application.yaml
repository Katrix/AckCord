defType: Class
name: Application

documentation:
  A Discord application

fields:
  2.0.x:
    id:
      type: ApplicationId
      documentation: The id of the app

    name:
      type: String
      documentation: The name of the app

    icon:
      type: ImageHash
      withNull: true
      documentation: The icon hash of the app

    description:
      type: String
      documentation: The description of the app

    rpc_origins:
      type: Seq[String]
      withUndefined: true
      documentation: An array of rpc origin urls, if rpc is enabled

    bot_public:
      type: Boolean
      documentation: When false only app owner can join the app's bot to guilds

    bot_require_code_grant:
      type: Boolean
      documentation: When true the app's bot will only join upon completion of the full oauth2 code grant flow

    terms_of_service_url:
      type: String
      withUndefined: true
      documentation: The url of the app's terms of service

    privacy_policy_url:
      type: String
      withUndefined: true
      documentation: The url of the app's privacy policy

    owner:
      type: Application.ApplicationOwner
      withUndefined: true
      documentation: Partial user object containing info on the owner of the application

    verify_key:
      type: String
      documentation: The hex encoded key for verification in interactions and the GameSDK's GetTicket

    team:
      type: Application.Team
      withNull: true
      documentation: If the application belongs to a team, this will be a list of the members of that team

    guild_id:
      type: GuildId
      withUndefined: true
      documentation: Guild associated with the app. For example, a developer support server.

    guild:
      type: Application.ApplicationGuild
      withUndefined: true
      documentation: A partial object of the associated guild

    primary_sku_id:
      type: RawSnowflake
      withUndefined: true
      documentation: If this application is a game sold on Discord, this field will be the id of the "Game SKU" that is created, if exists

    slug:
      type: String
      withUndefined: true
      documentation: If this application is a game sold on Discord, this field will be the URL slug that links to the store page

    cover_image:
      type: ImageHash
      withUndefined: true
      documentation: The application's default rich presence invite cover image hash

    flags:
      type: Application.Flags
      withUndefined: true
      documentation: The application's public flags

    approximate_guild_count:
      type: Int
      withUndefined: true
      documentation: An approximate count of the app's guild membership

    tags:
      type: Seq[String]
      withUndefined: true
      documentation: Up to 5 tags describing the content and functionality of the application
      verification:
        max_length: 5

    install_params:
      type: Application.InstallParams
      withUndefined: true
      documentation: Settings for the application's default in-app authorization link, if enabled

    custom_install_url:
      type: String
      withUndefined: true
      documentation: The application's default custom authorization link, if enabled

    role_connections_verification_url:
      type: String
      withUndefined: true
      documentation: The application's role connection verification entry point, which when configured will render the app as a verification method in the guild role verification configuration

innerTypes:
  - defType: Enum
    type: Int
    isBitfield: true
    name: Flags

    values:
      GATEWAY_PRESENCE: "1 << 12"
      GATEWAY_PRESENCE_LIMITED: "1 << 13"
      GATEWAY_GUILD_MEMBERS: "1 << 14"
      GATEWAY_GUILD_MEMBERS_LIMITED: "1 << 15"
      VERIFICATION_PENDING_GUILD_LIMIT: "1 << 16"
      EMBEDDED: "1 << 17"
      GATEWAY_MESSAGE_CONTENT: "1 << 18"
      GATEWAY_MESSAGE_CONTENT_LIMITED: "1 << 19"
      APPLICATION_COMMAND_BADGE: "1 << 23"

  - name: ApplicationGuild
    defType: Class
    fields:
      2.0.x: {}

  - defType: Class
    name: InstallParams

    fields:
      2.0.x:
        scopes: Seq[String]

        permissions: Permissions

  - defType: Class
    name: ApplicationOwner

    fields:
      2.0.x:
        avatar:
          type: String
          withNull: true

        discriminator: String

        flags: Int

        id: UserId

        username: String

  - name: Team
    defType: Class
    fields:
      2.0.x:
        icon:
          type: ImageHash
          documentation: A hash of the image of the team's icon

        id:
          type: Snowflake[Team]
          documentation: The unique id of the team

        members:
          type: Seq[Team.TeamMember]
          documentation: The members of the team

        name:
          type: String
          documentation: The name of the team

        owner_user_id:
          type: UserId
          documentation: The user id of the current team owner

    innerTypes:
      - name: TeamMember
        defType: Class
        fields:
          2.0.x:
            membership_state:
              type: Team.TeamMembershipState
              documentation: The user's membership state on the team

            permissions:
              type: Seq[String]
              documentation: Will always be ["*"]

            team_id:
              type: Snowflake[Team]
              documentation: the id of the parent team of which they are a member

            user:
              type: Team.TeamUser
              documentation: The avatar, discriminator, id, and username of the user

      - name: TeamMembershipState
        defType: Enum
        type: Int
        values:
          INVITED: "1"
          ACCEPTED: "2"

      - name: TeamUser
        defType: Class
        fields:
          2.0.x:
            id: UserId
            username: String
            avatar:
              type: ImageHash
              withNull: true
            discriminator: String
