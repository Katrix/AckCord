defType: Class
name: Application

documentation:
  A Discord application

fields:
  2.0.x:
    id:
      type: ApplicationId
      documentation: ID of the app

    name:
      type: String
      documentation: Name of the app

    icon:
      type: ImageHash
      withNull: true
      documentation: Icon hash of the app

    description:
      type: String
      documentation: Description of the app

    rpc_origins:
      type: Seq[String]
      withUndefined: true
      documentation: List of RPC origin URLs, if RPC is enabled

    bot_public:
      type: Boolean
      documentation: When false only the app owner can add the app to guilds

    bot_require_code_grant:
      type: Boolean
      documentation: When true the app's bot will only join upon completion of the full OAuth2 code grant flow

    bot:
      type: User.Partial
      documentation: Partial user object for the bot user associated with the app

    terms_of_service_url:
      type: String
      withUndefined: true
      documentation: URL of the app's Terms of Service

    privacy_policy_url:
      type: String
      withUndefined: true
      documentation: URL of the app's Privacy Policy

    owner:
      type: Application.ApplicationOwner
      withUndefined: true
      documentation: Partial user object for the owner of the app

    verify_key:
      type: String
      documentation: Hex encoded key for verification in interactions and the GameSDK's GetTicket

    team:
      type: Application.Team
      withNull: true
      documentation: If the app belongs to a team, this will be a list of the members of that team

    guild_id:
      type: GuildId
      withUndefined: true
      documentation: Guild associated with the app. For example, a developer support server.

    guild:
      type: Application.ApplicationGuild
      withUndefined: true
      documentation: Partial object of the associated guild

    primary_sku_id:
      type: RawSnowflake
      withUndefined: true
      documentation: If this app is a game sold on Discord, this field will be the id of the "Game SKU" that is created, if exists

    slug:
      type: String
      withUndefined: true
      documentation: If this app is a game sold on Discord, this field will be the URL slug that links to the store page

    cover_image:
      type: ImageHash
      withUndefined: true
      documentation: App's default rich presence invite cover image hash

    flags:
      type: Application.Flags
      withUndefined: true
      documentation: App's public flags

    approximate_guild_count:
      type: Int
      withUndefined: true
      documentation: Approximate count of guilds the app has been added to

    redirect_uris:
      type: Seq[String]
      withUndefined: true
      documentation: Array of redirect URIs for the app

    interactions_endpoint_url:
      type: String
      withUndefined: true
      documentation: Interactions endpoint URL for the app

    role_connections_verification_url:
      type: String
      withUndefined: true
      documentation: Role connection verification URL for the app

    tags:
      type: Seq[String]
      withUndefined: true
      documentation: List of tags describing the content and functionality of the app. Max of 5 tags.
      verification:
        max_length: 5

    install_params:
      type: Application.InstallParams
      withUndefined: true
      documentation: Settings for the app's default in-app authorization link, if enabled

    custom_install_url:
      type: String
      withUndefined: true
      documentation: Default custom authorization URL for the app, if enabled

innerTypes:
  - defType: Enum
    type: Int
    isBitfield: true
    name: Flags

    values:
      GATEWAY_PRESENCE: "1 << 12"
      GATEWAY_PRESENCE_LIMITED: "1 << 13"
      GATEWAY_GUILD_MEMBERS: "1 << 14"
      GATEWAY_GUILD_MEMBERS_LIMITED: "1 << 15"
      VERIFICATION_PENDING_GUILD_LIMIT: "1 << 16"
      EMBEDDED: "1 << 17"
      GATEWAY_MESSAGE_CONTENT: "1 << 18"
      GATEWAY_MESSAGE_CONTENT_LIMITED: "1 << 19"
      APPLICATION_COMMAND_BADGE: "1 << 23"

  - name: ApplicationGuild
    defType: Class
    fields:
      2.0.x: {}

  - defType: Class
    name: InstallParams

    fields:
      2.0.x:
        scopes:
          type: Seq[String]
          documentation: Scopes to add the application to the server with

        permissions:
          type: Permissions
          documentation: Permissions to request for the bot role

  - defType: Class
    name: ApplicationOwner

    fields:
      2.0.x:
        avatar:
          type: String
          withNull: true

        discriminator: String

        flags: Int

        id: UserId

        username: String

  - name: Team
    defType: Class
    fields:
      2.0.x:
        icon:
          type: ImageHash
          documentation: Hash of the image of the team's icon

        id:
          type: Snowflake[Team]
          documentation: Unique ID of the team

        members:
          type: Seq[Team.TeamMember]
          documentation: Members of the team

        name:
          type: String
          documentation: Name of the team

        owner_user_id:
          type: UserId
          documentation: User ID of the current team owner

    innerTypes:
      - name: TeamMember
        defType: Class
        fields:
          2.0.x:
            membership_state:
              type: Team.TeamMembershipState
              documentation: User's membership state on the team

            team_id:
              type: Snowflake[Team]
              documentation: ID of the parent team of which they are a member

            user:
              type: Team.TeamUser
              documentation: Avatar, discriminator, ID, and username of the user

            role:
              type: TeamMemberRole
              documentation: Role of the team member

      - name: TeamMemberRole
        defType: Enum
        type: String
        values:
          Owner:
            value: owner
            documentation: >-
              Owners are the most permissiable role, and can take destructive, 
              irreversible actions like deleting team-owned apps or the team itself. 
              Teams are limited to 1 owner.

          Admin:
            value: admin
            documentation: >-
              Admins have similar access as owners, except they cannot take 
              destructive actions on the team or team-owned apps.
          
          Developer:
            value: developer
            documentation: >-
              Developers can access information about team-owned apps, like the 
              client secret or public key. They can also take limited actions on 
              team-owned apps, like configuring interaction endpoints or resetting 
              the bot token. Members with the Developer role cannot manage the 
              team or its members, or take destructive actions on team-owned apps.

          ReadOnly:
            value: read_only
            documentation: >-
              Read-only members can access information about a team and any 
              team-owned apps. Some examples include getting the IDs of 
              applications and exporting payout records.

      - name: TeamMembershipState
        defType: Enum
        type: Int
        values:
          INVITED: "1"
          ACCEPTED: "2"

      - name: TeamUser
        defType: Class
        fields:
          2.0.x:
            id: UserId
            username: String
            avatar:
              type: ImageHash
              withNull: true
            discriminator: String
