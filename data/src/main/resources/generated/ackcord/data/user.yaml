defType: Multiple
innerTypes:
  - defType: Freeform
    content: sealed trait UserOrRole

  - defType: Freeform
    content: |-
      sealed trait MessageAuthor extends DiscordObject
      
      object MessageAuthor extends DiscordObjectCompanion[MessageAuthor] {
        def makeRaw(json: Json, cache: Map[String, Any]): MessageAuthor =
          if (json.hcursor.get[String]("discriminator").isRight) User.makeRaw(json, cache)
          else WebhookAuthor.makeRaw(json, cache)
      }

  - name: Status
    defType: Enum
    type: String
    values:
      Online: online
      DoNotDisturb: dnd
      Idle: idle
      Invisible: invisible
      Offline: Offline

  - name: WebhookAuthor
    defType: Class
    extends: [ MessageAuthor ]
    fields:
      2.0.x:
        id: WebhookId
        username: String
        avatar:
          type: ImageHash
          withNull: true

  - name: User
    defType: Class
    extends: [ UserOrRole, MessageAuthor ]
    documentation: >-
      Users in Discord are generally considered the base entity. Users can spawn across the entire platform, be members of guilds, participate in text and voice chat, and much more. Users are separated by a distinction of "bot" vs "normal." Although they are similar, bot users are automated users that are "owned" by another user. Unlike normal users, bot users do not have a limitation on the number of Guilds they can be a part of.
    fields:
      2.0.x:
        id:
          type: UserId
          documentation: The user's id

        username:
          type: String
          documentation: The user's username, not unique across the platform

        discriminator:
          type: String
          documentation: The user's Discord-tag

        global_name:
          type: String
          withNull: true
          documentation: The user's display name, if it is set. For bots, this is the
            application name

        avatar:
          type: ImageHash
          withNull: true
          documentation: The user's avatar hash

        bot:
          type: Boolean
          withUndefined: true
          documentation: Whether the user belongs to an OAuth2 application

        system:
          type: Boolean
          withUndefined: true
          documentation: Whether the user is an Official Discord System user (part of the
            urgent message system)

        mfa_enabled:
          type: Boolean
          withUndefined: true
          documentation: Whether the user has two factor enabled on their account

        banner:
          type: ImageHash
          withUndefined: true
          withNull: true
          documentation: The user's banner hash

        accent_color:
          type: Int
          withUndefined: true
          withNull: true
          documentation: The user's banner color encoded as an integer representation of
            hexadecimal color code

        locale:
          type: String
          withUndefined: true
          documentation: The user's chosen language option

        verified:
          type: Boolean
          withUndefined: true
          documentation: Whether the email on this account has been verified

        email:
          type: String
          withUndefined: true
          withNull: true
          documentation: The user's email

        flags:
          type: User.UserFlags
          withUndefined: true
          documentation: The flags on a user's account

        premium_type:
          type: User.PremiumType
          withUndefined: true
          documentation: The type of Nitro subscription on a user's account

        public_flags:
          type: User.UserFlags
          withUndefined: true
          documentation: The public flags on a user's account

        avatar_decoration:
          type: ImageHash
          withUndefined: true
          withNull: true
          documentation: The user's avatar decoration hash

    innerTypes:
      - name: UserFlags
        defType: Enum
        type: Int
        isBitfield: true
        values:
          STAFF:
            value: "1 << 0"
            documentation: Discord Employee

          PARTNER:
            value: "1 << 1"
            documentation: Partnered Server Owner

          HYPESQUAD:
            value: "1 << 2"
            documentation: HypeSquad Events Member

          BUG_HUNTER_LEVEL_1:
            value: "1 << 3"
            documentation: Bug Hunter Level 1

          HYPESQUAD_ONLINE_HOUSE_1:
            value: "1 << 6"
            documentation: House Bravery Member

          HYPESQUAD_ONLINE_HOUSE_2:
            value: "1 << 7"
            documentation: House Brilliance Member

          HYPESQUAD_ONLINE_HOUSE_3:
            value: "1 << 8"
            documentation: House Balance Member

          PREMIUM_EARLY_SUPPORTER:
            value: "1 << 9"
            documentation: Early Nitro Supporter

          TEAM_PSEUDO_USER:
            value: "1 << 10"
            documentation: User is a team

          BUG_HUNTER_LEVEL_2:
            value: "1 << 14"
            documentation: Bug Hunter Level 2

          VERIFIED_BOT:
            value: "1 << 16"
            documentation: Verified Bot

          VERIFIED_DEVELOPER:
            value: "1 << 17"
            documentation: Early Verified Bot Developer

          CERTIFIED_MODERATOR:
            value: "1 << 18"
            documentation: Moderator Programs Alumni

          BOT_HTTP_INTERACTIONS:
            value: "1 << 19"
            documentation: Bot uses only HTTP interactions and is shown in the online member
              list

          ACTIVE_DEVELOPER:
            value: "1 << 22"
            documentation: User is an Active Developer

      - name: PremiumType
        defType: Enum
        type: Int
        documentation: Premium types denote the level of premium a user has. Visit the
          Nitro page to learn more about the premium plans we currently offer.
        values:
          None:
            value: "0"

          NitroClassic:
            value: "1"

          Nitro:
            value: "2"

          NitroBasic:
            value: "3"

  - name: Connection
    defType: Class
    documentation: The connection object that the user has attached.
    fields:
      2.0.x:
        id:
          type: String
          documentation: Id of the connection account

        name:
          type: String
          documentation: The username of the connection account

        tpe:
          jsonName: type
          type: Connection.ConnectionServiceType
          documentation: The service of this connection

        revoked:
          type: Boolean
          withUndefined: true
          documentation: Whether the connection is revoked

        integrations:
          type: Seq[Connection.ConnectionIntegration]
          withUndefined: true
          documentation: An array of partial server integrations

        verified:
          type: Boolean
          documentation: Whether the connection is verified

        friend_sync:
          type: Boolean
          documentation: Whether friend sync is enabled for this connection

        show_activity:
          type: Boolean
          documentation: Whether activities related to this connection will be shown in
            presence updates

        two_way_link:
          type: Boolean
          documentation: Whether this connection has a corresponding third party OAuth2 token

        visibility:
          type: Connection.ConnectionVisibility
          documentation: Visibility of this connection

    innerTypes:
      - name: ConnectionIntegration
        defType: Class
        fields:
          2.0.x: { }

      - name: ConnectionServiceType
        defType: Enum
        type: String
        values:
          Battlenet:
            value: "battlenet"
            documentation: Battle.net

          Ebay:
            value: "ebay"
            documentation: EBay

          Epicgames:
            value: "epicgames"
            documentation: Epic Games

          Facebook:
            value: "facebook"
            documentation: Facebook

          Github:
            value: "github"
            documentation: GitHub

          Instagram:
            value: "instagram"
            documentation: Instagram

          Leagueoflegends:
            value: "leagueoflegends"
            documentation: League of Legends

          Paypal:
            value: "paypal"
            documentation: PayPal

          Playstation:
            value: "playstation"
            documentation: PlayStation Network

          Reddit:
            value: "reddit"
            documentation: Reddit

          Riotgames:
            value: "riotgames"
            documentation: Riot Games

          Spotify:
            value: "spotify"
            documentation: Spotify

          Skype:
            value: "skype"
            documentation: Skype

          Steam:
            value: "steam"
            documentation: Steam

          Tiktok:
            value: "tiktok"
            documentation: TikTok

          Twitch:
            value: "twitch"
            documentation: Twitch

          Twitter:
            value: "twitter"
            documentation: Twitter

          Xbox:
            value: "xbox"
            documentation: Xbox

          Youtube:
            value: "youtube"
            documentation: YouTube

      - name: ConnectionVisibility
        defType: Enum
        type: Int
        values:
          None:
            value: "0"
            documentation: Invisible to everyone except the user themselves

          Everyone:
            value: "1"
            documentation: Visible to everyone

  - name: ApplicationRoleConnection
    defType: Class
    documentation: The role connection object that an application has attached to a user.
    fields:
      2.0.x:
        platform_name:
          type: String
          withNull: true
          documentation: The vanity name of the platform a bot has connected (max 50 characters)
          verification:
            max_length: 50

        platform_username:
          type: String
          withNull: true
          documentation: The username on the platform a bot has connected (max 100 characters)
          verification:
            max_length: 100

        metadata:
          type: Map[String, String]
          documentation: Object mapping application role connection metadata keys to their
            string-ified value (max 100 characters) for the user on the platform a
            bot has connected

  # Role goes here so we can make UserOrRole sealed
  - name: Role
    defType: Class
    extends: [ UserOrRole ]

    documentation: >-
      Roles represent a set of permissions attached to a group of users. Roles have 
      names, colors, and can be "pinned" to the side bar, causing their members to 
      be listed separately. Roles can have separate permission profiles for the 
      global context (guild) and channel context. The @everyone role has the same 
      ID as the guild it belongs to.

    fields:
      2.0.x:
        id:
          type: RoleId
          documentation: Role id

        name:
          type: String
          documentation: Role name

        color:
          type: Int
          documentation: Integer representation of hexadecimal color code

        hoist:
          type: Boolean
          documentation: If this role is pinned in the user listing

        icon:
          type: ImageHash
          withUndefined: true
          withNull: true
          documentation: Role icon hash

        unicode_emoji:
          type: String
          withUndefined: true
          withNull: true
          documentation: Role unicode emoji

        position:
          type: Int
          documentation: Position of this role

        permissions:
          type: Permissions
          documentation: Permission bit set

        managed:
          type: Boolean
          documentation: Whether this role is managed by an integration

        mentionable:
          type: Boolean
          documentation: Whether this role is mentionable

        tags:
          type: Role.RoleTag
          documentation: The tags this role has

        flags:
          type: Role.RoleFlags
          documentation: Role flags combined as a bitfield

    innerTypes:
      - name: RoleTag
        defType: Class
        documentation: Tags with type null represent booleans. They will be present and set to null if they are "true", and will be not present if they are "false".
        allUndefined: true
        fields:
          2.0.x:
            bot_id:
              type: UserId
              documentation: The id of the bot this role belongs to

            integration_id:
              type: Snowflake[Integration]
              documentation: The id of the integration this role belongs to

            premium_subscriber:
              type: Unit
              withNull: true
              documentation: Whether this is the guild's Booster role

            subscription_listing_id:
              type: RawSnowflake
              documentation: The id of this role's subscription sku and listing

            available_for_purchase:
              type: Unit
              withNull: true
              documentation: Whether this role is available for purchase

            guild_connections:
              type: Unit
              withNull: true
              documentation: Whether this role is a guild's linked role

      - name: RoleFlags
        defType: Enum
        type: Int
        isBitfield: true
        values:
          IN_PROMPT:
            value: "1 << 0"
            documentation: Role can be selected by members in an onboarding prompt