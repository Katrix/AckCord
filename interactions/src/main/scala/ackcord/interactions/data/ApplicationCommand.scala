//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.interactions.data

// THIS FILE IS MACHINE GENERATED!
// 
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/interactions/data/ApplicationCommand.yaml

import io.circe.Json
import ackcord.data.base._
import ackcord.data._

class ApplicationCommand(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /**
    * Unique ID of command
    */
  @inline def id: Snowflake[ApplicationCommand] = selectDynamic[Snowflake[ApplicationCommand]]("id")
  
  @inline def withId(newValue: Snowflake[ApplicationCommand]): ApplicationCommand = 
    objWith(ApplicationCommand, "id", newValue)
  
  /**
    * Type of command, defaults to 1
    */
  @inline def tpe: UndefOr[ApplicationCommand.ApplicationCommandType] = 
    selectDynamic[UndefOr[ApplicationCommand.ApplicationCommandType]]("type")
  
  @inline def withTpe(
      newValue: UndefOr[ApplicationCommand.ApplicationCommandType],
  ): ApplicationCommand = objWithUndef(ApplicationCommand, "type", newValue)
  
  /**
    * ID of the parent application
    */
  @inline def applicationId: Snowflake[Application] = selectDynamic[Snowflake[Application]]("application_id")
  
  @inline def withApplicationId(newValue: Snowflake[Application]): ApplicationCommand = 
    objWith(ApplicationCommand, "application_id", newValue)
  
  /**
    * Guild ID of the command, if not global
    */
  @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")
  
  @inline def withGuildId(newValue: UndefOr[GuildId]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "guild_id", newValue)
  
  /**
    * Name of command, 1-32 characters
    */
  @inline def name: String = selectDynamic[String]("name")
  
  @inline def withName(newValue: String): ApplicationCommand = objWith(ApplicationCommand, "name", newValue)
  
  @inline def nameLocalized: UndefOr[String] = selectDynamic[UndefOr[String]]("name_localized")
  
  @inline def withNameLocalized(newValue: UndefOr[String]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "name_localized", newValue)
  
  /**
    * Localization dictionary for name field. Values follow the same restrictions as name
    */
  @inline def nameLocalizations: JsonOption[Map[String, String]] = selectDynamic[JsonOption[Map[String, String]]]("name_localizations")
  
  @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "name_localizations", newValue)
  
  /**
    * Description for CHAT_INPUT commands, 1-100 characters. Empty string for USER and MESSAGE commands
    */
  @inline def description: String = selectDynamic[String]("description")
  
  @inline def withDescription(newValue: String): ApplicationCommand = objWith(ApplicationCommand, "description", newValue)
  
  @inline def descriptionLocalized: UndefOr[String] = selectDynamic[UndefOr[String]]("description_localized")
  
  @inline def withDescriptionLocalized(newValue: UndefOr[String]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "description_localized", newValue)
  
  /**
    * Localization dictionary for description field. Values follow the same restrictions as description
    */
  @inline def descriptionLocalizations: JsonOption[Map[String, String]] = 
    selectDynamic[JsonOption[Map[String, String]]]("description_localizations")
  
  @inline def withDescriptionLocalizations(newValue: JsonOption[Map[String, String]]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "description_localizations", newValue)
  
  /**
    * Parameters for the command, max of 25
    */
  @inline def options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] = 
    selectDynamic[UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]]("options")
  
  @inline def withOptions(
      newValue: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]],
  ): ApplicationCommand = objWithUndef(ApplicationCommand, "options", newValue)
  
  /**
    * Set of permissions represented as a bit set
    */
  @inline def defaultMemberPermissions: Option[Permissions] = selectDynamic[Option[Permissions]]("default_member_permissions")
  
  @inline def withDefaultMemberPermissions(newValue: Option[Permissions]): ApplicationCommand = 
    objWith(ApplicationCommand, "default_member_permissions", newValue)
  
  /**
    * Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible.
    */
  @inline def dmPermission: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("dm_permission")
  
  @inline def withDmPermission(newValue: UndefOr[Boolean]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "dm_permission", newValue)
  
  /**
    * Indicates whether the command is age-restricted, defaults to false
    */
  @inline def nsfw: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("nsfw")
  
  @inline def withNsfw(newValue: UndefOr[Boolean]): ApplicationCommand = 
    objWithUndef(ApplicationCommand, "nsfw", newValue)
  
  /**
    * Autoincrementing version identifier updated during substantial record changes
    */
  @inline def version: RawSnowflake = selectDynamic[RawSnowflake]("version")
  
  @inline def withVersion(newValue: RawSnowflake): ApplicationCommand = 
    objWith(ApplicationCommand, "version", newValue)
  
  override def values: Seq[() => Any] = Seq(() => id, () => tpe, () => applicationId, () => guildId, () => name, () => nameLocalized, () => nameLocalizations, () => description, () => descriptionLocalized, () => descriptionLocalizations, () => options, () => defaultMemberPermissions, () => dmPermission, () => nsfw, () => version)
}
object ApplicationCommand extends DiscordObjectCompanion[ApplicationCommand] {
  def makeRaw(json: Json, cache: Map[String, Any]): ApplicationCommand = 
    new ApplicationCommand(json, cache)
  
  /**
    * @param id
    *   Unique ID of command
    * @param tpe
    *   Type of command, defaults to 1
    * @param applicationId
    *   ID of the parent application
    * @param guildId
    *   Guild ID of the command, if not global
    * @param name
    *   Name of command, 1-32 characters
    * @param nameLocalizations
    *   Localization dictionary for name field. Values follow the same restrictions as name
    * @param description
    *   Description for CHAT_INPUT commands, 1-100 characters. Empty string for USER and MESSAGE commands
    * @param descriptionLocalizations
    *   Localization dictionary for description field. Values follow the same restrictions as description
    * @param options
    *   Parameters for the command, max of 25
    * @param defaultMemberPermissions
    *   Set of permissions represented as a bit set
    * @param dmPermission
    *   Indicates whether the command is available in DMs with the app, only for globally-scoped commands. By default, commands are visible.
    * @param nsfw
    *   Indicates whether the command is age-restricted, defaults to false
    * @param version
    *   Autoincrementing version identifier updated during substantial record changes
    */
  def make20(
      id: Snowflake[ApplicationCommand],
      tpe: UndefOr[ApplicationCommand.ApplicationCommandType] = UndefOrUndefined(Some("tpe")),
      applicationId: Snowflake[Application],
      guildId: UndefOr[GuildId] = UndefOrUndefined(Some("guild_id")),
      name: String,
      nameLocalized: UndefOr[String] = UndefOrUndefined(Some("name_localized")),
      nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
      description: String,
      descriptionLocalized: UndefOr[String] = UndefOrUndefined(Some("description_localized")),
      descriptionLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("description_localizations")),
      options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] = UndefOrUndefined(Some("options")),
      defaultMemberPermissions: Option[Permissions],
      dmPermission: UndefOr[Boolean] = UndefOrUndefined(Some("dm_permission")),
      nsfw: UndefOr[Boolean] = UndefOrUndefined(Some("nsfw")),
      version: RawSnowflake,
  ): ApplicationCommand = makeRawFromFields("id" := id, "type" :=? tpe, "application_id" := applicationId, "guild_id" :=? guildId, "name" := name, "name_localized" :=? nameLocalized, "name_localizations" :=? nameLocalizations, "description" := description, "description_localized" :=? descriptionLocalized, "description_localizations" :=? descriptionLocalizations, "options" :=? options, "default_member_permissions" := defaultMemberPermissions, "dm_permission" :=? dmPermission, "nsfw" :=? nsfw, "version" := version)
  
  
  
  sealed case class ApplicationCommandType private (value: String) extends DiscordEnum[String]
  object ApplicationCommandType extends DiscordEnumCompanion[String, ApplicationCommandType] {
    /**
      * Slash commands; a text-based command that shows up when a user types /
      */
    val ChatInput: ApplicationCommandType = ApplicationCommandType("CHAT_INPUT")
    
    /**
      * A UI-based command that shows up when you right click or tap on a user
      */
    val User: ApplicationCommandType = ApplicationCommandType("USER")
    
    /**
      * A UI-based command that shows up when you right click or tap on a message
      */
    val Message: ApplicationCommandType = ApplicationCommandType("MESSAGE")
    
    def unknown(value: String): ApplicationCommandType = new ApplicationCommandType(value)
    
    val values: Seq[ApplicationCommandType] = Seq(ChatInput, User, Message)
  }
  
  
  
  class ApplicationCommandOption(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
  
    /**
      * Type of option
      */
    @inline def tpe: ApplicationCommandOption.ApplicationCommandOptionType = 
      selectDynamic[ApplicationCommandOption.ApplicationCommandOptionType]("type")
    
    @inline def withTpe(
        newValue: ApplicationCommandOption.ApplicationCommandOptionType,
    ): ApplicationCommandOption = objWith(ApplicationCommandOption, "type", newValue)
    
    /**
      * 1-32 character name
      */
    @inline def name: String = selectDynamic[String]("name")
    
    @inline def withName(newValue: String): ApplicationCommandOption = 
      objWith(ApplicationCommandOption, "name", newValue)
    
    /**
      * Localization dictionary for the name field. Values follow the same restrictions as name
      */
    @inline def nameLocalizations: JsonOption[Map[String, String]] = selectDynamic[JsonOption[Map[String, String]]]("name_localizations")
    
    @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "name_localizations", newValue)
    
    /**
      * 1-100 character description
      */
    @inline def description: String = selectDynamic[String]("description")
    
    @inline def withDescription(newValue: String): ApplicationCommandOption = 
      objWith(ApplicationCommandOption, "description", newValue)
    
    /**
      * Localization dictionary for the description field. Values follow the same restrictions as description
      */
    @inline def descriptionLocalizations: JsonOption[Map[String, String]] = 
      selectDynamic[JsonOption[Map[String, String]]]("description_localizations")
    
    @inline def withDescriptionLocalizations(newValue: JsonOption[Map[String, String]]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "description_localizations", newValue)
    
    /**
      * If the parameter is required or optional--default false
      */
    @inline def required: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("required")
    
    @inline def withRequired(newValue: UndefOr[Boolean]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "required", newValue)
    
    /**
      * Choices for STRING, INTEGER, and NUMBER types for the user to pick from, max 25
      */
    @inline def choices: UndefOr[Seq[ApplicationCommandOption.ApplicationCommandOptionChoice]] = 
      selectDynamic[UndefOr[Seq[ApplicationCommandOption.ApplicationCommandOptionChoice]]]("choices")
    
    @inline def withChoices(
        newValue: UndefOr[Seq[ApplicationCommandOption.ApplicationCommandOptionChoice]],
    ): ApplicationCommandOption = objWithUndef(ApplicationCommandOption, "choices", newValue)
    
    /**
      * If the option is a subcommand or subcommand group type, these nested options will be the parameters
      */
    @inline def options: UndefOr[Seq[ApplicationCommandOption]] = selectDynamic[UndefOr[Seq[ApplicationCommandOption]]]("options")
    
    @inline def withOptions(newValue: UndefOr[Seq[ApplicationCommandOption]]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "options", newValue)
    
    /**
      * If the option is a channel type, the channels shown will be restricted to these types
      */
    @inline def channelTypes: UndefOr[Seq[Channel.ChannelType]] = selectDynamic[UndefOr[Seq[Channel.ChannelType]]]("channel_types")
    
    @inline def withChannelTypes(newValue: UndefOr[Seq[Channel.ChannelType]]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "channel_types", newValue)
    
    /**
      * If the option is an INTEGER or NUMBER type, the minimum value permitted
      */
    @inline def minValue: UndefOr[IntOrDouble] = selectDynamic[UndefOr[IntOrDouble]]("min_value")
    
    @inline def withMinValue(newValue: UndefOr[IntOrDouble]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "min_value", newValue)
    
    /**
      * If the option is an INTEGER or NUMBER type, the maximum value permitted
      */
    @inline def maxValue: UndefOr[IntOrDouble] = selectDynamic[UndefOr[IntOrDouble]]("max_value")
    
    @inline def withMaxValue(newValue: UndefOr[IntOrDouble]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "max_value", newValue)
    
    /**
      * For option type STRING, the minimum allowed length (minimum of 0, maximum of 6000)
      */
    @inline def minLength: UndefOr[Int] = selectDynamic[UndefOr[Int]]("min_length")
    
    @inline def withMinLength(newValue: UndefOr[Int]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "min_length", newValue)
    
    /**
      * For option type STRING, the maximum allowed length (minimum of 1, maximum of 6000)
      */
    @inline def maxLength: UndefOr[Int] = selectDynamic[UndefOr[Int]]("max_length")
    
    @inline def withMaxLength(newValue: UndefOr[Int]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "max_length", newValue)
    
    /**
      * If autocomplete interactions are enabled for this STRING, INTEGER, or NUMBER type option
      */
    @inline def autocomplete: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("autocomplete")
    
    @inline def withAutocomplete(newValue: UndefOr[Boolean]): ApplicationCommandOption = 
      objWithUndef(ApplicationCommandOption, "autocomplete", newValue)
    
    override def values: Seq[() => Any] = Seq(() => tpe, () => name, () => nameLocalizations, () => description, () => descriptionLocalizations, () => required, () => choices, () => options, () => channelTypes, () => minValue, () => maxValue, () => minLength, () => maxLength, () => autocomplete)
  }
  object ApplicationCommandOption extends DiscordObjectCompanion[ApplicationCommandOption] {
    def makeRaw(json: Json, cache: Map[String, Any]): ApplicationCommandOption = 
      new ApplicationCommandOption(json, cache)
    
    /**
      * @param tpe
      *   Type of option
      * @param name
      *   1-32 character name
      * @param nameLocalizations
      *   Localization dictionary for the name field. Values follow the same restrictions as name
      * @param description
      *   1-100 character description
      * @param descriptionLocalizations
      *   Localization dictionary for the description field. Values follow the same restrictions as description
      * @param required
      *   If the parameter is required or optional--default false
      * @param choices
      *   Choices for STRING, INTEGER, and NUMBER types for the user to pick from, max 25
      * @param options
      *   If the option is a subcommand or subcommand group type, these nested options will be the parameters
      * @param channelTypes
      *   If the option is a channel type, the channels shown will be restricted to these types
      * @param minValue
      *   If the option is an INTEGER or NUMBER type, the minimum value permitted
      * @param maxValue
      *   If the option is an INTEGER or NUMBER type, the maximum value permitted
      * @param minLength
      *   For option type STRING, the minimum allowed length (minimum of 0, maximum of 6000)
      * @param maxLength
      *   For option type STRING, the maximum allowed length (minimum of 1, maximum of 6000)
      * @param autocomplete
      *   If autocomplete interactions are enabled for this STRING, INTEGER, or NUMBER type option
      */
    def make20(
        tpe: ApplicationCommandOption.ApplicationCommandOptionType,
        name: String,
        nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
        description: String,
        descriptionLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("description_localizations")),
        required: UndefOr[Boolean] = UndefOrUndefined(Some("required")),
        choices: UndefOr[Seq[ApplicationCommandOption.ApplicationCommandOptionChoice]] = UndefOrUndefined(Some("choices")),
        options: UndefOr[Seq[ApplicationCommandOption]] = UndefOrUndefined(Some("options")),
        channelTypes: UndefOr[Seq[Channel.ChannelType]] = UndefOrUndefined(Some("channel_types")),
        minValue: UndefOr[IntOrDouble] = UndefOrUndefined(Some("min_value")),
        maxValue: UndefOr[IntOrDouble] = UndefOrUndefined(Some("max_value")),
        minLength: UndefOr[Int] = UndefOrUndefined(Some("min_length")),
        maxLength: UndefOr[Int] = UndefOrUndefined(Some("max_length")),
        autocomplete: UndefOr[Boolean] = UndefOrUndefined(Some("autocomplete")),
    ): ApplicationCommandOption = makeRawFromFields("type" := tpe, "name" := name, "name_localizations" :=? nameLocalizations, "description" := description, "description_localizations" :=? descriptionLocalizations, "required" :=? required, "choices" :=? choices, "options" :=? options, "channel_types" :=? channelTypes, "min_value" :=? minValue, "max_value" :=? maxValue, "min_length" :=? minLength, "max_length" :=? maxLength, "autocomplete" :=? autocomplete)
    
    
    
    sealed case class ApplicationCommandOptionType private (value: Int) extends DiscordEnum[Int]
    object ApplicationCommandOptionType extends DiscordEnumCompanion[Int, ApplicationCommandOptionType] {
      val SUB_COMMAND: ApplicationCommandOptionType = ApplicationCommandOptionType(1)
      
      val SUB_COMMAND_GROUP: ApplicationCommandOptionType = ApplicationCommandOptionType(2)
      
      val STRING: ApplicationCommandOptionType = ApplicationCommandOptionType(3)
      
      val INTEGER: ApplicationCommandOptionType = ApplicationCommandOptionType(4)
      
      val BOOLEAN: ApplicationCommandOptionType = ApplicationCommandOptionType(5)
      
      val USER: ApplicationCommandOptionType = ApplicationCommandOptionType(6)
      
      val CHANNEL: ApplicationCommandOptionType = ApplicationCommandOptionType(7)
      
      val ROLE: ApplicationCommandOptionType = ApplicationCommandOptionType(8)
      
      val MENTIONABLE: ApplicationCommandOptionType = ApplicationCommandOptionType(9)
      
      val NUMBER: ApplicationCommandOptionType = ApplicationCommandOptionType(10)
      
      val ATTACHMENT: ApplicationCommandOptionType = ApplicationCommandOptionType(11)
      
      def unknown(value: Int): ApplicationCommandOptionType = new ApplicationCommandOptionType(value)
      
      val values: Seq[ApplicationCommandOptionType] = Seq(SUB_COMMAND, SUB_COMMAND_GROUP, STRING, INTEGER, BOOLEAN, USER, CHANNEL, ROLE, MENTIONABLE, NUMBER, ATTACHMENT)
    }
    
    
    
    class ApplicationCommandOptionChoice(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
    
      /**
        * 1-100 character choice name
        */
      @inline def name: String = selectDynamic[String]("name")
      
      @inline def withName(newValue: String): ApplicationCommandOptionChoice = 
        objWith(ApplicationCommandOptionChoice, "name", newValue)
      
      /**
        * Localization dictionary for the name field. Values follow the same restrictions as name
        */
      @inline def nameLocalizations: JsonOption[Map[String, String]] = 
        selectDynamic[JsonOption[Map[String, String]]]("name_localizations")
      
      @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): ApplicationCommandOptionChoice = 
        objWithUndef(ApplicationCommandOptionChoice, "name_localizations", newValue)
      
      /**
        * Value for the choice, up to 100 characters if string
        */
      @inline def value: StringOrIntOrDouble = selectDynamic[StringOrIntOrDouble]("value")
      
      @inline def withValue(newValue: StringOrIntOrDouble): ApplicationCommandOptionChoice = 
        objWith(ApplicationCommandOptionChoice, "value", newValue)
      
      override def values: Seq[() => Any] = Seq(() => name, () => nameLocalizations, () => value)
    }
    object ApplicationCommandOptionChoice extends DiscordObjectCompanion[ApplicationCommandOptionChoice] {
      def makeRaw(json: Json, cache: Map[String, Any]): ApplicationCommandOptionChoice = 
        new ApplicationCommandOptionChoice(json, cache)
      
      /**
        * @param name
        *   1-100 character choice name
        * @param nameLocalizations
        *   Localization dictionary for the name field. Values follow the same restrictions as name
        * @param value
        *   Value for the choice, up to 100 characters if string
        */
      def make20(
          name: String,
          nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
          value: StringOrIntOrDouble,
      ): ApplicationCommandOptionChoice = makeRawFromFields("name" := name, "name_localizations" :=? nameLocalizations, "value" := value)
    }
  }
  
  
  
  class GuildApplicationCommandPermissions(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
  
    /**
      * ID of the command or the application ID
      */
    @inline def id: RawSnowflake = selectDynamic[RawSnowflake]("id")
    
    @inline def withId(newValue: RawSnowflake): GuildApplicationCommandPermissions = 
      objWith(GuildApplicationCommandPermissions, "id", newValue)
    
    /**
      * ID of the application the command belongs to
      */
    @inline def applicationId: ApplicationId = selectDynamic[ApplicationId]("application_id")
    
    @inline def withApplicationId(newValue: ApplicationId): GuildApplicationCommandPermissions = 
      objWith(GuildApplicationCommandPermissions, "application_id", newValue)
    
    /**
      * ID of the guild
      */
    @inline def guildId: GuildId = selectDynamic[GuildId]("guild_id")
    
    @inline def withGuildId(newValue: GuildId): GuildApplicationCommandPermissions = 
      objWith(GuildApplicationCommandPermissions, "guild_id", newValue)
    
    /**
      * Permissions for the command in the guild, max of 100
      */
    @inline def permissions: Seq[GuildApplicationCommandPermissions.ApplicationCommandPermissions] = 
      selectDynamic[Seq[GuildApplicationCommandPermissions.ApplicationCommandPermissions]]("permissions")
    
    @inline def withPermissions(
        newValue: Seq[GuildApplicationCommandPermissions.ApplicationCommandPermissions],
    ): GuildApplicationCommandPermissions = objWith(GuildApplicationCommandPermissions, "permissions", newValue)
    
    override def values: Seq[() => Any] = Seq(() => id, () => applicationId, () => guildId, () => permissions)
  }
  object GuildApplicationCommandPermissions extends DiscordObjectCompanion[GuildApplicationCommandPermissions] {
    def makeRaw(json: Json, cache: Map[String, Any]): GuildApplicationCommandPermissions = 
      new GuildApplicationCommandPermissions(json, cache)
    
    /**
      * @param id
      *   ID of the command or the application ID
      * @param applicationId
      *   ID of the application the command belongs to
      * @param guildId
      *   ID of the guild
      * @param permissions
      *   Permissions for the command in the guild, max of 100
      */
    def make20(
        id: RawSnowflake,
        applicationId: ApplicationId,
        guildId: GuildId,
        permissions: Seq[GuildApplicationCommandPermissions.ApplicationCommandPermissions],
    ): GuildApplicationCommandPermissions = makeRawFromFields("id" := id, "application_id" := applicationId, "guild_id" := guildId, "permissions" := permissions)
    
    
    
    class ApplicationCommandPermissions(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {
    
      /**
        * ID of the role, user, or channel. It can also be a permission constant
        */
      @inline def id: RawSnowflake = selectDynamic[RawSnowflake]("id")
      
      @inline def withId(newValue: RawSnowflake): ApplicationCommandPermissions = 
        objWith(ApplicationCommandPermissions, "id", newValue)
      
      /**
        * role (1), user (2), or channel (3)
        */
      @inline def tpe: ApplicationCommandPermissions.ApplicationCommandPermissionType = 
        selectDynamic[ApplicationCommandPermissions.ApplicationCommandPermissionType]("type")
      
      @inline def withTpe(
          newValue: ApplicationCommandPermissions.ApplicationCommandPermissionType,
      ): ApplicationCommandPermissions = objWith(ApplicationCommandPermissions, "type", newValue)
      
      /**
        * true to allow, false, to disallow
        */
      @inline def permission: Boolean = selectDynamic[Boolean]("permission")
      
      @inline def withPermission(newValue: Boolean): ApplicationCommandPermissions = 
        objWith(ApplicationCommandPermissions, "permission", newValue)
      
      override def values: Seq[() => Any] = Seq(() => id, () => tpe, () => permission)
    }
    object ApplicationCommandPermissions extends DiscordObjectCompanion[ApplicationCommandPermissions] {
      def makeRaw(json: Json, cache: Map[String, Any]): ApplicationCommandPermissions = 
        new ApplicationCommandPermissions(json, cache)
      
      /**
        * @param id
        *   ID of the role, user, or channel. It can also be a permission constant
        * @param tpe
        *   role (1), user (2), or channel (3)
        * @param permission
        *   true to allow, false, to disallow
        */
      def make20(
          id: RawSnowflake,
          tpe: ApplicationCommandPermissions.ApplicationCommandPermissionType,
          permission: Boolean,
      ): ApplicationCommandPermissions = makeRawFromFields("id" := id, "type" := tpe, "permission" := permission)
      
      
      
      sealed case class ApplicationCommandPermissionType private (value: Int) extends DiscordEnum[Int]
      object ApplicationCommandPermissionType extends DiscordEnumCompanion[Int, ApplicationCommandPermissionType] {
        val ROLE: ApplicationCommandPermissionType = ApplicationCommandPermissionType(1)
        
        val USER: ApplicationCommandPermissionType = ApplicationCommandPermissionType(2)
        
        val CHANNEL: ApplicationCommandPermissionType = ApplicationCommandPermissionType(3)
        
        def unknown(value: Int): ApplicationCommandPermissionType = new ApplicationCommandPermissionType(value)
        
        val values: Seq[ApplicationCommandPermissionType] = Seq(ROLE, USER, CHANNEL)
      }
    }
  }
}