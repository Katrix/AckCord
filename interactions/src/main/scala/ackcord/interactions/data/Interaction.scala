//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.interactions.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/interactions/data/Interaction.yaml

import ackcord.data._
import ackcord.data.base._
import ackcord.requests.ChannelRequests
import ackcord.requests.CreateMessageLikeMixin
import io.circe.Json

class Interaction(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** ID of the interaction */
  @inline def id: InteractionId = selectDynamic[InteractionId]("id")

  @inline def withId(newValue: InteractionId): Interaction = objWith(Interaction, "id", newValue)

  /** ID of the application this interaction is for */
  @inline def applicationId: ApplicationId = selectDynamic[ApplicationId]("application_id")

  @inline def withApplicationId(newValue: ApplicationId): Interaction =
    objWith(Interaction, "application_id", newValue)

  /** Type of interaction */
  @inline def tpe: Interaction.InteractionType = selectDynamic[Interaction.InteractionType]("type")

  @inline def withTpe(newValue: Interaction.InteractionType): Interaction =
    objWith(Interaction, "type", newValue)

  /** Interaction data payload */
  @inline def data: UndefOr[Interaction.InteractionData] = selectDynamic[UndefOr[Interaction.InteractionData]]("data")

  @inline def withData(newValue: UndefOr[Interaction.InteractionData]): Interaction =
    objWithUndef(Interaction, "data", newValue)

  /** Guild that the interaction was sent from */
  @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")

  @inline def withGuildId(newValue: UndefOr[GuildId]): Interaction = objWithUndef(Interaction, "guild_id", newValue)

  /** Channel that the interaction was sent from */
  @inline def channel: UndefOr[RawChannel] = selectDynamic[UndefOr[RawChannel]]("channel")

  @inline def withChannel(newValue: UndefOr[RawChannel]): Interaction =
    objWithUndef(Interaction, "channel", newValue)

  /** Channel that the interaction was sent from */
  @inline def channelId: UndefOr[TextChannelId] = selectDynamic[UndefOr[TextChannelId]]("channel_id")

  @inline def withChannelId(newValue: UndefOr[TextChannelId]): Interaction =
    objWithUndef(Interaction, "channel_id", newValue)

  /** Guild member data for the invoking user, including permissions */
  @inline def member: UndefOr[GuildMember] = selectDynamic[UndefOr[GuildMember]]("member")

  @inline def withMember(newValue: UndefOr[GuildMember]): Interaction =
    objWithUndef(Interaction, "member", newValue)

  /** User object for the invoking user, if invoked in a DM */
  @inline def user: UndefOr[User] = selectDynamic[UndefOr[User]]("user")

  @inline def withUser(newValue: UndefOr[User]): Interaction = objWithUndef(Interaction, "user", newValue)

  /** Continuation token for responding to the interaction */
  @inline def token: String = selectDynamic[String]("token")

  @inline def withToken(newValue: String): Interaction = objWith(Interaction, "token", newValue)

  /** Read-only property, always 1 */
  @inline def version: Int = selectDynamic[Int]("version")

  @inline def withVersion(newValue: Int): Interaction = objWith(Interaction, "version", newValue)

  /** For components, the message they were attached to */
  @inline def message: UndefOr[Message] = selectDynamic[UndefOr[Message]]("message")

  @inline def withMessage(newValue: UndefOr[Message]): Interaction = objWithUndef(Interaction, "message", newValue)

  /**
    * Bitwise set of permissions the app or bot has within the channel the
    * interaction was sent from
    */
  @inline def appPermissions: UndefOr[Permissions] = selectDynamic[UndefOr[Permissions]]("app_permissions")

  @inline def withAppPermissions(newValue: UndefOr[Permissions]): Interaction =
    objWithUndef(Interaction, "app_permissions", newValue)

  /** Selected language of the invoking user */
  @inline def locale: UndefOr[String] = selectDynamic[UndefOr[String]]("locale")

  @inline def withLocale(newValue: UndefOr[String]): Interaction = objWithUndef(Interaction, "locale", newValue)

  /** Guild's preferred locale, if invoked in a guild */
  @inline def guildLocale: UndefOr[String] = selectDynamic[UndefOr[String]]("guild_locale")

  @inline def withGuildLocale(newValue: UndefOr[String]): Interaction =
    objWithUndef(Interaction, "guild_locale", newValue)

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => applicationId,
    () => tpe,
    () => data,
    () => guildId,
    () => channel,
    () => channelId,
    () => member,
    () => user,
    () => token,
    () => version,
    () => message,
    () => appPermissions,
    () => locale,
    () => guildLocale
  )
}
object Interaction extends DiscordObjectCompanion[Interaction] {
  def makeRaw(json: Json, cache: Map[String, Any]): Interaction = new Interaction(json, cache)

  /**
    * @param id
    *   ID of the interaction
    * @param applicationId
    *   ID of the application this interaction is for
    * @param tpe
    *   Type of interaction
    * @param data
    *   Interaction data payload
    * @param guildId
    *   Guild that the interaction was sent from
    * @param channel
    *   Channel that the interaction was sent from
    * @param channelId
    *   Channel that the interaction was sent from
    * @param member
    *   Guild member data for the invoking user, including permissions
    * @param user
    *   User object for the invoking user, if invoked in a DM
    * @param token
    *   Continuation token for responding to the interaction
    * @param version
    *   Read-only property, always 1
    * @param message
    *   For components, the message they were attached to
    * @param appPermissions
    *   Bitwise set of permissions the app or bot has within the channel the
    *   interaction was sent from
    * @param locale
    *   Selected language of the invoking user
    * @param guildLocale
    *   Guild's preferred locale, if invoked in a guild
    */
  def make20(
      id: InteractionId,
      applicationId: ApplicationId,
      tpe: Interaction.InteractionType,
      data: UndefOr[Interaction.InteractionData] = UndefOrUndefined(Some("data")),
      guildId: UndefOr[GuildId] = UndefOrUndefined(Some("guild_id")),
      channel: UndefOr[RawChannel] = UndefOrUndefined(Some("channel")),
      channelId: UndefOr[TextChannelId] = UndefOrUndefined(Some("channel_id")),
      member: UndefOr[GuildMember] = UndefOrUndefined(Some("member")),
      user: UndefOr[User] = UndefOrUndefined(Some("user")),
      token: String,
      version: Int,
      message: UndefOr[Message] = UndefOrUndefined(Some("message")),
      appPermissions: UndefOr[Permissions] = UndefOrUndefined(Some("app_permissions")),
      locale: UndefOr[String] = UndefOrUndefined(Some("locale")),
      guildLocale: UndefOr[String] = UndefOrUndefined(Some("guild_locale"))
  ): Interaction = makeRawFromFields(
    "id"               := id,
    "application_id"   := applicationId,
    "type"             := tpe,
    "data"            :=? data,
    "guild_id"        :=? guildId,
    "channel"         :=? channel,
    "channel_id"      :=? channelId,
    "member"          :=? member,
    "user"            :=? user,
    "token"            := token,
    "version"          := version,
    "message"         :=? message,
    "app_permissions" :=? appPermissions,
    "locale"          :=? locale,
    "guild_locale"    :=? guildLocale
  )

  sealed case class InteractionType private (value: Int) extends DiscordEnum[Int]
  object InteractionType                                 extends DiscordEnumCompanion[Int, InteractionType] {

    /** 1 */
    val PING: InteractionType = InteractionType(1)

    /** 2 */
    val APPLICATION_COMMAND: InteractionType = InteractionType(2)

    /** 3 */
    val MESSAGE_COMPONENT: InteractionType = InteractionType(3)

    /** 4 */
    val APPLICATION_COMMAND_AUTOCOMPLETE: InteractionType = InteractionType(4)

    /** 5 */
    val MODAL_SUBMIT: InteractionType = InteractionType(5)

    def unknown(value: Int): InteractionType = new InteractionType(value)

    val values: Seq[InteractionType] =
      Seq(PING, APPLICATION_COMMAND, MESSAGE_COMPONENT, APPLICATION_COMMAND_AUTOCOMPLETE, MODAL_SUBMIT)
  }

  sealed trait InteractionData extends DiscordObject
  object InteractionData extends DiscordObjectCompanion[InteractionData] {
    override def makeRaw(json: Json, cache: Map[String, Any]): InteractionData = {
      val c = json.hcursor
      if (c.downField("components").succeeded) ModalSubmitData.makeRaw(json, cache)
      else if (c.downField("component_type").succeeded) MessageComponentData.makeRaw(json, cache)
      else ApplicationCommandData.makeRaw(json, cache)
    }
  }

  class ApplicationCommandData(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache)
      with InteractionData {

    /** The ID of the invoked command */
    @inline def id: CommandId = selectDynamic[CommandId]("id")

    @inline def withId(newValue: CommandId): ApplicationCommandData = objWith(ApplicationCommandData, "id", newValue)

    /** The name of the invoked command */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): ApplicationCommandData = objWith(ApplicationCommandData, "name", newValue)

    /** The type of the invoked command */
    @inline def tpe: ApplicationCommand.ApplicationCommandType =
      selectDynamic[ApplicationCommand.ApplicationCommandType]("type")

    @inline def withTpe(newValue: ApplicationCommand.ApplicationCommandType): ApplicationCommandData =
      objWith(ApplicationCommandData, "type", newValue)

    /** Converted users + roles + channels + attachments */
    @inline def resolved: UndefOr[Interaction.ResolvedData] =
      selectDynamic[UndefOr[Interaction.ResolvedData]]("resolved")

    @inline def withResolved(newValue: UndefOr[Interaction.ResolvedData]): ApplicationCommandData =
      objWithUndef(ApplicationCommandData, "resolved", newValue)

    /** The params + values from the user */
    @inline def options: UndefOr[Seq[ApplicationCommandInteractionDataOption]] =
      selectDynamic[UndefOr[Seq[ApplicationCommandInteractionDataOption]]]("options")

    @inline def withOptions(
        newValue: UndefOr[Seq[ApplicationCommandInteractionDataOption]]
    ): ApplicationCommandData = objWithUndef(ApplicationCommandData, "options", newValue)

    /** The id of the guild the command is registered to */
    @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")

    @inline def withGuildId(newValue: UndefOr[GuildId]): ApplicationCommandData =
      objWithUndef(ApplicationCommandData, "guild_id", newValue)

    /** Id of the user or message targeted by a user or message command */
    @inline def targetId: UndefOr[RawSnowflake] = selectDynamic[UndefOr[RawSnowflake]]("target_id")

    @inline def withTargetId(newValue: UndefOr[RawSnowflake]): ApplicationCommandData =
      objWithUndef(ApplicationCommandData, "target_id", newValue)

    override def values: Seq[() => Any] =
      Seq(() => id, () => name, () => tpe, () => resolved, () => options, () => guildId, () => targetId)
  }
  object ApplicationCommandData extends DiscordObjectCompanion[ApplicationCommandData] {
    def makeRaw(json: Json, cache: Map[String, Any]): ApplicationCommandData =
      new ApplicationCommandData(json, cache)

    /**
      * @param id
      *   The ID of the invoked command
      * @param name
      *   The name of the invoked command
      * @param tpe
      *   The type of the invoked command
      * @param resolved
      *   Converted users + roles + channels + attachments
      * @param options
      *   The params + values from the user
      * @param guildId
      *   The id of the guild the command is registered to
      * @param targetId
      *   Id of the user or message targeted by a user or message command
      */
    def make20(
        id: CommandId,
        name: String,
        tpe: ApplicationCommand.ApplicationCommandType,
        resolved: UndefOr[Interaction.ResolvedData] = UndefOrUndefined(Some("resolved")),
        options: UndefOr[Seq[ApplicationCommandInteractionDataOption]] = UndefOrUndefined(Some("options")),
        guildId: UndefOr[GuildId] = UndefOrUndefined(Some("guild_id")),
        targetId: UndefOr[RawSnowflake] = UndefOrUndefined(Some("target_id"))
    ): ApplicationCommandData = makeRawFromFields(
      "id"         := id,
      "name"       := name,
      "type"       := tpe,
      "resolved"  :=? resolved,
      "options"   :=? options,
      "guild_id"  :=? guildId,
      "target_id" :=? targetId
    )
  }

  class MessageComponentData(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache)
      with InteractionData {

    /** The custom_id of the component */
    @inline def customId: String = selectDynamic[String]("custom_id")

    @inline def withCustomId(newValue: String): MessageComponentData =
      objWith(MessageComponentData, "custom_id", newValue)

    /** The type of the component */
    @inline def componentType: Component.ComponentType = selectDynamic[Component.ComponentType]("component_type")

    @inline def withComponentType(newValue: Component.ComponentType): MessageComponentData =
      objWith(MessageComponentData, "component_type", newValue)

    /** Values the user selected in a select menu component */
    @inline def selectValues: UndefOr[Seq[Component.SelectOption]] =
      selectDynamic[UndefOr[Seq[Component.SelectOption]]]("values")

    @inline def withSelectValues(newValue: UndefOr[Seq[Component.SelectOption]]): MessageComponentData =
      objWithUndef(MessageComponentData, "values", newValue)

    /** Converted users + roles + channels + attachments */
    @inline def resolved: UndefOr[Interaction.ResolvedData] =
      selectDynamic[UndefOr[Interaction.ResolvedData]]("resolved")

    @inline def withResolved(newValue: UndefOr[Interaction.ResolvedData]): MessageComponentData =
      objWithUndef(MessageComponentData, "resolved", newValue)

    override def values: Seq[() => Any] = Seq(() => customId, () => componentType, () => selectValues, () => resolved)
  }
  object MessageComponentData extends DiscordObjectCompanion[MessageComponentData] {
    def makeRaw(json: Json, cache: Map[String, Any]): MessageComponentData =
      new MessageComponentData(json, cache)

    /**
      * @param customId
      *   The custom_id of the component
      * @param componentType
      *   The type of the component
      * @param selectValues
      *   Values the user selected in a select menu component
      * @param resolved
      *   Converted users + roles + channels + attachments
      */
    def make20(
        customId: String,
        componentType: Component.ComponentType,
        selectValues: UndefOr[Seq[Component.SelectOption]] = UndefOrUndefined(Some("selectValues")),
        resolved: UndefOr[Interaction.ResolvedData] = UndefOrUndefined(Some("resolved"))
    ): MessageComponentData = makeRawFromFields(
      "custom_id"      := customId,
      "component_type" := componentType,
      "values"        :=? selectValues,
      "resolved"      :=? resolved
    )
  }

  class ModalSubmitData(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache)
      with InteractionData {

    /** The custom_id of the modal */
    @inline def customId: String = selectDynamic[String]("custom_id")

    @inline def withCustomId(newValue: String): ModalSubmitData = objWith(ModalSubmitData, "custom_id", newValue)

    /** The values submitted by the user */
    @inline def components: Seq[Component] = selectDynamic[Seq[Component]]("components")

    @inline def withComponents(newValue: Seq[Component]): ModalSubmitData =
      objWith(ModalSubmitData, "components", newValue)

    override def values: Seq[() => Any] = Seq(() => customId, () => components)
  }
  object ModalSubmitData extends DiscordObjectCompanion[ModalSubmitData] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModalSubmitData =
      new ModalSubmitData(json, cache)

    /**
      * @param customId
      *   The custom_id of the modal
      * @param components
      *   The values submitted by the user
      */
    def make20(customId: String, components: Seq[Component]): ModalSubmitData =
      makeRawFromFields("custom_id" := customId, "components" := components)
  }

  class ResolvedData(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** The ids and User objects */
    @inline def users: UndefOr[Map[UserId, User]] = selectDynamic[UndefOr[Map[UserId, User]]]("users")

    @inline def withUsers(newValue: UndefOr[Map[UserId, User]]): ResolvedData =
      objWithUndef(ResolvedData, "users", newValue)

    /** The ids and partial Member objects */
    @inline def members: UndefOr[Map[UserId, GuildMember.Partial]] =
      selectDynamic[UndefOr[Map[UserId, GuildMember.Partial]]]("members")

    @inline def withMembers(newValue: UndefOr[Map[UserId, GuildMember.Partial]]): ResolvedData =
      objWithUndef(ResolvedData, "members", newValue)

    /** The ids and Role objects */
    @inline def roles: UndefOr[Map[RoleId, Role]] = selectDynamic[UndefOr[Map[RoleId, Role]]]("roles")

    @inline def withRoles(newValue: UndefOr[Map[RoleId, Role]]): ResolvedData =
      objWithUndef(ResolvedData, "roles", newValue)

    /** The ids and partial Channel objects */
    @inline def channels: UndefOr[Map[GuildChannelId, ResolvedChannel]] =
      selectDynamic[UndefOr[Map[GuildChannelId, ResolvedChannel]]]("channels")

    @inline def withChannels(newValue: UndefOr[Map[GuildChannelId, ResolvedChannel]]): ResolvedData =
      objWithUndef(ResolvedData, "channels", newValue)

    /** The ids and partial Message objects */
    @inline def messages: UndefOr[Map[MessageId, Message]] = selectDynamic[UndefOr[Map[MessageId, Message]]]("messages")

    @inline def withMessages(newValue: UndefOr[Map[MessageId, Message]]): ResolvedData =
      objWithUndef(ResolvedData, "messages", newValue)

    /** The ids and attachment objects */
    @inline def attachments: UndefOr[Map[Snowflake[Attachment], Attachment]] =
      selectDynamic[UndefOr[Map[Snowflake[Attachment], Attachment]]]("attachments")

    @inline def withAttachments(
        newValue: UndefOr[Map[Snowflake[Attachment], Attachment]]
    ): ResolvedData = objWithUndef(ResolvedData, "attachments", newValue)

    override def values: Seq[() => Any] =
      Seq(() => users, () => members, () => roles, () => channels, () => messages, () => attachments)
  }
  object ResolvedData extends DiscordObjectCompanion[ResolvedData] {
    def makeRaw(json: Json, cache: Map[String, Any]): ResolvedData = new ResolvedData(json, cache)

    /**
      * @param users
      *   The ids and User objects
      * @param members
      *   The ids and partial Member objects
      * @param roles
      *   The ids and Role objects
      * @param channels
      *   The ids and partial Channel objects
      * @param messages
      *   The ids and partial Message objects
      * @param attachments
      *   The ids and attachment objects
      */
    def make20(
        users: UndefOr[Map[UserId, User]] = UndefOrUndefined(Some("users")),
        members: UndefOr[Map[UserId, GuildMember.Partial]] = UndefOrUndefined(Some("members")),
        roles: UndefOr[Map[RoleId, Role]] = UndefOrUndefined(Some("roles")),
        channels: UndefOr[Map[GuildChannelId, ResolvedChannel]] = UndefOrUndefined(Some("channels")),
        messages: UndefOr[Map[MessageId, Message]] = UndefOrUndefined(Some("messages")),
        attachments: UndefOr[Map[Snowflake[Attachment], Attachment]] = UndefOrUndefined(Some("attachments"))
    ): ResolvedData = makeRawFromFields(
      "users"       :=? users,
      "members"     :=? members,
      "roles"       :=? roles,
      "channels"    :=? channels,
      "messages"    :=? messages,
      "attachments" :=? attachments
    )
  }

  class ResolvedChannel(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    @inline def id: GuildChannelId = selectDynamic[GuildChannelId]("id")

    @inline def withId(newValue: GuildChannelId): ResolvedChannel = objWith(ResolvedChannel, "id", newValue)

    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): ResolvedChannel = objWith(ResolvedChannel, "name", newValue)

    @inline def tpe: Channel.ChannelType = selectDynamic[Channel.ChannelType]("type")

    @inline def withTpe(newValue: Channel.ChannelType): ResolvedChannel =
      objWith(ResolvedChannel, "type", newValue)

    @inline def permissions: Permissions = selectDynamic[Permissions]("permissions")

    @inline def withPermissions(newValue: Permissions): ResolvedChannel =
      objWith(ResolvedChannel, "permissions", newValue)

    @inline def threadMetadata: UndefOr[Channel.ThreadMetadata] =
      selectDynamic[UndefOr[Channel.ThreadMetadata]]("thread_metadata")

    @inline def withThreadMetadata(newValue: UndefOr[Channel.ThreadMetadata]): ResolvedChannel =
      objWithUndef(ResolvedChannel, "thread_metadata", newValue)

    @inline def parentId: UndefOr[GuildChannelId] = selectDynamic[UndefOr[GuildChannelId]]("parent_id")

    @inline def withParentId(newValue: UndefOr[GuildChannelId]): ResolvedChannel =
      objWithUndef(ResolvedChannel, "parent_id", newValue)

    override def values: Seq[() => Any] =
      Seq(() => id, () => name, () => tpe, () => permissions, () => threadMetadata, () => parentId)
  }
  object ResolvedChannel extends DiscordObjectCompanion[ResolvedChannel] {
    def makeRaw(json: Json, cache: Map[String, Any]): ResolvedChannel =
      new ResolvedChannel(json, cache)

    def make20(
        id: GuildChannelId,
        name: String,
        tpe: Channel.ChannelType,
        permissions: Permissions,
        threadMetadata: UndefOr[Channel.ThreadMetadata] = UndefOrUndefined(Some("thread_metadata")),
        parentId: UndefOr[GuildChannelId] = UndefOrUndefined(Some("parent_id"))
    ): ResolvedChannel = makeRawFromFields(
      "id"               := id,
      "name"             := name,
      "type"             := tpe,
      "permissions"      := permissions,
      "thread_metadata" :=? threadMetadata,
      "parent_id"       :=? parentId
    )
  }

  /**
    * All options have names, and an option can either be a parameter and input
    * value--in which case value will be set--or it can denote a subcommand or
    * group--in which case it will contain a top-level key and another array of
    * options.
    *
    * value and options are mutually exclusive.
    */
  class ApplicationCommandInteractionDataOption(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Name of the parameter */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): ApplicationCommandInteractionDataOption =
      objWith(ApplicationCommandInteractionDataOption, "name", newValue)

    /** ApplicationCommand.ApplicationCommandOptionType */
    @inline def tpe: ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionType =
      selectDynamic[ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionType]("type")

    @inline def withTpe(
        newValue: ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionType
    ): ApplicationCommandInteractionDataOption = objWith(ApplicationCommandInteractionDataOption, "type", newValue)

    /** Value of the option resulting from user input */
    @inline def value: UndefOr[StringOrIntOrDoubleOrBoolean] =
      selectDynamic[UndefOr[StringOrIntOrDoubleOrBoolean]]("value")

    @inline def withValue(newValue: UndefOr[StringOrIntOrDoubleOrBoolean]): ApplicationCommandInteractionDataOption =
      objWithUndef(ApplicationCommandInteractionDataOption, "value", newValue)

    /** Present if this option is a group or subcommand */
    @inline def options: UndefOr[Seq[ApplicationCommandInteractionDataOption]] =
      selectDynamic[UndefOr[Seq[ApplicationCommandInteractionDataOption]]]("options")

    @inline def withOptions(
        newValue: UndefOr[Seq[ApplicationCommandInteractionDataOption]]
    ): ApplicationCommandInteractionDataOption =
      objWithUndef(ApplicationCommandInteractionDataOption, "options", newValue)

    /** True if this option is the currently focused option for autocomplete */
    @inline def focused: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("focused")

    @inline def withFocused(newValue: UndefOr[Boolean]): ApplicationCommandInteractionDataOption =
      objWithUndef(ApplicationCommandInteractionDataOption, "focused", newValue)

    override def values: Seq[() => Any] = Seq(() => name, () => tpe, () => value, () => options, () => focused)
  }
  object ApplicationCommandInteractionDataOption
      extends DiscordObjectCompanion[ApplicationCommandInteractionDataOption] {
    def makeRaw(json: Json, cache: Map[String, Any]): ApplicationCommandInteractionDataOption =
      new ApplicationCommandInteractionDataOption(json, cache)

    /**
      * @param name
      *   Name of the parameter
      * @param tpe
      *   ApplicationCommand.ApplicationCommandOptionType
      * @param value
      *   Value of the option resulting from user input
      * @param options
      *   Present if this option is a group or subcommand
      * @param focused
      *   True if this option is the currently focused option for autocomplete
      */
    def make20(
        name: String,
        tpe: ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionType,
        value: UndefOr[StringOrIntOrDoubleOrBoolean] = UndefOrUndefined(Some("value")),
        options: UndefOr[Seq[ApplicationCommandInteractionDataOption]] = UndefOrUndefined(Some("options")),
        focused: UndefOr[Boolean] = UndefOrUndefined(Some("focused"))
    ): ApplicationCommandInteractionDataOption =
      makeRawFromFields("name" := name, "type" := tpe, "value" :=? value, "options" :=? options, "focused" :=? focused)
  }
}

/**
  * This is sent on the message object when the message is a response to an
  * Interaction without an existing message.
  */
class MessageInteraction(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** ID of the interaction */
  @inline def id: InteractionId = selectDynamic[InteractionId]("id")

  @inline def withId(newValue: InteractionId): MessageInteraction = objWith(MessageInteraction, "id", newValue)

  /** Type of interaction */
  @inline def tpe: Interaction.InteractionType = selectDynamic[Interaction.InteractionType]("type")

  @inline def withTpe(newValue: Interaction.InteractionType): MessageInteraction =
    objWith(MessageInteraction, "type", newValue)

  /**
    * Name of the application command, including subcommands and subcommand
    * groups
    */
  @inline def name: String = selectDynamic[String]("name")

  @inline def withName(newValue: String): MessageInteraction = objWith(MessageInteraction, "name", newValue)

  /** User who invoked the interaction */
  @inline def user: User = selectDynamic[User]("user")

  @inline def withUser(newValue: User): MessageInteraction = objWith(MessageInteraction, "user", newValue)

  /** Member who invoked the interaction in the guild */
  @inline def member: UndefOr[GuildMember.Partial] = selectDynamic[UndefOr[GuildMember.Partial]]("member")

  @inline def withMember(newValue: UndefOr[GuildMember.Partial]): MessageInteraction =
    objWithUndef(MessageInteraction, "member", newValue)

  override def values: Seq[() => Any] = Seq(() => id, () => tpe, () => name, () => user, () => member)
}
object MessageInteraction extends DiscordObjectCompanion[MessageInteraction] {
  def makeRaw(json: Json, cache: Map[String, Any]): MessageInteraction =
    new MessageInteraction(json, cache)

  /**
    * @param id
    *   ID of the interaction
    * @param tpe
    *   Type of interaction
    * @param name
    *   Name of the application command, including subcommands and subcommand
    *   groups
    * @param user
    *   User who invoked the interaction
    * @param member
    *   Member who invoked the interaction in the guild
    */
  def make20(
      id: InteractionId,
      tpe: Interaction.InteractionType,
      name: String,
      user: User,
      member: UndefOr[GuildMember.Partial] = UndefOrUndefined(Some("member"))
  ): MessageInteraction =
    makeRawFromFields("id" := id, "type" := tpe, "name" := name, "user" := user, "member" :=? member)
}

class InteractionResponse(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The type of response */
  @inline def tpe: InteractionResponse.InteractionCallbackType =
    selectDynamic[InteractionResponse.InteractionCallbackType]("type")

  @inline def withTpe(newValue: InteractionResponse.InteractionCallbackType): InteractionResponse =
    objWith(InteractionResponse, "type", newValue)

  /** An optional response message */
  @inline def data: UndefOr[InteractionResponse.InteractionCallbackData] =
    selectDynamic[UndefOr[InteractionResponse.InteractionCallbackData]]("data")

  @inline def withData(
      newValue: UndefOr[InteractionResponse.InteractionCallbackData]
  ): InteractionResponse = objWithUndef(InteractionResponse, "data", newValue)

  override def values: Seq[() => Any] = Seq(() => tpe, () => data)
}
object InteractionResponse extends DiscordObjectCompanion[InteractionResponse] {
  def makeRaw(json: Json, cache: Map[String, Any]): InteractionResponse =
    new InteractionResponse(json, cache)

  /**
    * @param tpe
    *   The type of response
    * @param data
    *   An optional response message
    */
  def make20(
      tpe: InteractionResponse.InteractionCallbackType,
      data: UndefOr[InteractionResponse.InteractionCallbackData] = UndefOrUndefined(Some("data"))
  ): InteractionResponse = makeRawFromFields("type" := tpe, "data" :=? data)

  sealed case class InteractionCallbackType private (value: Int) extends DiscordEnum[Int]
  object InteractionCallbackType extends DiscordEnumCompanion[Int, InteractionCallbackType] {

    /** ACK a Ping */
    val PONG: InteractionCallbackType = InteractionCallbackType(1)

    /** Respond to an interaction with a message */
    val CHANNEL_MESSAGE_WITH_SOURCE: InteractionCallbackType = InteractionCallbackType(4)

    /**
      * ACK an interaction and edit a response later, the user sees a loading
      * state
      */
    val DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE: InteractionCallbackType =
      InteractionCallbackType(5)

    /**
      * For components, ACK an interaction and edit the original message later;
      * the user does not see a loading state
      */
    val DEFERRED_UPDATE_MESSAGE: InteractionCallbackType = InteractionCallbackType(6)

    /** For components, edit the message the component was attached to */
    val UPDATE_MESSAGE: InteractionCallbackType = InteractionCallbackType(7)

    /** Respond to an autocomplete interaction with suggested choices */
    val APPLICATION_COMMAND_AUTOCOMPLETE_RESULT: InteractionCallbackType =
      InteractionCallbackType(8)

    /** Respond to an interaction with a popup modal */
    val MODAL: InteractionCallbackType = InteractionCallbackType(9)

    def unknown(value: Int): InteractionCallbackType = new InteractionCallbackType(value)

    val values: Seq[InteractionCallbackType] = Seq(
      PONG,
      CHANNEL_MESSAGE_WITH_SOURCE,
      DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE,
      DEFERRED_UPDATE_MESSAGE,
      UPDATE_MESSAGE,
      APPLICATION_COMMAND_AUTOCOMPLETE_RESULT,
      MODAL
    )
  }

  sealed trait InteractionCallbackData extends DiscordObject
  object InteractionCallbackData extends DiscordObjectCompanion[InteractionCallbackData] {
    override def makeRaw(json: Json, cache: Map[String, Any]): InteractionCallbackData = {
      // Best effort guess
      val c = json.hcursor
      if (c.downField("choices").succeeded) AutocompleteData.makeRaw(json, cache)
      else if (c.downField("title").succeeded) ModalData.makeRaw(json, cache)
      else MessageData.makeRaw(json, cache)
    }
  }

  class MessageData(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache)
      with InteractionCallbackData {

    /** Is the response TTS */
    @inline def tts: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("tts")

    @inline def withTts(newValue: UndefOr[Boolean]): MessageData = objWithUndef(MessageData, "tts", newValue)

    /** Message content */
    @inline def content: UndefOr[String] = selectDynamic[UndefOr[String]]("content")

    @inline def withContent(newValue: UndefOr[String]): MessageData = objWithUndef(MessageData, "content", newValue)

    /** Supports up to 10 embeds */
    @inline def embeds: UndefOr[Seq[OutgoingEmbed]] = selectDynamic[UndefOr[Seq[OutgoingEmbed]]]("embeds")

    @inline def withEmbeds(newValue: UndefOr[Seq[OutgoingEmbed]]): MessageData =
      objWithUndef(MessageData, "embeds", newValue)

    /** Allowed mentions object */
    @inline def allowedMentions: UndefOr[AllowedMentions] = selectDynamic[UndefOr[AllowedMentions]]("allowed_mentions")

    @inline def withAllowedMentions(newValue: UndefOr[AllowedMentions]): MessageData =
      objWithUndef(MessageData, "allowed_mentions", newValue)

    /**
      * Message flags combined as a bitfield (only SUPPRESS_EMBEDS and EPHEMERAL
      * can be set)
      */
    @inline def flags: UndefOr[Message.MessageFlags] = selectDynamic[UndefOr[Message.MessageFlags]]("flags")

    @inline def withFlags(newValue: UndefOr[Message.MessageFlags]): MessageData =
      objWithUndef(MessageData, "flags", newValue)

    /** Message components */
    @inline def components: UndefOr[Seq[Component]] = selectDynamic[UndefOr[Seq[Component]]]("components")

    @inline def withComponents(newValue: UndefOr[Seq[Component]]): MessageData =
      objWithUndef(MessageData, "components", newValue)

    /** Attachment objects with filename and description */
    @inline def attachments: UndefOr[Seq[ChannelRequests.MessageCreateEditAttachment]] =
      selectDynamic[UndefOr[Seq[ChannelRequests.MessageCreateEditAttachment]]]("attachments")

    @inline def withAttachments(
        newValue: UndefOr[Seq[ChannelRequests.MessageCreateEditAttachment]]
    ): MessageData = objWithUndef(MessageData, "attachments", newValue)

    override def values: Seq[() => Any] = Seq(
      () => tts,
      () => content,
      () => embeds,
      () => allowedMentions,
      () => flags,
      () => components,
      () => attachments
    )
  }
  object MessageData extends DiscordObjectCompanion[MessageData] with CreateMessageLikeMixin[MessageData] {
    def makeRaw(json: Json, cache: Map[String, Any]): MessageData = new MessageData(json, cache)

    /**
      * @param tts
      *   Is the response TTS
      * @param content
      *   Message content
      * @param embeds
      *   Supports up to 10 embeds
      * @param allowedMentions
      *   Allowed mentions object
      * @param flags
      *   Message flags combined as a bitfield (only SUPPRESS_EMBEDS and
      *   EPHEMERAL can be set)
      * @param components
      *   Message components
      * @param attachments
      *   Attachment objects with filename and description
      */
    def make20(
        tts: UndefOr[Boolean] = UndefOrUndefined(Some("tts")),
        content: UndefOr[String] = UndefOrUndefined(Some("content")),
        embeds: UndefOr[Seq[OutgoingEmbed]] = UndefOrUndefined(Some("embeds")),
        allowedMentions: UndefOr[AllowedMentions] = UndefOrUndefined(Some("allowed_mentions")),
        flags: UndefOr[Message.MessageFlags] = UndefOrUndefined(Some("flags")),
        components: UndefOr[Seq[Component]] = UndefOrUndefined(Some("components")),
        attachments: UndefOr[Seq[ChannelRequests.MessageCreateEditAttachment]] = UndefOrUndefined(Some("attachments"))
    ): MessageData = makeRawFromFields(
      "tts"              :=? tts,
      "content"          :=? content,
      "embeds"           :=? embeds,
      "allowed_mentions" :=? allowedMentions,
      "flags"            :=? flags,
      "components"       :=? components,
      "attachments"      :=? attachments
    )
  }

  class AutocompleteData(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache)
      with InteractionCallbackData {

    /** Autocomplete choices (max of 25 choices) */
    @inline def choices: Seq[ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionChoice] =
      selectDynamic[Seq[ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionChoice]]("choices")

    @inline def withChoices(
        newValue: Seq[ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionChoice]
    ): AutocompleteData = objWith(AutocompleteData, "choices", newValue)

    override def values: Seq[() => Any] = Seq(() => choices)
  }
  object AutocompleteData extends DiscordObjectCompanion[AutocompleteData] {
    def makeRaw(json: Json, cache: Map[String, Any]): AutocompleteData =
      new AutocompleteData(json, cache)

    /**
      * @param choices
      *   Autocomplete choices (max of 25 choices)
      */
    def make20(
        choices: Seq[ApplicationCommand.ApplicationCommandOption.ApplicationCommandOptionChoice]
    ): AutocompleteData = makeRawFromFields("choices" := choices)
  }

  class ModalData(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache)
      with InteractionCallbackData {

    /** A developer-defined identifier for the modal, max 100 characters */
    @inline def customId: String = selectDynamic[String]("custom_id")

    @inline def withCustomId(newValue: String): ModalData = objWith(ModalData, "custom_id", newValue)

    /** The title of the popup modal, max 45 characters */
    @inline def title: String = selectDynamic[String]("title")

    @inline def withTitle(newValue: String): ModalData = objWith(ModalData, "title", newValue)

    /** Between 1 and 5 (inclusive) components that make up the modal */
    @inline def components: Seq[Component] = selectDynamic[Seq[Component]]("components")

    @inline def withComponents(newValue: Seq[Component]): ModalData = objWith(ModalData, "components", newValue)

    override def values: Seq[() => Any] = Seq(() => customId, () => title, () => components)
  }
  object ModalData extends DiscordObjectCompanion[ModalData] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModalData = new ModalData(json, cache)

    /**
      * @param customId
      *   A developer-defined identifier for the modal, max 100 characters
      * @param title
      *   The title of the popup modal, max 45 characters
      * @param components
      *   Between 1 and 5 (inclusive) components that make up the modal
      */
    def make20(customId: String, title: String, components: Seq[Component]): ModalData =
      makeRawFromFields("custom_id" := customId, "title" := title, "components" := components)
  }
}
