//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.requests

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/requests/AuditLogRequests.yaml

import ackcord.data._
import ackcord.data.base._
import io.circe.Json
import sttp.model.Method

object AuditLogRequests {

  class GetGuildAuditLogQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Entries from a specific user ID */
    @inline def userId: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("user_id")

    @inline def withUserId(newValue: UndefOr[UserId]): GetGuildAuditLogQuery =
      objWithUndef(GetGuildAuditLogQuery, "user_id", newValue)

    /** Entries for a specific audit log event */
    @inline def actionType: UndefOr[AuditLog.AuditLogEvent] =
      selectDynamic[UndefOr[AuditLog.AuditLogEvent]]("action_type")

    @inline def withActionType(newValue: UndefOr[AuditLog.AuditLogEvent]): GetGuildAuditLogQuery =
      objWithUndef(GetGuildAuditLogQuery, "action_type", newValue)

    /** Entries with ID less than a specific audit log entry ID */
    @inline def before: UndefOr[RawSnowflake] = selectDynamic[UndefOr[RawSnowflake]]("before")

    @inline def withBefore(newValue: UndefOr[RawSnowflake]): GetGuildAuditLogQuery =
      objWithUndef(GetGuildAuditLogQuery, "before", newValue)

    /** Entries with ID greater than a specific audit log entry ID */
    @inline def after: UndefOr[RawSnowflake] = selectDynamic[UndefOr[RawSnowflake]]("after")

    @inline def withAfter(newValue: UndefOr[RawSnowflake]): GetGuildAuditLogQuery =
      objWithUndef(GetGuildAuditLogQuery, "after", newValue)

    /** Maximum number of entries (between 1-100) to return, defaults to 50 */
    @inline def limit: UndefOr[Int] = selectDynamic[UndefOr[Int]]("limit")

    @inline def withLimit(newValue: UndefOr[Int]): GetGuildAuditLogQuery =
      objWithUndef(GetGuildAuditLogQuery, "limit", newValue)

    override def values: Seq[() => Any] = Seq(() => userId, () => actionType, () => before, () => after, () => limit)
  }
  object GetGuildAuditLogQuery extends DiscordObjectCompanion[GetGuildAuditLogQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildAuditLogQuery =
      new GetGuildAuditLogQuery(json, cache)

    /**
      * @param userId
      *   Entries from a specific user ID
      * @param actionType
      *   Entries for a specific audit log event
      * @param before
      *   Entries with ID less than a specific audit log entry ID
      * @param after
      *   Entries with ID greater than a specific audit log entry ID
      * @param limit
      *   Maximum number of entries (between 1-100) to return, defaults to 50
      */
    def make20(
        userId: UndefOr[UserId] = UndefOrUndefined,
        actionType: UndefOr[AuditLog.AuditLogEvent] = UndefOrUndefined,
        before: UndefOr[RawSnowflake] = UndefOrUndefined,
        after: UndefOr[RawSnowflake] = UndefOrUndefined,
        limit: UndefOr[Int] = UndefOrUndefined
    ): GetGuildAuditLogQuery = makeRawFromFields(
      "user_id"     :=? userId,
      "action_type" :=? actionType,
      "before"      :=? before,
      "after"       :=? after,
      "limit"       :=? limit
    )
  }

  def getGuildAuditLog(
      guildId: GuildId,
      query: GetGuildAuditLogQuery = GetGuildAuditLogQuery.make20()
  ): Request[Unit, AuditLog] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "audit-logs" +? Parameters
          .query("user_id", query.userId) +? Parameters.query("action_type", query.actionType) +? Parameters.query(
          "before",
          query.before
        ) +? Parameters.query("after", query.after) +? Parameters.query("limit", query.limit)).toRequest(Method.GET)
    )
}
