//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.requests

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/requests/GuildRequests.yaml

import java.time.OffsetDateTime

import ackcord.data._
import ackcord.data.base._
import io.circe.Json
import sttp.model.{Method, StatusCode}

object GuildRequests {

  class CreateGuildBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Name of the guild (2-100 characters) */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): CreateGuildBody = objWith(CreateGuildBody, "name", newValue)

    /** Base64 128x128 image for the guild icon */
    @inline def icon: UndefOr[ImageData] = selectDynamic[UndefOr[ImageData]]("icon")

    @inline def withIcon(newValue: UndefOr[ImageData]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "icon", newValue)

    /** Verification level */
    @inline def verificationLevel: UndefOr[Guild.VerificationLevel] =
      selectDynamic[UndefOr[Guild.VerificationLevel]]("verification_level")

    @inline def withVerificationLevel(newValue: UndefOr[Guild.VerificationLevel]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "verification_level", newValue)

    /** Default message notification level */
    @inline def defaultMessageNotifications: UndefOr[Guild.MessageNotificationLevel] =
      selectDynamic[UndefOr[Guild.MessageNotificationLevel]]("default_message_notifications")

    @inline def withDefaultMessageNotifications(newValue: UndefOr[Guild.MessageNotificationLevel]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "default_message_notifications", newValue)

    /** Explicit content filter level */
    @inline def explicitContentFilter: UndefOr[Guild.ExplicitContentFilterLevel] =
      selectDynamic[UndefOr[Guild.ExplicitContentFilterLevel]]("explicit_content_filter")

    @inline def withExplicitContentFilter(newValue: UndefOr[Guild.ExplicitContentFilterLevel]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "explicit_content_filter", newValue)

    /** New guild roles */
    @inline def roles: UndefOr[Seq[Role]] = selectDynamic[UndefOr[Seq[Role]]]("roles")

    @inline def withRoles(newValue: UndefOr[Seq[Role]]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "roles", newValue)

    /** New guild's channels */
    @inline def channels: UndefOr[Seq[CreateGuildPartialChannel]] =
      selectDynamic[UndefOr[Seq[CreateGuildPartialChannel]]]("channels")

    @inline def withChannels(newValue: UndefOr[Seq[CreateGuildPartialChannel]]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "channels", newValue)

    /** Id for afk channel */
    @inline def afkChannelId: UndefOr[GuildChannelId] = selectDynamic[UndefOr[GuildChannelId]]("afk_channel_id")

    @inline def withAfkChannelId(newValue: UndefOr[GuildChannelId]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "afk_channel_id", newValue)

    /** Afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600 */
    @inline def afkTimeout: UndefOr[Int] = selectDynamic[UndefOr[Int]]("afk_timeout")

    @inline def withAfkTimeout(newValue: UndefOr[Int]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "afk_timeout", newValue)

    /**
      * The id of the channel where guild notices such as welcome messages and
      * boost events are posted
      */
    @inline def systemChannelId: UndefOr[TextGuildChannelId] =
      selectDynamic[UndefOr[TextGuildChannelId]]("system_channel_id")

    @inline def withSystemChannelId(newValue: UndefOr[TextGuildChannelId]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "system_channel_id", newValue)

    /** System channel flags */
    @inline def systemChannelFlags: UndefOr[Guild.SystemChannelFlags] =
      selectDynamic[UndefOr[Guild.SystemChannelFlags]]("system_channel_flags")

    @inline def withSystemChannelFlags(newValue: UndefOr[Guild.SystemChannelFlags]): CreateGuildBody =
      objWithUndef(CreateGuildBody, "system_channel_flags", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => icon,
      () => verificationLevel,
      () => defaultMessageNotifications,
      () => explicitContentFilter,
      () => roles,
      () => channels,
      () => afkChannelId,
      () => afkTimeout,
      () => systemChannelId,
      () => systemChannelFlags
    )
  }
  object CreateGuildBody extends DiscordObjectCompanion[CreateGuildBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildBody =
      new CreateGuildBody(json, cache)

    /**
      * @param name
      *   Name of the guild (2-100 characters)
      * @param icon
      *   Base64 128x128 image for the guild icon
      * @param verificationLevel
      *   Verification level
      * @param defaultMessageNotifications
      *   Default message notification level
      * @param explicitContentFilter
      *   Explicit content filter level
      * @param roles
      *   New guild roles
      * @param channels
      *   New guild's channels
      * @param afkChannelId
      *   Id for afk channel
      * @param afkTimeout
      *   Afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600
      * @param systemChannelId
      *   The id of the channel where guild notices such as welcome messages and
      *   boost events are posted
      * @param systemChannelFlags
      *   System channel flags
      */
    def make20(
        name: String,
        icon: UndefOr[ImageData] = UndefOrUndefined(Some("icon")),
        verificationLevel: UndefOr[Guild.VerificationLevel] = UndefOrUndefined(Some("verification_level")),
        defaultMessageNotifications: UndefOr[Guild.MessageNotificationLevel] = UndefOrUndefined(
          Some("default_message_notifications")
        ),
        explicitContentFilter: UndefOr[Guild.ExplicitContentFilterLevel] = UndefOrUndefined(
          Some("explicit_content_filter")
        ),
        roles: UndefOr[Seq[Role]] = UndefOrUndefined(Some("roles")),
        channels: UndefOr[Seq[CreateGuildPartialChannel]] = UndefOrUndefined(Some("channels")),
        afkChannelId: UndefOr[GuildChannelId] = UndefOrUndefined(Some("afk_channel_id")),
        afkTimeout: UndefOr[Int] = UndefOrUndefined(Some("afk_timeout")),
        systemChannelId: UndefOr[TextGuildChannelId] = UndefOrUndefined(Some("system_channel_id")),
        systemChannelFlags: UndefOr[Guild.SystemChannelFlags] = UndefOrUndefined(Some("system_channel_flags"))
    ): CreateGuildBody = makeRawFromFields(
      "name"                           := name,
      "icon"                          :=? icon,
      "verification_level"            :=? verificationLevel,
      "default_message_notifications" :=? defaultMessageNotifications,
      "explicit_content_filter"       :=? explicitContentFilter,
      "roles"                         :=? roles,
      "channels"                      :=? channels,
      "afk_channel_id"                :=? afkChannelId,
      "afk_timeout"                   :=? afkTimeout,
      "system_channel_id"             :=? systemChannelId,
      "system_channel_flags"          :=? systemChannelFlags
    )
  }

  /**
    * Create a new guild. Returns a guild object on success. Fires a Guild
    * Create Gateway event.
    */
  def createGuild(body: CreateGuildBody): Request[CreateGuildBody, Guild] =
    Request.restRequest(
      route = (Route.Empty / "guilds").toRequest(Method.POST),
      params = body
    )

  class CreateGuildPartialChannel(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): CreateGuildPartialChannel =
      objWith(CreateGuildPartialChannel, "name", newValue)

    @inline def id: UndefOr[GuildChannelId] = selectDynamic[UndefOr[GuildChannelId]]("id")

    @inline def withId(newValue: UndefOr[GuildChannelId]): CreateGuildPartialChannel =
      objWithUndef(CreateGuildPartialChannel, "id", newValue)

    @inline def tpe: Channel.ChannelType = selectDynamic[Channel.ChannelType]("type")

    @inline def withTpe(newValue: Channel.ChannelType): CreateGuildPartialChannel =
      objWith(CreateGuildPartialChannel, "type", newValue)

    @inline def parentId: UndefOr[GuildChannelId] = selectDynamic[UndefOr[GuildChannelId]]("parent_id")

    @inline def withParentId(newValue: UndefOr[GuildChannelId]): CreateGuildPartialChannel =
      objWithUndef(CreateGuildPartialChannel, "parent_id", newValue)

    override def values: Seq[() => Any] = Seq(() => name, () => id, () => tpe, () => parentId)
  }
  object CreateGuildPartialChannel extends DiscordObjectCompanion[CreateGuildPartialChannel] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildPartialChannel =
      new CreateGuildPartialChannel(json, cache)

    def make20(
        name: String,
        id: UndefOr[GuildChannelId] = UndefOrUndefined(Some("id")),
        tpe: Channel.ChannelType,
        parentId: UndefOr[GuildChannelId] = UndefOrUndefined(Some("parent_id"))
    ): CreateGuildPartialChannel =
      makeRawFromFields("name" := name, "id" :=? id, "type" := tpe, "parent_id" :=? parentId)
  }

  class GetGuildQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /**
      * When true, will return approximate member and presence counts for the
      * guild
      */
    @inline def withCounts: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_counts")

    @inline def withWithCounts(newValue: UndefOr[Boolean]): GetGuildQuery =
      objWithUndef(GetGuildQuery, "with_counts", newValue)

    override def values: Seq[() => Any] = Seq(() => withCounts)
  }
  object GetGuildQuery extends DiscordObjectCompanion[GetGuildQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildQuery = new GetGuildQuery(json, cache)

    /**
      * @param withCounts
      *   When true, will return approximate member and presence counts for the
      *   guild
      */
    def make20(
        withCounts: UndefOr[Boolean] = UndefOrUndefined(Some("with_counts"))
    ): GetGuildQuery = makeRawFromFields("with_counts" :=? withCounts)
  }

  /**
    * Returns the guild object for the given id. If with_counts is set to true,
    * this endpoint will also return approximate_member_count and
    * approximate_presence_count for the guild.
    */
  def getGuild(
      guildId: GuildId,
      query: GetGuildQuery = GetGuildQuery.make20()
  ): Request[Unit, Guild] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) +? Parameters
        .query("with_counts", query.withCounts)).toRequest(Method.GET)
    )

  /**
    * Returns the guild preview object for the given id. If the user is not in
    * the guild, then the guild must be discoverable.
    */
  def getGuildPreview(guildId: GuildId): Request[Unit, GuildPreview] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "preview")
        .toRequest(Method.GET)
    )

  class ModifyGuildBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Guild name */
    @inline def name: UndefOr[String] = selectDynamic[UndefOr[String]]("name")

    @inline def withName(newValue: UndefOr[String]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "name", newValue)

    /** Verification level */
    @inline def verificationLevel: JsonOption[Guild.VerificationLevel] =
      selectDynamic[JsonOption[Guild.VerificationLevel]]("verification_level")

    @inline def withVerificationLevel(newValue: JsonOption[Guild.VerificationLevel]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "verification_level", newValue)

    /** Default message notification level */
    @inline def defaultMessageNotifications: JsonOption[Guild.MessageNotificationLevel] =
      selectDynamic[JsonOption[Guild.MessageNotificationLevel]]("default_message_notifications")

    @inline def withDefaultMessageNotifications(newValue: JsonOption[Guild.MessageNotificationLevel]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "default_message_notifications", newValue)

    /** Explicit content filter level */
    @inline def explicitContentFilter: JsonOption[Guild.ExplicitContentFilterLevel] =
      selectDynamic[JsonOption[Guild.ExplicitContentFilterLevel]]("explicit_content_filter")

    @inline def withExplicitContentFilter(newValue: JsonOption[Guild.ExplicitContentFilterLevel]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "explicit_content_filter", newValue)

    /** Id for afk channel */
    @inline def afkChannelId: JsonOption[VoiceGuildChannelId] =
      selectDynamic[JsonOption[VoiceGuildChannelId]]("afk_channel_id")

    @inline def withAfkChannelId(newValue: JsonOption[VoiceGuildChannelId]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "afk_channel_id", newValue)

    /** Afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600 */
    @inline def afkTimeout: UndefOr[Int] = selectDynamic[UndefOr[Int]]("afk_timeout")

    @inline def withAfkTimeout(newValue: UndefOr[Int]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "afk_timeout", newValue)

    /**
      * Base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated
      * gif when the server has the ANIMATED_ICON feature)
      */
    @inline def icon: JsonOption[ImageData] = selectDynamic[JsonOption[ImageData]]("icon")

    @inline def withIcon(newValue: JsonOption[ImageData]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "icon", newValue)

    /** User id to transfer guild ownership to (must be owner) */
    @inline def ownerId: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("owner_id")

    @inline def withOwnerId(newValue: UndefOr[UserId]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "owner_id", newValue)

    /**
      * Base64 16:9 png/jpeg image for the guild splash (when the server has the
      * INVITE_SPLASH feature)
      */
    @inline def splash: JsonOption[ImageData] = selectDynamic[JsonOption[ImageData]]("splash")

    @inline def withSplash(newValue: JsonOption[ImageData]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "splash", newValue)

    /**
      * Base64 16:9 png/jpeg image for the guild discovery splash (when the
      * server has the DISCOVERABLE feature)
      */
    @inline def discoverySplash: JsonOption[ImageData] = selectDynamic[JsonOption[ImageData]]("discovery_splash")

    @inline def withDiscoverySplash(newValue: JsonOption[ImageData]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "discovery_splash", newValue)

    /**
      * Base64 16:9 png/jpeg image for the guild banner (when the server has the
      * BANNER feature; can be animated gif when the server has the
      * ANIMATED_BANNER feature)
      */
    @inline def banner: JsonOption[ImageData] = selectDynamic[JsonOption[ImageData]]("banner")

    @inline def withBanner(newValue: JsonOption[ImageData]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "banner", newValue)

    /**
      * The id of the channel where guild notices such as welcome messages and
      * boost events are posted
      */
    @inline def systemChannelId: JsonOption[TextGuildChannelId] =
      selectDynamic[JsonOption[TextGuildChannelId]]("system_channel_id")

    @inline def withSystemChannelId(newValue: JsonOption[TextGuildChannelId]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "system_channel_id", newValue)

    /** System channel flags */
    @inline def systemChannelFlags: UndefOr[Guild.SystemChannelFlags] =
      selectDynamic[UndefOr[Guild.SystemChannelFlags]]("system_channel_flags")

    @inline def withSystemChannelFlags(newValue: UndefOr[Guild.SystemChannelFlags]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "system_channel_flags", newValue)

    /**
      * The id of the channel where Community guilds display rules and/or
      * guidelines
      */
    @inline def rulesChannelId: JsonOption[TextGuildChannelId] =
      selectDynamic[JsonOption[TextGuildChannelId]]("rules_channel_id")

    @inline def withRulesChannelId(newValue: JsonOption[TextGuildChannelId]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "rules_channel_id", newValue)

    /**
      * The id of the channel where admins and moderators of Community guilds
      * receive notices from Discord
      */
    @inline def publicUpdatesChannelId: JsonOption[TextGuildChannelId] =
      selectDynamic[JsonOption[TextGuildChannelId]]("public_updates_channel_id")

    @inline def withPublicUpdatesChannelId(newValue: JsonOption[TextGuildChannelId]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "public_updates_channel_id", newValue)

    /**
      * The preferred locale of a Community guild used in server discovery and
      * notices from Discord; defaults to "en-US"
      */
    @inline def preferredLocale: JsonOption[String] = selectDynamic[JsonOption[String]]("preferred_locale")

    @inline def withPreferredLocale(newValue: JsonOption[String]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "preferred_locale", newValue)

    /** Enabled guild features */
    @inline def features: UndefOr[Seq[Guild.GuildFeature]] = selectDynamic[UndefOr[Seq[Guild.GuildFeature]]]("features")

    @inline def withFeatures(newValue: UndefOr[Seq[Guild.GuildFeature]]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "features", newValue)

    /** The description for the guild */
    @inline def description: JsonOption[String] = selectDynamic[JsonOption[String]]("description")

    @inline def withDescription(newValue: JsonOption[String]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "description", newValue)

    /** Whether the guild's boost progress bar should be enabled */
    @inline def premiumProgressBarEnabled: UndefOr[Boolean] =
      selectDynamic[UndefOr[Boolean]]("premium_progress_bar_enabled")

    @inline def withPremiumProgressBarEnabled(newValue: UndefOr[Boolean]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "premium_progress_bar_enabled", newValue)

    /**
      * The id of the channel where admins and moderators of Community guilds
      * receive safety alerts from Discord
      */
    @inline def safetyAlertsChannelId: JsonOption[TextGuildChannelId] =
      selectDynamic[JsonOption[TextGuildChannelId]]("safety_alerts_channel_id")

    @inline def withSafetyAlertsChannelId(newValue: JsonOption[TextGuildChannelId]): ModifyGuildBody =
      objWithUndef(ModifyGuildBody, "safety_alerts_channel_id", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => verificationLevel,
      () => defaultMessageNotifications,
      () => explicitContentFilter,
      () => afkChannelId,
      () => afkTimeout,
      () => icon,
      () => ownerId,
      () => splash,
      () => discoverySplash,
      () => banner,
      () => systemChannelId,
      () => systemChannelFlags,
      () => rulesChannelId,
      () => publicUpdatesChannelId,
      () => preferredLocale,
      () => features,
      () => description,
      () => premiumProgressBarEnabled,
      () => safetyAlertsChannelId
    )
  }
  object ModifyGuildBody extends DiscordObjectCompanion[ModifyGuildBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildBody =
      new ModifyGuildBody(json, cache)

    /**
      * @param name
      *   Guild name
      * @param verificationLevel
      *   Verification level
      * @param defaultMessageNotifications
      *   Default message notification level
      * @param explicitContentFilter
      *   Explicit content filter level
      * @param afkChannelId
      *   Id for afk channel
      * @param afkTimeout
      *   Afk timeout in seconds, can be set to: 60, 300, 900, 1800, 3600
      * @param icon
      *   Base64 1024x1024 png/jpeg/gif image for the guild icon (can be
      *   animated gif when the server has the ANIMATED_ICON feature)
      * @param ownerId
      *   User id to transfer guild ownership to (must be owner)
      * @param splash
      *   Base64 16:9 png/jpeg image for the guild splash (when the server has
      *   the INVITE_SPLASH feature)
      * @param discoverySplash
      *   Base64 16:9 png/jpeg image for the guild discovery splash (when the
      *   server has the DISCOVERABLE feature)
      * @param banner
      *   Base64 16:9 png/jpeg image for the guild banner (when the server has
      *   the BANNER feature; can be animated gif when the server has the
      *   ANIMATED_BANNER feature)
      * @param systemChannelId
      *   The id of the channel where guild notices such as welcome messages and
      *   boost events are posted
      * @param systemChannelFlags
      *   System channel flags
      * @param rulesChannelId
      *   The id of the channel where Community guilds display rules and/or
      *   guidelines
      * @param publicUpdatesChannelId
      *   The id of the channel where admins and moderators of Community guilds
      *   receive notices from Discord
      * @param preferredLocale
      *   The preferred locale of a Community guild used in server discovery and
      *   notices from Discord; defaults to "en-US"
      * @param features
      *   Enabled guild features
      * @param description
      *   The description for the guild
      * @param premiumProgressBarEnabled
      *   Whether the guild's boost progress bar should be enabled
      * @param safetyAlertsChannelId
      *   The id of the channel where admins and moderators of Community guilds
      *   receive safety alerts from Discord
      */
    def make20(
        name: UndefOr[String] = UndefOrUndefined(Some("name")),
        verificationLevel: JsonOption[Guild.VerificationLevel] = JsonUndefined(Some("verification_level")),
        defaultMessageNotifications: JsonOption[Guild.MessageNotificationLevel] = JsonUndefined(
          Some("default_message_notifications")
        ),
        explicitContentFilter: JsonOption[Guild.ExplicitContentFilterLevel] = JsonUndefined(
          Some("explicit_content_filter")
        ),
        afkChannelId: JsonOption[VoiceGuildChannelId] = JsonUndefined(Some("afk_channel_id")),
        afkTimeout: UndefOr[Int] = UndefOrUndefined(Some("afk_timeout")),
        icon: JsonOption[ImageData] = JsonUndefined(Some("icon")),
        ownerId: UndefOr[UserId] = UndefOrUndefined(Some("owner_id")),
        splash: JsonOption[ImageData] = JsonUndefined(Some("splash")),
        discoverySplash: JsonOption[ImageData] = JsonUndefined(Some("discovery_splash")),
        banner: JsonOption[ImageData] = JsonUndefined(Some("banner")),
        systemChannelId: JsonOption[TextGuildChannelId] = JsonUndefined(Some("system_channel_id")),
        systemChannelFlags: UndefOr[Guild.SystemChannelFlags] = UndefOrUndefined(Some("system_channel_flags")),
        rulesChannelId: JsonOption[TextGuildChannelId] = JsonUndefined(Some("rules_channel_id")),
        publicUpdatesChannelId: JsonOption[TextGuildChannelId] = JsonUndefined(Some("public_updates_channel_id")),
        preferredLocale: JsonOption[String] = JsonUndefined(Some("preferred_locale")),
        features: UndefOr[Seq[Guild.GuildFeature]] = UndefOrUndefined(Some("features")),
        description: JsonOption[String] = JsonUndefined(Some("description")),
        premiumProgressBarEnabled: UndefOr[Boolean] = UndefOrUndefined(Some("premium_progress_bar_enabled")),
        safetyAlertsChannelId: JsonOption[TextGuildChannelId] = JsonUndefined(Some("safety_alerts_channel_id"))
    ): ModifyGuildBody = makeRawFromFields(
      "name"                          :=? name,
      "verification_level"            :=? verificationLevel,
      "default_message_notifications" :=? defaultMessageNotifications,
      "explicit_content_filter"       :=? explicitContentFilter,
      "afk_channel_id"                :=? afkChannelId,
      "afk_timeout"                   :=? afkTimeout,
      "icon"                          :=? icon,
      "owner_id"                      :=? ownerId,
      "splash"                        :=? splash,
      "discovery_splash"              :=? discoverySplash,
      "banner"                        :=? banner,
      "system_channel_id"             :=? systemChannelId,
      "system_channel_flags"          :=? systemChannelFlags,
      "rules_channel_id"              :=? rulesChannelId,
      "public_updates_channel_id"     :=? publicUpdatesChannelId,
      "preferred_locale"              :=? preferredLocale,
      "features"                      :=? features,
      "description"                   :=? description,
      "premium_progress_bar_enabled"  :=? premiumProgressBarEnabled,
      "safety_alerts_channel_id"      :=? safetyAlertsChannelId
    )
  }

  /**
    * Modify a guild's settings. Requires the MANAGE_GUILD permission. Returns
    * the updated guild object on success. Fires a Guild Update Gateway event.
    */
  def modifyGuild(
      guildId: GuildId,
      body: ModifyGuildBody,
      reason: Option[String]
  ): Request[ModifyGuildBody, Guild] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true)).toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Delete a guild permanently. User must be owner. Returns 204 No Content on
    * success. Fires a Guild Delete Gateway event.
    */
  def deleteGuild(guildId: GuildId): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true)).toRequest(Method.DELETE)
    )

  /** Returns a list of guild channel objects. Does not include threads. */
  def getGuildChannels(guildId: GuildId): Request[Unit, Seq[GuildChannel]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "channels")
        .toRequest(Method.GET)
    )

  class CreateGuildChannelBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Channel name (1-100 characters) */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): CreateGuildChannelBody = objWith(CreateGuildChannelBody, "name", newValue)

    /** The type of channel */
    @inline def tpe: JsonOption[Channel.ChannelType] = selectDynamic[JsonOption[Channel.ChannelType]]("type")

    @inline def withTpe(newValue: JsonOption[Channel.ChannelType]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "type", newValue)

    /** Channel topic (0-1024 characters) */
    @inline def topic: JsonOption[String] = selectDynamic[JsonOption[String]]("topic")

    @inline def withTopic(newValue: JsonOption[String]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "topic", newValue)

    /** The bitrate (in bits) of the voice or stage channel; min 8000 */
    @inline def bitrate: JsonOption[Int] = selectDynamic[JsonOption[Int]]("bitrate")

    @inline def withBitrate(newValue: JsonOption[Int]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "bitrate", newValue)

    /** The user limit of the voice channel */
    @inline def userLimit: JsonOption[Int] = selectDynamic[JsonOption[Int]]("user_limit")

    @inline def withUserLimit(newValue: JsonOption[Int]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "user_limit", newValue)

    /**
      * Amount of seconds a user has to wait before sending another message
      * (0-21600); bots, as well as users with the permission manage_messages or
      * manage_channel, are unaffected
      */
    @inline def rateLimitPerUser: JsonOption[Int] = selectDynamic[JsonOption[Int]]("rate_limit_per_user")

    @inline def withRateLimitPerUser(newValue: JsonOption[Int]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "rate_limit_per_user", newValue)

    /** Sorting position of the channel */
    @inline def position: JsonOption[Int] = selectDynamic[JsonOption[Int]]("position")

    @inline def withPosition(newValue: JsonOption[Int]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "position", newValue)

    /** The channel's permission overwrites */
    @inline def permissionOverwrites
        : JsonOption[Seq[ChannelRequests.ModifyChannelBody.ModifyGuildChannelBody.EditChannelPartialOverwrite]] =
      selectDynamic[JsonOption[
        Seq[ChannelRequests.ModifyChannelBody.ModifyGuildChannelBody.EditChannelPartialOverwrite]
      ]]("permission_overwrites")

    @inline def withPermissionOverwrites(
        newValue: JsonOption[Seq[ChannelRequests.ModifyChannelBody.ModifyGuildChannelBody.EditChannelPartialOverwrite]]
    ): CreateGuildChannelBody = objWithUndef(CreateGuildChannelBody, "permission_overwrites", newValue)

    /** Id of the parent category for a channel */
    @inline def parentId: JsonOption[GuildChannelId] = selectDynamic[JsonOption[GuildChannelId]]("parent_id")

    @inline def withParentId(newValue: JsonOption[GuildChannelId]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "parent_id", newValue)

    /** Whether the channel is nsfw */
    @inline def nsfw: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("nsfw")

    @inline def withNsfw(newValue: JsonOption[Boolean]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "nsfw", newValue)

    /**
      * Channel voice region id of the voice or stage channel, automatic when
      * set to null
      */
    @inline def rtcRegion: JsonOption[String] = selectDynamic[JsonOption[String]]("rtc_region")

    @inline def withRtcRegion(newValue: JsonOption[String]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "rtc_region", newValue)

    /** The camera video quality mode of the voice channel */
    @inline def videoQualityMode: JsonOption[Channel.VideoQualityMode] =
      selectDynamic[JsonOption[Channel.VideoQualityMode]]("video_quality_mode")

    @inline def withVideoQualityMode(newValue: JsonOption[Channel.VideoQualityMode]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "video_quality_mode", newValue)

    /**
      * The default duration that the clients use (not the API) for newly
      * created threads in the channel, in minutes, to automatically archive the
      * thread after recent activity
      */
    @inline def defaultAutoArchiveDuration: JsonOption[Int] =
      selectDynamic[JsonOption[Int]]("default_auto_archive_duration")

    @inline def withDefaultAutoArchiveDuration(newValue: JsonOption[Int]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "default_auto_archive_duration", newValue)

    /**
      * Emoji to show in the add reaction button on a thread in a GUILD_FORUM
      * channel
      */
    @inline def defaultReactionEmoji: JsonOption[Channel.DefaultReaction] =
      selectDynamic[JsonOption[Channel.DefaultReaction]]("default_reaction_emoji")

    @inline def withDefaultReactionEmoji(newValue: JsonOption[Channel.DefaultReaction]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "default_reaction_emoji", newValue)

    /** Set of tags that can be used in a GUILD_FORUM channel */
    @inline def availableTags: JsonOption[Seq[Channel.ForumTag]] =
      selectDynamic[JsonOption[Seq[Channel.ForumTag]]]("available_tags")

    @inline def withAvailableTags(newValue: JsonOption[Seq[Channel.ForumTag]]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "available_tags", newValue)

    /**
      * The default sort order type used to order posts in GUILD_FORUM channels
      */
    @inline def defaultSortOrder: JsonOption[Channel.ForumSortOrder] =
      selectDynamic[JsonOption[Channel.ForumSortOrder]]("default_sort_order")

    @inline def withDefaultSortOrder(newValue: JsonOption[Channel.ForumSortOrder]): CreateGuildChannelBody =
      objWithUndef(CreateGuildChannelBody, "default_sort_order", newValue)

    /**
      * The default forum layout view used to display posts in GUILD_FORUM
      * channels
      */
    @inline def defaultForumLayout: Channel.ForumLayout = selectDynamic[Channel.ForumLayout]("default_forum_layout")

    @inline def withDefaultForumLayout(newValue: Channel.ForumLayout): CreateGuildChannelBody =
      objWith(CreateGuildChannelBody, "default_forum_layout", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => tpe,
      () => topic,
      () => bitrate,
      () => userLimit,
      () => rateLimitPerUser,
      () => position,
      () => permissionOverwrites,
      () => parentId,
      () => nsfw,
      () => rtcRegion,
      () => videoQualityMode,
      () => defaultAutoArchiveDuration,
      () => defaultReactionEmoji,
      () => availableTags,
      () => defaultSortOrder,
      () => defaultForumLayout
    )
  }
  object CreateGuildChannelBody extends DiscordObjectCompanion[CreateGuildChannelBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildChannelBody =
      new CreateGuildChannelBody(json, cache)

    /**
      * @param name
      *   Channel name (1-100 characters)
      * @param tpe
      *   The type of channel
      * @param topic
      *   Channel topic (0-1024 characters)
      * @param bitrate
      *   The bitrate (in bits) of the voice or stage channel; min 8000
      * @param userLimit
      *   The user limit of the voice channel
      * @param rateLimitPerUser
      *   Amount of seconds a user has to wait before sending another message
      *   (0-21600); bots, as well as users with the permission manage_messages
      *   or manage_channel, are unaffected
      * @param position
      *   Sorting position of the channel
      * @param permissionOverwrites
      *   The channel's permission overwrites
      * @param parentId
      *   Id of the parent category for a channel
      * @param nsfw
      *   Whether the channel is nsfw
      * @param rtcRegion
      *   Channel voice region id of the voice or stage channel, automatic when
      *   set to null
      * @param videoQualityMode
      *   The camera video quality mode of the voice channel
      * @param defaultAutoArchiveDuration
      *   The default duration that the clients use (not the API) for newly
      *   created threads in the channel, in minutes, to automatically archive
      *   the thread after recent activity
      * @param defaultReactionEmoji
      *   Emoji to show in the add reaction button on a thread in a GUILD_FORUM
      *   channel
      * @param availableTags
      *   Set of tags that can be used in a GUILD_FORUM channel
      * @param defaultSortOrder
      *   The default sort order type used to order posts in GUILD_FORUM
      *   channels
      * @param defaultForumLayout
      *   The default forum layout view used to display posts in GUILD_FORUM
      *   channels
      */
    def make20(
        name: String,
        tpe: JsonOption[Channel.ChannelType] = JsonUndefined(Some("tpe")),
        topic: JsonOption[String] = JsonUndefined(Some("topic")),
        bitrate: JsonOption[Int] = JsonUndefined(Some("bitrate")),
        userLimit: JsonOption[Int] = JsonUndefined(Some("user_limit")),
        rateLimitPerUser: JsonOption[Int] = JsonUndefined(Some("rate_limit_per_user")),
        position: JsonOption[Int] = JsonUndefined(Some("position")),
        permissionOverwrites: JsonOption[
          Seq[ChannelRequests.ModifyChannelBody.ModifyGuildChannelBody.EditChannelPartialOverwrite]
        ] = JsonUndefined(Some("permission_overwrites")),
        parentId: JsonOption[GuildChannelId] = JsonUndefined(Some("parent_id")),
        nsfw: JsonOption[Boolean] = JsonUndefined(Some("nsfw")),
        rtcRegion: JsonOption[String] = JsonUndefined(Some("rtc_region")),
        videoQualityMode: JsonOption[Channel.VideoQualityMode] = JsonUndefined(Some("video_quality_mode")),
        defaultAutoArchiveDuration: JsonOption[Int] = JsonUndefined(Some("default_auto_archive_duration")),
        defaultReactionEmoji: JsonOption[Channel.DefaultReaction] = JsonUndefined(Some("default_reaction_emoji")),
        availableTags: JsonOption[Seq[Channel.ForumTag]] = JsonUndefined(Some("available_tags")),
        defaultSortOrder: JsonOption[Channel.ForumSortOrder] = JsonUndefined(Some("default_sort_order")),
        defaultForumLayout: Channel.ForumLayout
    ): CreateGuildChannelBody = makeRawFromFields(
      "name"                           := name,
      "type"                          :=? tpe,
      "topic"                         :=? topic,
      "bitrate"                       :=? bitrate,
      "user_limit"                    :=? userLimit,
      "rate_limit_per_user"           :=? rateLimitPerUser,
      "position"                      :=? position,
      "permission_overwrites"         :=? permissionOverwrites,
      "parent_id"                     :=? parentId,
      "nsfw"                          :=? nsfw,
      "rtc_region"                    :=? rtcRegion,
      "video_quality_mode"            :=? videoQualityMode,
      "default_auto_archive_duration" :=? defaultAutoArchiveDuration,
      "default_reaction_emoji"        :=? defaultReactionEmoji,
      "available_tags"                :=? availableTags,
      "default_sort_order"            :=? defaultSortOrder,
      "default_forum_layout"           := defaultForumLayout
    )
  }

  /**
    * Create a new channel object for the guild. Requires the MANAGE_CHANNELS
    * permission. If setting permission overwrites, only permissions your bot
    * has in the guild can be allowed/denied. Setting MANAGE_ROLES permission in
    * channels is only possible for guild administrators. Returns the new
    * channel object on success. Fires a Channel Create Gateway event.
    */
  def createGuildChannel(
      guildId: GuildId,
      body: CreateGuildChannelBody,
      reason: Option[String]
  ): Request[CreateGuildChannelBody, GuildChannel] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "channels")
        .toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class ModifyGuildChannelPositionsBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Channel id */
    @inline def id: GuildChannelId = selectDynamic[GuildChannelId]("id")

    @inline def withId(newValue: GuildChannelId): ModifyGuildChannelPositionsBody =
      objWith(ModifyGuildChannelPositionsBody, "id", newValue)

    /** Sorting position of the channel */
    @inline def position: JsonOption[Int] = selectDynamic[JsonOption[Int]]("position")

    @inline def withPosition(newValue: JsonOption[Int]): ModifyGuildChannelPositionsBody =
      objWithUndef(ModifyGuildChannelPositionsBody, "position", newValue)

    /**
      * Syncs the permission overwrites with the new parent, if moving to a new
      * category
      */
    @inline def lockPermissions: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("lock_permissions")

    @inline def withLockPermissions(newValue: JsonOption[Boolean]): ModifyGuildChannelPositionsBody =
      objWithUndef(ModifyGuildChannelPositionsBody, "lock_permissions", newValue)

    /** The new parent ID for the channel that is moved */
    @inline def parentId: JsonOption[GuildChannelId] = selectDynamic[JsonOption[GuildChannelId]]("parent_id")

    @inline def withParentId(newValue: JsonOption[GuildChannelId]): ModifyGuildChannelPositionsBody =
      objWithUndef(ModifyGuildChannelPositionsBody, "parent_id", newValue)

    override def values: Seq[() => Any] = Seq(() => id, () => position, () => lockPermissions, () => parentId)
  }
  object ModifyGuildChannelPositionsBody extends DiscordObjectCompanion[ModifyGuildChannelPositionsBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildChannelPositionsBody =
      new ModifyGuildChannelPositionsBody(json, cache)

    /**
      * @param id
      *   Channel id
      * @param position
      *   Sorting position of the channel
      * @param lockPermissions
      *   Syncs the permission overwrites with the new parent, if moving to a
      *   new category
      * @param parentId
      *   The new parent ID for the channel that is moved
      */
    def make20(
        id: GuildChannelId,
        position: JsonOption[Int] = JsonUndefined(Some("position")),
        lockPermissions: JsonOption[Boolean] = JsonUndefined(Some("lock_permissions")),
        parentId: JsonOption[GuildChannelId] = JsonUndefined(Some("parent_id"))
    ): ModifyGuildChannelPositionsBody = makeRawFromFields(
      "id"                := id,
      "position"         :=? position,
      "lock_permissions" :=? lockPermissions,
      "parent_id"        :=? parentId
    )
  }

  /**
    * Modify the positions of a set of channel objects for the guild. Requires
    * MANAGE_CHANNELS permission. Returns a 204 empty response on success. Fires
    * multiple Channel Update Gateway events.
    *
    * This endpoint takes a JSON array of parameters in the following format:
    */
  def modifyGuildChannelPositions(
      guildId: GuildId,
      body: Seq[ModifyGuildChannelPositionsBody]
  ): Request[Seq[ModifyGuildChannelPositionsBody], Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "channels")
        .toRequest(Method.PATCH),
      params = body
    )

  class ListActiveGuildThreadsResult(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** The active threads */
    @inline def threads: Seq[Channel] = selectDynamic[Seq[Channel]]("threads")

    @inline def withThreads(newValue: Seq[Channel]): ListActiveGuildThreadsResult =
      objWith(ListActiveGuildThreadsResult, "threads", newValue)

    /**
      * A thread member object for each returned thread the current user has
      * joined
      */
    @inline def members: Seq[Channel.ThreadMember] = selectDynamic[Seq[Channel.ThreadMember]]("members")

    @inline def withMembers(newValue: Seq[Channel.ThreadMember]): ListActiveGuildThreadsResult =
      objWith(ListActiveGuildThreadsResult, "members", newValue)

    override def values: Seq[() => Any] = Seq(() => threads, () => members)
  }
  object ListActiveGuildThreadsResult extends DiscordObjectCompanion[ListActiveGuildThreadsResult] {
    def makeRaw(json: Json, cache: Map[String, Any]): ListActiveGuildThreadsResult =
      new ListActiveGuildThreadsResult(json, cache)

    /**
      * @param threads
      *   The active threads
      * @param members
      *   A thread member object for each returned thread the current user has
      *   joined
      */
    def make20(threads: Seq[Channel], members: Seq[Channel.ThreadMember]): ListActiveGuildThreadsResult =
      makeRawFromFields("threads" := threads, "members" := members)
  }

  /**
    * Returns all active threads in the guild, including public and private
    * threads. Threads are ordered by their id, in descending order.
    */
  def listActiveGuildThreads(guildId: GuildId): Request[Unit, ListActiveGuildThreadsResult] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "threads" / "active")
        .toRequest(Method.GET)
    )

  /** Returns a guild member object for the specified user. */
  def getGuildMember(guildId: GuildId, userId: UserId): Request[Unit, GuildMember] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / Parameters[
        UserId
      ]("userId", userId)).toRequest(Method.GET)
    )

  class ListGuildMembersQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Max number of members to return (1-1000) */
    @inline def limit: UndefOr[Int] = selectDynamic[UndefOr[Int]]("limit")

    @inline def withLimit(newValue: UndefOr[Int]): ListGuildMembersQuery =
      objWithUndef(ListGuildMembersQuery, "limit", newValue)

    /** The highest user id in the previous page */
    @inline def after: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("after")

    @inline def withAfter(newValue: UndefOr[UserId]): ListGuildMembersQuery =
      objWithUndef(ListGuildMembersQuery, "after", newValue)

    override def values: Seq[() => Any] = Seq(() => limit, () => after)
  }
  object ListGuildMembersQuery extends DiscordObjectCompanion[ListGuildMembersQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): ListGuildMembersQuery =
      new ListGuildMembersQuery(json, cache)

    /**
      * @param limit
      *   Max number of members to return (1-1000)
      * @param after
      *   The highest user id in the previous page
      */
    def make20(
        limit: UndefOr[Int] = UndefOrUndefined(Some("limit")),
        after: UndefOr[UserId] = UndefOrUndefined(Some("after"))
    ): ListGuildMembersQuery = makeRawFromFields("limit" :=? limit, "after" :=? after)
  }

  /** Returns a list of guild member objects that are members of the guild. */
  def listGuildMembers(
      guildId: GuildId,
      query: ListGuildMembersQuery = ListGuildMembersQuery.make20()
  ): Request[Unit, Seq[GuildMember]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" +? Parameters
        .query("limit", query.limit) +? Parameters.query("after", query.after)).toRequest(Method.GET)
    )

  class SearchGuildMembersQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Query string to match username(s) and nickname(s) against. */
    @inline def query: String = selectDynamic[String]("query")

    @inline def withQuery(newValue: String): SearchGuildMembersQuery =
      objWith(SearchGuildMembersQuery, "query", newValue)

    /** Max number of members to return (1-1000) */
    @inline def limit: UndefOr[Int] = selectDynamic[UndefOr[Int]]("limit")

    @inline def withLimit(newValue: UndefOr[Int]): SearchGuildMembersQuery =
      objWithUndef(SearchGuildMembersQuery, "limit", newValue)

    override def values: Seq[() => Any] = Seq(() => query, () => limit)
  }
  object SearchGuildMembersQuery extends DiscordObjectCompanion[SearchGuildMembersQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): SearchGuildMembersQuery =
      new SearchGuildMembersQuery(json, cache)

    /**
      * @param query
      *   Query string to match username(s) and nickname(s) against.
      * @param limit
      *   Max number of members to return (1-1000)
      */
    def make20(
        query: String,
        limit: UndefOr[Int] = UndefOrUndefined(Some("limit"))
    ): SearchGuildMembersQuery = makeRawFromFields("query" := query, "limit" :=? limit)
  }

  /**
    * Returns a list of guild member objects whose username or nickname starts
    * with a provided string.
    */
  def searchGuildMembers(guildId: GuildId, query: SearchGuildMembersQuery): Request[Unit, Seq[GuildMember]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "members" / "search" +? Parameters.queryAlways("query", query.query) +? Parameters
        .query("limit", query.limit)).toRequest(Method.GET)
    )

  class AddGuildMemberBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /**
      * An oauth2 access token granted with the guilds.join to the bot's
      * application for the user you want to add to the guild
      */
    @inline def accessToken: String = selectDynamic[String]("access_token")

    @inline def withAccessToken(newValue: String): AddGuildMemberBody =
      objWith(AddGuildMemberBody, "access_token", newValue)

    /** Value to set user's nickname to */
    @inline def nick: UndefOr[String] = selectDynamic[UndefOr[String]]("nick")

    @inline def withNick(newValue: UndefOr[String]): AddGuildMemberBody =
      objWithUndef(AddGuildMemberBody, "nick", newValue)

    /** Array of role ids the member is assigned */
    @inline def roles: UndefOr[Seq[RoleId]] = selectDynamic[UndefOr[Seq[RoleId]]]("roles")

    @inline def withRoles(newValue: UndefOr[Seq[RoleId]]): AddGuildMemberBody =
      objWithUndef(AddGuildMemberBody, "roles", newValue)

    /** Whether the user is muted in voice channels */
    @inline def mute: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("mute")

    @inline def withMute(newValue: UndefOr[Boolean]): AddGuildMemberBody =
      objWithUndef(AddGuildMemberBody, "mute", newValue)

    /** Whether the user is deafened in voice channels */
    @inline def deaf: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("deaf")

    @inline def withDeaf(newValue: UndefOr[Boolean]): AddGuildMemberBody =
      objWithUndef(AddGuildMemberBody, "deaf", newValue)

    override def values: Seq[() => Any] = Seq(() => accessToken, () => nick, () => roles, () => mute, () => deaf)
  }
  object AddGuildMemberBody extends DiscordObjectCompanion[AddGuildMemberBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): AddGuildMemberBody =
      new AddGuildMemberBody(json, cache)

    /**
      * @param accessToken
      *   An oauth2 access token granted with the guilds.join to the bot's
      *   application for the user you want to add to the guild
      * @param nick
      *   Value to set user's nickname to
      * @param roles
      *   Array of role ids the member is assigned
      * @param mute
      *   Whether the user is muted in voice channels
      * @param deaf
      *   Whether the user is deafened in voice channels
      */
    def make20(
        accessToken: String,
        nick: UndefOr[String] = UndefOrUndefined(Some("nick")),
        roles: UndefOr[Seq[RoleId]] = UndefOrUndefined(Some("roles")),
        mute: UndefOr[Boolean] = UndefOrUndefined(Some("mute")),
        deaf: UndefOr[Boolean] = UndefOrUndefined(Some("deaf"))
    ): AddGuildMemberBody = makeRawFromFields(
      "access_token" := accessToken,
      "nick"        :=? nick,
      "roles"       :=? roles,
      "mute"        :=? mute,
      "deaf"        :=? deaf
    )
  }

  /**
    * Adds a user to the guild, provided you have a valid oauth2 access token
    * for the user with the guilds.join scope. Returns a 201 Created with the
    * guild member as the body, or 204 No Content if the user is already a
    * member of the guild. Fires a Guild Member Add Gateway event.
    *
    * For guilds with Membership Screening enabled, this endpoint will default
    * to adding new members as pending in the guild member object. Members that
    * are pending will have to complete membership screening before they become
    * full members that can talk.
    */
  def addGuildMember(
      guildId: GuildId,
      userId: UserId,
      body: AddGuildMemberBody
  ): Request[AddGuildMemberBody, Option[GuildMember]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / Parameters[
        UserId
      ]("userId", userId)).toRequest(Method.PUT),
      params = body,
      parseResponse = Some(new ParseResponse[Option[GuildMember], Any] {
        import sttp.client3._
        import sttp.client3.circe._
        def setSttpResponse[T, R1](
            request: RequestT[Identity, T, R1]
        ): RequestT[Identity, Either[Throwable, Either[String, Option[GuildMember]]], R1] = {
          request.response(
            asEither(
              asStringAlways,
              fromMetadata[Either[DeserializationException[io.circe.Error], Option[GuildMember]], Any](
                asJsonAlways[GuildMember].map(_.map(Some(_))),
                ConditionalResponseAs(_.code == StatusCode.NoContent, ignore.map(_ => Right(None)))
              )
            ).map {
              case Right(Right(ret)) => Right(Right(ret))
              case Right(Left(err))  => Left(err)
              case Left(err)         => Right(Left(err))
            }
          )
        }
      })
    )

  class ModifyGuildMemberBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Value to set user's nickname to */
    @inline def nick: JsonOption[String] = selectDynamic[JsonOption[String]]("nick")

    @inline def withNick(newValue: JsonOption[String]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "nick", newValue)

    /** Array of role ids the member is assigned */
    @inline def roles: JsonOption[Seq[RoleId]] = selectDynamic[JsonOption[Seq[RoleId]]]("roles")

    @inline def withRoles(newValue: JsonOption[Seq[RoleId]]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "roles", newValue)

    /**
      * Whether the user is muted in voice channels. Will throw a 400 error if
      * the user is not in a voice channel
      */
    @inline def mute: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("mute")

    @inline def withMute(newValue: JsonOption[Boolean]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "mute", newValue)

    /**
      * Whether the user is deafened in voice channels. Will throw a 400 error
      * if the user is not in a voice channel
      */
    @inline def deaf: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("deaf")

    @inline def withDeaf(newValue: JsonOption[Boolean]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "deaf", newValue)

    /** Id of channel to move user to (if they are connected to voice) */
    @inline def channelId: JsonOption[VoiceGuildChannelId] =
      selectDynamic[JsonOption[VoiceGuildChannelId]]("channel_id")

    @inline def withChannelId(newValue: JsonOption[VoiceGuildChannelId]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "channel_id", newValue)

    /**
      * When the user's timeout will expire and the user will be able to
      * communicate in the guild again (up to 28 days in the future), set to
      * null to remove timeout. Will throw a 403 error if the user has the
      * ADMINISTRATOR permission or is the owner of the guild
      */
    @inline def communicationDisabledUntil: JsonOption[OffsetDateTime] =
      selectDynamic[JsonOption[OffsetDateTime]]("communication_disabled_until")

    @inline def withCommunicationDisabledUntil(newValue: JsonOption[OffsetDateTime]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "communication_disabled_until", newValue)

    /** Guild member flags */
    @inline def flags: JsonOption[GuildMember.GuildMemberFlags] =
      selectDynamic[JsonOption[GuildMember.GuildMemberFlags]]("flags")

    @inline def withFlags(newValue: JsonOption[GuildMember.GuildMemberFlags]): ModifyGuildMemberBody =
      objWithUndef(ModifyGuildMemberBody, "flags", newValue)

    override def values: Seq[() => Any] = Seq(
      () => nick,
      () => roles,
      () => mute,
      () => deaf,
      () => channelId,
      () => communicationDisabledUntil,
      () => flags
    )
  }
  object ModifyGuildMemberBody extends DiscordObjectCompanion[ModifyGuildMemberBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildMemberBody =
      new ModifyGuildMemberBody(json, cache)

    /**
      * @param nick
      *   Value to set user's nickname to
      * @param roles
      *   Array of role ids the member is assigned
      * @param mute
      *   Whether the user is muted in voice channels. Will throw a 400 error if
      *   the user is not in a voice channel
      * @param deaf
      *   Whether the user is deafened in voice channels. Will throw a 400 error
      *   if the user is not in a voice channel
      * @param channelId
      *   Id of channel to move user to (if they are connected to voice)
      * @param communicationDisabledUntil
      *   When the user's timeout will expire and the user will be able to
      *   communicate in the guild again (up to 28 days in the future), set to
      *   null to remove timeout. Will throw a 403 error if the user has the
      *   ADMINISTRATOR permission or is the owner of the guild
      * @param flags
      *   Guild member flags
      */
    def make20(
        nick: JsonOption[String] = JsonUndefined(Some("nick")),
        roles: JsonOption[Seq[RoleId]] = JsonUndefined(Some("roles")),
        mute: JsonOption[Boolean] = JsonUndefined(Some("mute")),
        deaf: JsonOption[Boolean] = JsonUndefined(Some("deaf")),
        channelId: JsonOption[VoiceGuildChannelId] = JsonUndefined(Some("channel_id")),
        communicationDisabledUntil: JsonOption[OffsetDateTime] = JsonUndefined(Some("communication_disabled_until")),
        flags: JsonOption[GuildMember.GuildMemberFlags] = JsonUndefined(Some("flags"))
    ): ModifyGuildMemberBody = makeRawFromFields(
      "nick"                         :=? nick,
      "roles"                        :=? roles,
      "mute"                         :=? mute,
      "deaf"                         :=? deaf,
      "channel_id"                   :=? channelId,
      "communication_disabled_until" :=? communicationDisabledUntil,
      "flags"                        :=? flags
    )
  }

  /**
    * Modify attributes of a guild member. Returns a 200 OK with the guild
    * member as the body. Fires a Guild Member Update Gateway event. If the
    * channel_id is set to null, this will force the target user to be
    * disconnected from voice.
    */
  def modifyGuildMember(
      guildId: GuildId,
      userId: UserId,
      body: ModifyGuildMemberBody,
      reason: Option[String]
  ): Request[ModifyGuildMemberBody, GuildMember] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / Parameters[
        UserId
      ]("userId", userId)).toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class ModifyCurrentMemberBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Value to set user's nickname to */
    @inline def nick: JsonOption[String] = selectDynamic[JsonOption[String]]("nick")

    @inline def withNick(newValue: JsonOption[String]): ModifyCurrentMemberBody =
      objWithUndef(ModifyCurrentMemberBody, "nick", newValue)

    override def values: Seq[() => Any] = Seq(() => nick)
  }
  object ModifyCurrentMemberBody extends DiscordObjectCompanion[ModifyCurrentMemberBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyCurrentMemberBody =
      new ModifyCurrentMemberBody(json, cache)

    /**
      * @param nick
      *   Value to set user's nickname to
      */
    def make20(nick: JsonOption[String] = JsonUndefined(Some("nick"))): ModifyCurrentMemberBody =
      makeRawFromFields("nick" :=? nick)
  }

  /**
    * Modifies the current member in a guild. Returns a 200 with the updated
    * member object on success. Fires a Guild Member Update Gateway event.
    */
  def modifyCurrentMember(
      guildId: GuildId,
      body: ModifyCurrentMemberBody,
      reason: Option[String]
  ): Request[ModifyCurrentMemberBody, GuildMember] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / "@me")
        .toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Adds a role to a guild member. Requires the MANAGE_ROLES permission.
    * Returns a 204 empty response on success. Fires a Guild Member Update
    * Gateway event.
    */
  def addGuildMemberRole(
      guildId: GuildId,
      userId: UserId,
      roleId: RoleId,
      reason: Option[String]
  ): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / Parameters[
        UserId
      ]("userId", userId) / "roles" / Parameters[RoleId]("roleId", roleId)).toRequest(Method.PUT),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Removes a role from a guild member. Requires the MANAGE_ROLES permission.
    * Returns a 204 empty response on success. Fires a Guild Member Update
    * Gateway event.
    */
  def removeGuildMemberRole(
      guildId: GuildId,
      userId: UserId,
      roleId: RoleId,
      reason: Option[String]
  ): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / Parameters[
        UserId
      ]("userId", userId) / "roles" / Parameters[RoleId]("roleId", roleId)).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Remove a member from a guild. Requires KICK_MEMBERS permission. Returns a
    * 204 empty response on success. Fires a Guild Member Remove Gateway event.
    */
  def removeGuildMember(guildId: GuildId, userId: UserId, reason: Option[String]): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "members" / Parameters[
        UserId
      ]("userId", userId)).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class GetGuildBansQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Number of users to return (up to maximum 1000) */
    @inline def limit: UndefOr[Int] = selectDynamic[UndefOr[Int]]("limit")

    @inline def withLimit(newValue: UndefOr[Int]): GetGuildBansQuery =
      objWithUndef(GetGuildBansQuery, "limit", newValue)

    /** Consider only users before given user id */
    @inline def before: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("before")

    @inline def withBefore(newValue: UndefOr[UserId]): GetGuildBansQuery =
      objWithUndef(GetGuildBansQuery, "before", newValue)

    /** Consider only users after given user id */
    @inline def after: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("after")

    @inline def withAfter(newValue: UndefOr[UserId]): GetGuildBansQuery =
      objWithUndef(GetGuildBansQuery, "after", newValue)

    override def values: Seq[() => Any] = Seq(() => limit, () => before, () => after)
  }
  object GetGuildBansQuery extends DiscordObjectCompanion[GetGuildBansQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildBansQuery =
      new GetGuildBansQuery(json, cache)

    /**
      * @param limit
      *   Number of users to return (up to maximum 1000)
      * @param before
      *   Consider only users before given user id
      * @param after
      *   Consider only users after given user id
      */
    def make20(
        limit: UndefOr[Int] = UndefOrUndefined(Some("limit")),
        before: UndefOr[UserId] = UndefOrUndefined(Some("before")),
        after: UndefOr[UserId] = UndefOrUndefined(Some("after"))
    ): GetGuildBansQuery = makeRawFromFields("limit" :=? limit, "before" :=? before, "after" :=? after)
  }

  /**
    * Returns a list of ban objects for the users banned from this guild.
    * Requires the BAN_MEMBERS permission.
    */
  def getGuildBans(
      guildId: GuildId,
      query: GetGuildBansQuery = GetGuildBansQuery.make20()
  ): Request[Unit, Seq[Ban]] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "bans" +? Parameters.query(
          "limit",
          query.limit
        ) +? Parameters.query("before", query.before) +? Parameters.query("after", query.after)).toRequest(Method.GET)
    )

  /**
    * Returns a ban object for the given user or a 404 not found if the ban
    * cannot be found. Requires the BAN_MEMBERS permission.
    */
  def getGuildBan(guildId: GuildId, userId: UserId): Request[Unit, Ban] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "bans" / Parameters[UserId](
          "userId",
          userId
        )).toRequest(Method.GET)
    )

  class CreateGuildBanBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /**
      * Number of seconds to delete messages for, between 0 and 604800 (7 days)
      */
    @inline def deleteMessageSeconds: UndefOr[Int] = selectDynamic[UndefOr[Int]]("delete_message_seconds")

    @inline def withDeleteMessageSeconds(newValue: UndefOr[Int]): CreateGuildBanBody =
      objWithUndef(CreateGuildBanBody, "delete_message_seconds", newValue)

    override def values: Seq[() => Any] = Seq(() => deleteMessageSeconds)
  }
  object CreateGuildBanBody extends DiscordObjectCompanion[CreateGuildBanBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildBanBody =
      new CreateGuildBanBody(json, cache)

    /**
      * @param deleteMessageSeconds
      *   Number of seconds to delete messages for, between 0 and 604800 (7
      *   days)
      */
    def make20(
        deleteMessageSeconds: UndefOr[Int] = UndefOrUndefined(Some("delete_message_seconds"))
    ): CreateGuildBanBody = makeRawFromFields("delete_message_seconds" :=? deleteMessageSeconds)
  }

  /**
    * Create a guild ban, and optionally delete previous messages sent by the
    * banned user. Requires the BAN_MEMBERS permission. Returns a 204 empty
    * response on success. Fires a Guild Ban Add Gateway event.
    */
  def createGuildBan(
      guildId: GuildId,
      userId: UserId,
      body: CreateGuildBanBody,
      reason: Option[String]
  ): Request[CreateGuildBanBody, Unit] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "bans" / Parameters[UserId](
          "userId",
          userId
        )).toRequest(Method.PUT),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Remove the ban for a user. Requires the BAN_MEMBERS permissions. Returns a
    * 204 empty response on success. Fires a Guild Ban Remove Gateway event.
    */
  def removeGuildBan(guildId: GuildId, userId: UserId, reason: Option[String]): Request[Unit, Unit] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "bans" / Parameters[UserId](
          "userId",
          userId
        )).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /** Returns a list of role objects for the guild. */
  def getGuildRoles(guildId: GuildId): Request[Unit, Seq[Role]] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "roles").toRequest(Method.GET)
    )

  class CreateGuildRoleBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Name of the role, max 100 characters */
    @inline def name: UndefOr[String] = selectDynamic[UndefOr[String]]("name")

    @inline def withName(newValue: UndefOr[String]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "name", newValue)

    /** Bitwise value of the enabled/disabled permissions */
    @inline def permissions: UndefOr[Permissions] = selectDynamic[UndefOr[Permissions]]("permissions")

    @inline def withPermissions(newValue: UndefOr[Permissions]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "permissions", newValue)

    /** RGB color value */
    @inline def color: UndefOr[Int] = selectDynamic[UndefOr[Int]]("color")

    @inline def withColor(newValue: UndefOr[Int]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "color", newValue)

    /** Whether the role should be displayed separately in the sidebar */
    @inline def hoist: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("hoist")

    @inline def withHoist(newValue: UndefOr[Boolean]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "hoist", newValue)

    /** The role's icon image (if the guild has the ROLE_ICONS feature) */
    @inline def icon: JsonOption[ImageData] = selectDynamic[JsonOption[ImageData]]("icon")

    @inline def withIcon(newValue: JsonOption[ImageData]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "icon", newValue)

    /**
      * The role's unicode emoji as a standard emoji (if the guild has the
      * ROLE_ICONS feature)
      */
    @inline def unicodeEmoji: JsonOption[String] = selectDynamic[JsonOption[String]]("unicode_emoji")

    @inline def withUnicodeEmoji(newValue: JsonOption[String]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "unicode_emoji", newValue)

    /** Whether the role should be mentionable */
    @inline def mentionable: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("mentionable")

    @inline def withMentionable(newValue: UndefOr[Boolean]): CreateGuildRoleBody =
      objWithUndef(CreateGuildRoleBody, "mentionable", newValue)

    override def values: Seq[() => Any] =
      Seq(() => name, () => permissions, () => color, () => hoist, () => icon, () => unicodeEmoji, () => mentionable)
  }
  object CreateGuildRoleBody extends DiscordObjectCompanion[CreateGuildRoleBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildRoleBody =
      new CreateGuildRoleBody(json, cache)

    /**
      * @param name
      *   Name of the role, max 100 characters
      * @param permissions
      *   Bitwise value of the enabled/disabled permissions
      * @param color
      *   RGB color value
      * @param hoist
      *   Whether the role should be displayed separately in the sidebar
      * @param icon
      *   The role's icon image (if the guild has the ROLE_ICONS feature)
      * @param unicodeEmoji
      *   The role's unicode emoji as a standard emoji (if the guild has the
      *   ROLE_ICONS feature)
      * @param mentionable
      *   Whether the role should be mentionable
      */
    def make20(
        name: UndefOr[String] = UndefOrUndefined(Some("name")),
        permissions: UndefOr[Permissions] = UndefOrUndefined(Some("permissions")),
        color: UndefOr[Int] = UndefOrUndefined(Some("color")),
        hoist: UndefOr[Boolean] = UndefOrUndefined(Some("hoist")),
        icon: JsonOption[ImageData] = JsonUndefined(Some("icon")),
        unicodeEmoji: JsonOption[String] = JsonUndefined(Some("unicode_emoji")),
        mentionable: UndefOr[Boolean] = UndefOrUndefined(Some("mentionable"))
    ): CreateGuildRoleBody = makeRawFromFields(
      "name"          :=? name,
      "permissions"   :=? permissions,
      "color"         :=? color,
      "hoist"         :=? hoist,
      "icon"          :=? icon,
      "unicode_emoji" :=? unicodeEmoji,
      "mentionable"   :=? mentionable
    )
  }

  /**
    * Create a new role for the guild. Requires the MANAGE_ROLES permission.
    * Returns the new role object on success. Fires a Guild Role Create Gateway
    * event. All JSON params are optional.
    */
  def createGuildRole(
      guildId: GuildId,
      body: CreateGuildRoleBody,
      reason: Option[String]
  ): Request[CreateGuildRoleBody, Role] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "roles")
        .toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class ModifyGuildRolePositionsBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Role */
    @inline def id: RoleId = selectDynamic[RoleId]("id")

    @inline def withId(newValue: RoleId): ModifyGuildRolePositionsBody =
      objWith(ModifyGuildRolePositionsBody, "id", newValue)

    /** Sorting position of the role */
    @inline def position: Option[Int] = selectDynamic[Option[Int]]("position")

    @inline def withPosition(newValue: Option[Int]): ModifyGuildRolePositionsBody =
      objWith(ModifyGuildRolePositionsBody, "position", newValue)

    override def values: Seq[() => Any] = Seq(() => id, () => position)
  }
  object ModifyGuildRolePositionsBody extends DiscordObjectCompanion[ModifyGuildRolePositionsBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildRolePositionsBody =
      new ModifyGuildRolePositionsBody(json, cache)

    /**
      * @param id
      *   Role
      * @param position
      *   Sorting position of the role
      */
    def make20(id: RoleId, position: Option[Int]): ModifyGuildRolePositionsBody =
      makeRawFromFields("id" := id, "position" := position)
  }

  /**
    * Modify the positions of a set of role objects for the guild. Requires the
    * MANAGE_ROLES permission. Returns a list of all of the guild's role objects
    * on success. Fires multiple Guild Role Update Gateway events.
    */
  def modifyGuildRolePositions(
      guildId: GuildId,
      body: Seq[ModifyGuildRolePositionsBody],
      reason: Option[String]
  ): Request[Seq[ModifyGuildRolePositionsBody], Seq[Role]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "roles")
        .toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class ModifyGuildRoleBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Name of the role, max 100 characters */
    @inline def name: JsonOption[String] = selectDynamic[JsonOption[String]]("name")

    @inline def withName(newValue: JsonOption[String]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "name", newValue)

    /** Bitwise value of the enabled/disabled permissions */
    @inline def permissions: JsonOption[Permissions] = selectDynamic[JsonOption[Permissions]]("permissions")

    @inline def withPermissions(newValue: JsonOption[Permissions]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "permissions", newValue)

    /** RGB color value */
    @inline def color: JsonOption[Int] = selectDynamic[JsonOption[Int]]("color")

    @inline def withColor(newValue: JsonOption[Int]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "color", newValue)

    /** Whether the role should be displayed separately in the sidebar */
    @inline def hoist: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("hoist")

    @inline def withHoist(newValue: JsonOption[Boolean]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "hoist", newValue)

    /** The role's icon image (if the guild has the ROLE_ICONS feature) */
    @inline def icon: JsonOption[ImageData] = selectDynamic[JsonOption[ImageData]]("icon")

    @inline def withIcon(newValue: JsonOption[ImageData]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "icon", newValue)

    /**
      * The role's unicode emoji as a standard emoji (if the guild has the
      * ROLE_ICONS feature)
      */
    @inline def unicodeEmoji: JsonOption[String] = selectDynamic[JsonOption[String]]("unicode_emoji")

    @inline def withUnicodeEmoji(newValue: JsonOption[String]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "unicode_emoji", newValue)

    /** Whether the role should be mentionable */
    @inline def mentionable: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("mentionable")

    @inline def withMentionable(newValue: JsonOption[Boolean]): ModifyGuildRoleBody =
      objWithUndef(ModifyGuildRoleBody, "mentionable", newValue)

    override def values: Seq[() => Any] =
      Seq(() => name, () => permissions, () => color, () => hoist, () => icon, () => unicodeEmoji, () => mentionable)
  }
  object ModifyGuildRoleBody extends DiscordObjectCompanion[ModifyGuildRoleBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildRoleBody =
      new ModifyGuildRoleBody(json, cache)

    /**
      * @param name
      *   Name of the role, max 100 characters
      * @param permissions
      *   Bitwise value of the enabled/disabled permissions
      * @param color
      *   RGB color value
      * @param hoist
      *   Whether the role should be displayed separately in the sidebar
      * @param icon
      *   The role's icon image (if the guild has the ROLE_ICONS feature)
      * @param unicodeEmoji
      *   The role's unicode emoji as a standard emoji (if the guild has the
      *   ROLE_ICONS feature)
      * @param mentionable
      *   Whether the role should be mentionable
      */
    def make20(
        name: JsonOption[String] = JsonUndefined(Some("name")),
        permissions: JsonOption[Permissions] = JsonUndefined(Some("permissions")),
        color: JsonOption[Int] = JsonUndefined(Some("color")),
        hoist: JsonOption[Boolean] = JsonUndefined(Some("hoist")),
        icon: JsonOption[ImageData] = JsonUndefined(Some("icon")),
        unicodeEmoji: JsonOption[String] = JsonUndefined(Some("unicode_emoji")),
        mentionable: JsonOption[Boolean] = JsonUndefined(Some("mentionable"))
    ): ModifyGuildRoleBody = makeRawFromFields(
      "name"          :=? name,
      "permissions"   :=? permissions,
      "color"         :=? color,
      "hoist"         :=? hoist,
      "icon"          :=? icon,
      "unicode_emoji" :=? unicodeEmoji,
      "mentionable"   :=? mentionable
    )
  }

  /**
    * Modify a guild role. Requires the MANAGE_ROLES permission. Returns the
    * updated role on success. Fires a Guild Role Update Gateway event.
    */
  def modifyGuildRole(
      guildId: GuildId,
      roleId: RoleId,
      body: ModifyGuildRoleBody,
      reason: Option[String]
  ): Request[ModifyGuildRoleBody, Role] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "roles" / Parameters[RoleId](
          "roleId",
          roleId
        )).toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class ModifyGuildMFALevelBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** MFA level */
    @inline def level: Guild.MFALevel = selectDynamic[Guild.MFALevel]("level")

    @inline def withLevel(newValue: Guild.MFALevel): ModifyGuildMFALevelBody =
      objWith(ModifyGuildMFALevelBody, "level", newValue)

    override def values: Seq[() => Any] = Seq(() => level)
  }
  object ModifyGuildMFALevelBody extends DiscordObjectCompanion[ModifyGuildMFALevelBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildMFALevelBody =
      new ModifyGuildMFALevelBody(json, cache)

    /**
      * @param level
      *   MFA level
      */
    def make20(level: Guild.MFALevel): ModifyGuildMFALevelBody = makeRawFromFields("level" := level)
  }

  /**
    * Modify a guild's MFA level. Requires guild ownership. Returns the updated
    * level on success. Fires a Guild Update Gateway event.
    */
  def modifyGuildMFALevel(
      guildId: GuildId,
      body: ModifyGuildMFALevelBody,
      reason: Option[String]
  ): Request[ModifyGuildMFALevelBody, Guild.MFALevel] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "mfa").toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Delete a guild role. Requires the MANAGE_ROLES permission. Returns a 204
    * empty response on success. Fires a Guild Role Delete Gateway event.
    */
  def deleteGuildRole(guildId: GuildId, roleId: RoleId, reason: Option[String]): Request[Unit, Unit] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "roles" / Parameters[RoleId](
          "roleId",
          roleId
        )).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class GetGuildPruneCountQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Number of days to count prune for (1-30) */
    @inline def days: UndefOr[Int] = selectDynamic[UndefOr[Int]]("days")

    @inline def withDays(newValue: UndefOr[Int]): GetGuildPruneCountQuery =
      objWithUndef(GetGuildPruneCountQuery, "days", newValue)

    /** Role(s) to include. Comma-delimited array of snowflakes */
    @inline def includeRoles: UndefOr[String] = selectDynamic[UndefOr[String]]("include_roles")

    @inline def withIncludeRoles(newValue: UndefOr[String]): GetGuildPruneCountQuery =
      objWithUndef(GetGuildPruneCountQuery, "include_roles", newValue)

    override def values: Seq[() => Any] = Seq(() => days, () => includeRoles)
  }
  object GetGuildPruneCountQuery extends DiscordObjectCompanion[GetGuildPruneCountQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildPruneCountQuery =
      new GetGuildPruneCountQuery(json, cache)

    /**
      * @param days
      *   Number of days to count prune for (1-30)
      * @param includeRoles
      *   Role(s) to include. Comma-delimited array of snowflakes
      */
    def make20(
        days: UndefOr[Int] = UndefOrUndefined(Some("days")),
        includeRoles: UndefOr[String] = UndefOrUndefined(Some("include_roles"))
    ): GetGuildPruneCountQuery = makeRawFromFields("days" :=? days, "include_roles" :=? includeRoles)
  }

  class GetGuildPruneCountResult(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    @inline def pruned: Int = selectDynamic[Int]("pruned")

    @inline def withPruned(newValue: Int): GetGuildPruneCountResult =
      objWith(GetGuildPruneCountResult, "pruned", newValue)

    override def values: Seq[() => Any] = Seq(() => pruned)
  }
  object GetGuildPruneCountResult extends DiscordObjectCompanion[GetGuildPruneCountResult] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildPruneCountResult =
      new GetGuildPruneCountResult(json, cache)

    def make20(pruned: Int): GetGuildPruneCountResult = makeRawFromFields("pruned" := pruned)
  }

  /**
    * Returns an object with one pruned key indicating the number of members
    * that would be removed in a prune operation. Requires the KICK_MEMBERS
    * permission.
    *
    * By default, prune will not remove users with roles. You can optionally
    * include specific roles in your prune by providing the include_roles
    * parameter. Any inactive user that has a subset of the provided role(s)
    * will be counted in the prune and users with additional roles will not.
    */
  def getGuildPruneCount(
      guildId: GuildId,
      query: GetGuildPruneCountQuery = GetGuildPruneCountQuery.make20()
  ): Request[Unit, GetGuildPruneCountResult] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "prune" +? Parameters
        .query("days", query.days) +? Parameters.query("include_roles", query.includeRoles)).toRequest(Method.GET)
    )

  class BeginGuildPruneBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Number of days to prune (1-30) */
    @inline def days: Int = selectDynamic[Int]("days")

    @inline def withDays(newValue: Int): BeginGuildPruneBody = objWith(BeginGuildPruneBody, "days", newValue)

    /** Whether pruned is returned, discouraged for large guilds */
    @inline def computePruneCount: Boolean = selectDynamic[Boolean]("compute_prune_count")

    @inline def withComputePruneCount(newValue: Boolean): BeginGuildPruneBody =
      objWith(BeginGuildPruneBody, "compute_prune_count", newValue)

    /** Role(s) to include */
    @inline def includeRoles: Seq[RoleId] = selectDynamic[Seq[RoleId]]("include_roles")

    @inline def withIncludeRoles(newValue: Seq[RoleId]): BeginGuildPruneBody =
      objWith(BeginGuildPruneBody, "include_roles", newValue)

    override def values: Seq[() => Any] = Seq(() => days, () => computePruneCount, () => includeRoles)
  }
  object BeginGuildPruneBody extends DiscordObjectCompanion[BeginGuildPruneBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): BeginGuildPruneBody =
      new BeginGuildPruneBody(json, cache)

    /**
      * @param days
      *   Number of days to prune (1-30)
      * @param computePruneCount
      *   Whether pruned is returned, discouraged for large guilds
      * @param includeRoles
      *   Role(s) to include
      */
    def make20(
        days: Int,
        computePruneCount: Boolean,
        includeRoles: Seq[RoleId]
    ): BeginGuildPruneBody =
      makeRawFromFields("days" := days, "compute_prune_count" := computePruneCount, "include_roles" := includeRoles)
  }

  class BeginGuildPruneResult(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    @inline def pruned: Option[Int] = selectDynamic[Option[Int]]("pruned")

    @inline def withPruned(newValue: Option[Int]): BeginGuildPruneResult =
      objWith(BeginGuildPruneResult, "pruned", newValue)

    override def values: Seq[() => Any] = Seq(() => pruned)
  }
  object BeginGuildPruneResult extends DiscordObjectCompanion[BeginGuildPruneResult] {
    def makeRaw(json: Json, cache: Map[String, Any]): BeginGuildPruneResult =
      new BeginGuildPruneResult(json, cache)

    def make20(pruned: Option[Int]): BeginGuildPruneResult = makeRawFromFields("pruned" := pruned)
  }

  /**
    * Begin a prune operation. Requires the KICK_MEMBERS permission. Returns an
    * object with one pruned key indicating the number of members that were
    * removed in the prune operation. For large guilds it's recommended to set
    * the compute_prune_count option to false, forcing pruned to null. Fires
    * multiple Guild Member Remove Gateway events.
    *
    * By default, prune will not remove users with roles. You can optionally
    * include specific roles in your prune by providing the include_roles
    * parameter. Any inactive user that has a subset of the provided role(s)
    * will be included in the prune and users with additional roles will not.
    */
  def beginGuildPrune(
      guildId: GuildId,
      body: BeginGuildPruneBody,
      reason: Option[String]
  ): Request[BeginGuildPruneBody, BeginGuildPruneResult] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "prune")
        .toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Returns a list of voice region objects for the guild. Unlike the similar
    * /voice route, this returns VIP servers when the guild is VIP-enabled.
    */
  def getGuildVoiceRegions(guildId: GuildId): Request[Unit, Seq[VoiceRegion]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "regions")
        .toRequest(Method.GET)
    )

  /**
    * Returns a list of invite objects (with invite metadata) for the guild.
    * Requires the MANAGE_GUILD permission.
    */
  def getGuildInvites(guildId: GuildId): Request[Unit, Seq[InviteMetadata]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "invites")
        .toRequest(Method.GET)
    )

  /**
    * Returns a list of integration objects for the guild. Requires the
    * MANAGE_GUILD permission.
    */
  def getGuildIntegrations(guildId: GuildId): Request[Unit, Seq[Integration]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "integrations")
        .toRequest(Method.GET)
    )

  /**
    * Delete the attached integration object for the guild. Deletes any
    * associated webhooks and kicks the associated bot if there is one. Requires
    * the MANAGE_GUILD permission. Returns a 204 empty response on success.
    * Fires Guild Integrations Update and Integration Delete Gateway events.
    */
  def deleteGuildIntegration(
      guildId: GuildId,
      integrationId: Snowflake[Integration],
      reason: Option[String]
  ): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "integrations" / Parameters[Snowflake[Integration]]("integrationId", integrationId)).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Returns a guild widget settings object. Requires the MANAGE_GUILD
    * permission.
    */
  def getGuildWidgetSettings(guildId: GuildId): Request[Unit, GuildWidgetSettings] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "widget")
        .toRequest(Method.GET)
    )

  /**
    * Modify a guild widget settings object for the guild. All attributes may be
    * passed in with JSON and modified. Requires the MANAGE_GUILD permission.
    * Returns the updated guild widget settings object.
    */
  def modifyGuildWidget(
      guildId: GuildId,
      body: GuildWidgetSettings,
      reason: Option[String]
  ): Request[GuildWidgetSettings, GuildWidgetSettings] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "widget")
        .toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /** Returns the widget for the guild. */
  def getGuildWidget(guildId: GuildId): Request[Unit, GuildWidget] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "widget.json")
        .toRequest(Method.GET)
    )

  class GetGuildVanityURLResult(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    @inline def code: Option[String] = selectDynamic[Option[String]]("code")

    @inline def withCode(newValue: Option[String]): GetGuildVanityURLResult =
      objWith(GetGuildVanityURLResult, "code", newValue)

    @inline def uses: Int = selectDynamic[Int]("uses")

    @inline def withUses(newValue: Int): GetGuildVanityURLResult = objWith(GetGuildVanityURLResult, "uses", newValue)

    override def values: Seq[() => Any] = Seq(() => code, () => uses)
  }
  object GetGuildVanityURLResult extends DiscordObjectCompanion[GetGuildVanityURLResult] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildVanityURLResult =
      new GetGuildVanityURLResult(json, cache)

    def make20(code: Option[String], uses: Int): GetGuildVanityURLResult =
      makeRawFromFields("code" := code, "uses" := uses)
  }

  /**
    * Returns a partial invite object for guilds with that feature enabled.
    * Requires the MANAGE_GUILD permission. code will be null if a vanity url
    * for the guild is not set.
    */
  def getGuildVanityURL(guildId: GuildId): Request[Unit, GetGuildVanityURLResult] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "vanity-url")
        .toRequest(Method.GET)
    )

  class GetGuildWidgetImageQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Style of the widget image returned (see below) */
    @inline def style: UndefOr[GuildWidgetImageStyle] = selectDynamic[UndefOr[GuildWidgetImageStyle]]("style")

    @inline def withStyle(newValue: UndefOr[GuildWidgetImageStyle]): GetGuildWidgetImageQuery =
      objWithUndef(GetGuildWidgetImageQuery, "style", newValue)

    override def values: Seq[() => Any] = Seq(() => style)
  }
  object GetGuildWidgetImageQuery extends DiscordObjectCompanion[GetGuildWidgetImageQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildWidgetImageQuery =
      new GetGuildWidgetImageQuery(json, cache)

    /**
      * @param style
      *   Style of the widget image returned (see below)
      */
    def make20(
        style: UndefOr[GuildWidgetImageStyle] = UndefOrUndefined(Some("style"))
    ): GetGuildWidgetImageQuery = makeRawFromFields("style" :=? style)
  }

  /**
    * Returns a PNG image widget for the guild. Requires no permissions or
    * authentication.
    */
  def getGuildWidgetImage(
      guildId: GuildId,
      query: GetGuildWidgetImageQuery = GetGuildWidgetImageQuery.make20()
  ): Request[Unit, Array[Byte]] =
    Request.restRequest(
      route =
        (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "widget.png" +? Parameters
          .query("style", query.style)).toRequest(Method.GET),
      parseResponse = Some(new ParseResponse[Array[Byte], Any] {
        import sttp.client3._
        override def setSttpResponse[T, R1](
            request: RequestT[Identity, T, R1]
        ): RequestT[Identity, Either[Throwable, Either[String, Array[Byte]]], R1] =
          request.response(asEither(asStringAlways, asByteArrayAlways).map(Right(_)))
      })
    )

  sealed case class GuildWidgetImageStyle private (value: String) extends DiscordEnum[String]
  object GuildWidgetImageStyle extends DiscordEnumCompanion[String, GuildWidgetImageStyle] {

    /** Shield style widget with Discord icon and guild members online count */
    val Shield: GuildWidgetImageStyle = GuildWidgetImageStyle("shield")

    /**
      * Large image with guild icon, name and online count. "POWERED BY DISCORD"
      * as the footer of the widget
      */
    val Banner1: GuildWidgetImageStyle = GuildWidgetImageStyle("banner1")

    /**
      * Smaller widget style with guild icon, name and online count. Split on
      * the right with Discord logo
      */
    val Banner2: GuildWidgetImageStyle = GuildWidgetImageStyle("banner2")

    /**
      * Large image with guild icon, name and online count. In the footer,
      * Discord logo on the left and "Chat Now" on the right
      */
    val Banner3: GuildWidgetImageStyle = GuildWidgetImageStyle("banner3")

    /**
      * Large Discord logo at the top of the widget. Guild icon, name and online
      * count in the middle portion of the widget and a "JOIN MY SERVER" button
      * at the bottom
      */
    val Banner4: GuildWidgetImageStyle = GuildWidgetImageStyle("banner4")

    def unknown(value: String): GuildWidgetImageStyle = new GuildWidgetImageStyle(value)

    val values: Seq[GuildWidgetImageStyle] = Seq(Shield, Banner1, Banner2, Banner3, Banner4)
  }

  /**
    * Returns the Welcome Screen object for the guild. If the welcome screen is
    * not enabled, the MANAGE_GUILD permission is required.
    */
  def getGuildWelcomeScreen(guildId: GuildId): Request[Unit, WelcomeScreen] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "welcome-screen")
        .toRequest(Method.GET)
    )

  class ModifyGuildWelcomeScreenBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Whether the welcome screen is enabled */
    @inline def enabled: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("enabled")

    @inline def withEnabled(newValue: JsonOption[Boolean]): ModifyGuildWelcomeScreenBody =
      objWithUndef(ModifyGuildWelcomeScreenBody, "enabled", newValue)

    /** Channels linked in the welcome screen and their display options */
    @inline def welcomeChannels: JsonOption[Seq[WelcomeScreen.WelcomeScreenChannel]] =
      selectDynamic[JsonOption[Seq[WelcomeScreen.WelcomeScreenChannel]]]("welcome_channels")

    @inline def withWelcomeChannels(
        newValue: JsonOption[Seq[WelcomeScreen.WelcomeScreenChannel]]
    ): ModifyGuildWelcomeScreenBody = objWithUndef(ModifyGuildWelcomeScreenBody, "welcome_channels", newValue)

    /** The server description to show in the welcome screen */
    @inline def description: JsonOption[String] = selectDynamic[JsonOption[String]]("description")

    @inline def withDescription(newValue: JsonOption[String]): ModifyGuildWelcomeScreenBody =
      objWithUndef(ModifyGuildWelcomeScreenBody, "description", newValue)

    override def values: Seq[() => Any] = Seq(() => enabled, () => welcomeChannels, () => description)
  }
  object ModifyGuildWelcomeScreenBody extends DiscordObjectCompanion[ModifyGuildWelcomeScreenBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildWelcomeScreenBody =
      new ModifyGuildWelcomeScreenBody(json, cache)

    /**
      * @param enabled
      *   Whether the welcome screen is enabled
      * @param welcomeChannels
      *   Channels linked in the welcome screen and their display options
      * @param description
      *   The server description to show in the welcome screen
      */
    def make20(
        enabled: JsonOption[Boolean] = JsonUndefined(Some("enabled")),
        welcomeChannels: JsonOption[Seq[WelcomeScreen.WelcomeScreenChannel]] = JsonUndefined(Some("welcome_channels")),
        description: JsonOption[String] = JsonUndefined(Some("description"))
    ): ModifyGuildWelcomeScreenBody =
      makeRawFromFields("enabled" :=? enabled, "welcome_channels" :=? welcomeChannels, "description" :=? description)
  }

  /**
    * Modify the guild's Welcome Screen. Requires the MANAGE_GUILD permission.
    * Returns the updated Welcome Screen object. May fire a Guild Update Gateway
    * event.
    */
  def modifyGuildWelcomeScreen(
      guildId: GuildId,
      body: ModifyGuildWelcomeScreenBody,
      reason: Option[String]
  ): Request[ModifyGuildWelcomeScreenBody, WelcomeScreen] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "welcome-screen")
        .toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /** Returns the Onboarding object for the guild. */
  def getGuildOnboarding(guildId: GuildId): Request[Unit, GuildOnboarding] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "onboarding")
        .toRequest(Method.GET)
    )

  class ModifyGuildOnboardingBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Prompts shown during onboarding and in customize community */
    @inline def prompts: Seq[GuildOnboarding.OnboardingPrompt] =
      selectDynamic[Seq[GuildOnboarding.OnboardingPrompt]]("prompts")

    @inline def withPrompts(newValue: Seq[GuildOnboarding.OnboardingPrompt]): ModifyGuildOnboardingBody =
      objWith(ModifyGuildOnboardingBody, "prompts", newValue)

    /** Channel IDs that members get opted into automatically */
    @inline def defaultChannelIds: Seq[GuildChannelId] = selectDynamic[Seq[GuildChannelId]]("default_channel_ids")

    @inline def withDefaultChannelIds(newValue: Seq[GuildChannelId]): ModifyGuildOnboardingBody =
      objWith(ModifyGuildOnboardingBody, "default_channel_ids", newValue)

    /** Whether onboarding is enabled in the guild */
    @inline def enabled: Boolean = selectDynamic[Boolean]("enabled")

    @inline def withEnabled(newValue: Boolean): ModifyGuildOnboardingBody =
      objWith(ModifyGuildOnboardingBody, "enabled", newValue)

    /** Current mode of onboarding */
    @inline def mode: GuildOnboarding.OnboardingMode = selectDynamic[GuildOnboarding.OnboardingMode]("mode")

    @inline def withMode(newValue: GuildOnboarding.OnboardingMode): ModifyGuildOnboardingBody =
      objWith(ModifyGuildOnboardingBody, "mode", newValue)

    override def values: Seq[() => Any] = Seq(() => prompts, () => defaultChannelIds, () => enabled, () => mode)
  }
  object ModifyGuildOnboardingBody extends DiscordObjectCompanion[ModifyGuildOnboardingBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildOnboardingBody =
      new ModifyGuildOnboardingBody(json, cache)

    /**
      * @param prompts
      *   Prompts shown during onboarding and in customize community
      * @param defaultChannelIds
      *   Channel IDs that members get opted into automatically
      * @param enabled
      *   Whether onboarding is enabled in the guild
      * @param mode
      *   Current mode of onboarding
      */
    def make20(
        prompts: Seq[GuildOnboarding.OnboardingPrompt],
        defaultChannelIds: Seq[GuildChannelId],
        enabled: Boolean,
        mode: GuildOnboarding.OnboardingMode
    ): ModifyGuildOnboardingBody = makeRawFromFields(
      "prompts"             := prompts,
      "default_channel_ids" := defaultChannelIds,
      "enabled"             := enabled,
      "mode"                := mode
    )
  }

  /**
    * Modifies the onboarding configuration of the guild. Returns a 200 with the
    * Onboarding object for the guild. Requires the MANAGE_GUILD and
    * MANAGE_ROLES permissions.
    */
  def modifyGuildOnboarding(
      guildId: GuildId,
      body: ModifyGuildOnboardingBody,
      reason: Option[String]
  ): Request[ModifyGuildOnboardingBody, GuildOnboarding] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "onboarding")
        .toRequest(Method.PUT),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class ModifyCurrentUserVoiceStateBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** The id of the channel the user is currently in */
    @inline def channelId: UndefOr[StageChannelId] = selectDynamic[UndefOr[StageChannelId]]("channel_id")

    @inline def withChannelId(newValue: UndefOr[StageChannelId]): ModifyCurrentUserVoiceStateBody =
      objWithUndef(ModifyCurrentUserVoiceStateBody, "channel_id", newValue)

    /** Toggles the user's suppress state */
    @inline def suppress: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("suppress")

    @inline def withSuppress(newValue: UndefOr[Boolean]): ModifyCurrentUserVoiceStateBody =
      objWithUndef(ModifyCurrentUserVoiceStateBody, "suppress", newValue)

    /** Sets the user's request to speak */
    @inline def requestToSpeakTimestamp: JsonOption[OffsetDateTime] =
      selectDynamic[JsonOption[OffsetDateTime]]("request_to_speak_timestamp")

    @inline def withRequestToSpeakTimestamp(newValue: JsonOption[OffsetDateTime]): ModifyCurrentUserVoiceStateBody =
      objWithUndef(ModifyCurrentUserVoiceStateBody, "request_to_speak_timestamp", newValue)

    override def values: Seq[() => Any] = Seq(() => channelId, () => suppress, () => requestToSpeakTimestamp)
  }
  object ModifyCurrentUserVoiceStateBody extends DiscordObjectCompanion[ModifyCurrentUserVoiceStateBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyCurrentUserVoiceStateBody =
      new ModifyCurrentUserVoiceStateBody(json, cache)

    /**
      * @param channelId
      *   The id of the channel the user is currently in
      * @param suppress
      *   Toggles the user's suppress state
      * @param requestToSpeakTimestamp
      *   Sets the user's request to speak
      */
    def make20(
        channelId: UndefOr[StageChannelId] = UndefOrUndefined(Some("channel_id")),
        suppress: UndefOr[Boolean] = UndefOrUndefined(Some("suppress")),
        requestToSpeakTimestamp: JsonOption[OffsetDateTime] = JsonUndefined(Some("request_to_speak_timestamp"))
    ): ModifyCurrentUserVoiceStateBody = makeRawFromFields(
      "channel_id"                 :=? channelId,
      "suppress"                   :=? suppress,
      "request_to_speak_timestamp" :=? requestToSpeakTimestamp
    )
  }

  /**
    * Updates the current user's voice state. Returns 204 No Content on success.
    * Fires a Voice State Update Gateway event.
    */
  def modifyCurrentUserVoiceState(
      guildId: GuildId,
      body: ModifyCurrentUserVoiceStateBody
  ): Request[ModifyCurrentUserVoiceStateBody, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "voice-states" / "@me")
        .toRequest(Method.PATCH),
      params = body
    )

  class ModifyUserVoiceStateBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** The id of the channel the user is currently in */
    @inline def channelId: UndefOr[StageChannelId] = selectDynamic[UndefOr[StageChannelId]]("channel_id")

    @inline def withChannelId(newValue: UndefOr[StageChannelId]): ModifyUserVoiceStateBody =
      objWithUndef(ModifyUserVoiceStateBody, "channel_id", newValue)

    /** Toggles the user's suppress state */
    @inline def suppress: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("suppress")

    @inline def withSuppress(newValue: UndefOr[Boolean]): ModifyUserVoiceStateBody =
      objWithUndef(ModifyUserVoiceStateBody, "suppress", newValue)

    override def values: Seq[() => Any] = Seq(() => channelId, () => suppress)
  }
  object ModifyUserVoiceStateBody extends DiscordObjectCompanion[ModifyUserVoiceStateBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyUserVoiceStateBody =
      new ModifyUserVoiceStateBody(json, cache)

    /**
      * @param channelId
      *   The id of the channel the user is currently in
      * @param suppress
      *   Toggles the user's suppress state
      */
    def make20(
        channelId: UndefOr[StageChannelId] = UndefOrUndefined(Some("channel_id")),
        suppress: UndefOr[Boolean] = UndefOrUndefined(Some("suppress"))
    ): ModifyUserVoiceStateBody = makeRawFromFields("channel_id" :=? channelId, "suppress" :=? suppress)
  }

  /**
    * Updates another user's voice state. Fires a Voice State Update Gateway
    * event.
    */
  def modifyUserVoiceState(
      guildId: GuildId,
      userId: UserId,
      body: ModifyUserVoiceStateBody
  ): Request[ModifyUserVoiceStateBody, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "voice-states" / Parameters[UserId]("userId", userId)).toRequest(Method.PATCH),
      params = body
    )
}
