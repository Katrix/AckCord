//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.requests

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/requests/StickerRequests.yaml

import ackcord.data._
import ackcord.data.base._
import io.circe.Json
import sttp.model.Method

object StickerRequests {

  /** Returns a sticker object for the given sticker ID. */
  def getSticker(
      stickerId: Snowflake[Sticker]
  ): Request[Unit, Sticker] =
    Request.restRequest(
      route = (Route.Empty / "stickers" / Parameters[Snowflake[Sticker]]("stickerId", stickerId)).toRequest(Method.GET)
    )

  class ListNitroStickerPacksResult(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {
    @inline def stickerPacks: Seq[Sticker.StickerPack] = selectDynamic[Seq[Sticker.StickerPack]]("sticker_packs")

    override def values: Seq[() => Any] = Seq(() => stickerPacks)
  }
  object ListNitroStickerPacksResult extends DiscordObjectCompanion[ListNitroStickerPacksResult] {
    def makeRaw(json: Json, cache: Map[String, Any]): ListNitroStickerPacksResult =
      new ListNitroStickerPacksResult(json, cache)

    def make20(stickerPacks: Seq[Sticker.StickerPack]): ListNitroStickerPacksResult = makeRawFromFields(
      "sticker_packs" := stickerPacks
    )

  }

  /** Returns the list of sticker packs available to Nitro subscribers. */
  val listNitroStickerPacks: Request[Unit, ListNitroStickerPacksResult] =
    Request.restRequest(
      route = (Route.Empty / "sticker-packs").toRequest(Method.GET)
    )

  /**
    * Returns an array of sticker objects for the given guild. Includes user
    * fields if the bot has the MANAGE_GUILD_EXPRESSIONS permission.
    */
  def listGuildStickers(
      guildId: GuildId
  ): Request[Unit, Seq[Sticker]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "stickers")
        .toRequest(Method.GET)
    )

  /**
    * Returns a sticker object for the given guild and sticker IDs. Includes the
    * user field if the bot has the MANAGE_GUILD_EXPRESSIONS permission.
    */
  def getGuildSticker(
      guildId: GuildId,
      stickerId: Snowflake[Sticker]
  ): Request[Unit, Sticker] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "stickers" / Parameters[
        Snowflake[Sticker]
      ]("stickerId", stickerId)).toRequest(Method.GET)
    )

  class CreateGuildStickerBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Name of the sticker (2-30 characters) */
    @inline def name: String = selectDynamic[String]("name")

    /** Description of the sticker (empty or 2-100 characters) */
    @inline def description: Option[String] = selectDynamic[Option[String]]("description")

    /** Autocomplete/suggestion tags for the sticker (max 200 characters) */
    @inline def tags: String = selectDynamic[String]("tags")

    override def values: Seq[() => Any] = Seq(() => name, () => description, () => tags)
  }
  object CreateGuildStickerBody extends DiscordObjectCompanion[CreateGuildStickerBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildStickerBody = new CreateGuildStickerBody(json, cache)

    /**
      * @param name
      *   Name of the sticker (2-30 characters)
      * @param description
      *   Description of the sticker (empty or 2-100 characters)
      * @param tags
      *   Autocomplete/suggestion tags for the sticker (max 200 characters)
      */
    def make20(name: String, description: Option[String], tags: String): CreateGuildStickerBody =
      makeRawFromFields("name" := name, "description" := description, "tags" := tags)

  }

  /**
    * * Create a new sticker for the guild. Send a multipart/form-data body.
    * Requires the MANAGE_GUILD_EXPRESSIONS permission. Returns the new sticker
    * object on success. Fires a Guild Stickers Update Gateway event.
    *
    * Every guilds has five free sticker slots by default, and each Boost level
    * will grant access to more slots.
    */
  def createGuildSticker[MPR](
      guildId: GuildId,
      body: CreateGuildStickerBody,
      reason: Option[String],
      file: EncodeBody.Multipart[_, MPR]
  ): ComplexRequest[CreateGuildStickerBody, Sticker, MPR, Any] =
    Request.complexRestRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "stickers")
        .toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r)),
      requestBody = Some(
        EncodeBody.MultipartBody(
          EncodeBody.Multipart.StringPart(body.name, "name"),
          Seq(
            EncodeBody.Multipart.StringPart(body.tags, "tags"),
            file.withName("file")
          ) ++ body.description.toList.map(d => EncodeBody.Multipart.StringPart(d, "description"))
        )
      )
    )

  class ModifyGuildStickerBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Name of the sticker (2-30 characters) */
    @inline def name: UndefOr[String] = selectDynamic[UndefOr[String]]("name")

    /** Description of the sticker (2-100 characters) */
    @inline def description: JsonOption[String] = selectDynamic[JsonOption[String]]("description")

    /** Autocomplete/suggestion tags for the sticker (max 200 characters) */
    @inline def tags: UndefOr[String] = selectDynamic[UndefOr[String]]("tags")

    override def values: Seq[() => Any] = Seq(() => name, () => description, () => tags)
  }
  object ModifyGuildStickerBody extends DiscordObjectCompanion[ModifyGuildStickerBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildStickerBody = new ModifyGuildStickerBody(json, cache)

    /**
      * @param name
      *   Name of the sticker (2-30 characters)
      * @param description
      *   Description of the sticker (2-100 characters)
      * @param tags
      *   Autocomplete/suggestion tags for the sticker (max 200 characters)
      */
    def make20(
        name: UndefOr[String] = UndefOrUndefined,
        description: JsonOption[String] = JsonUndefined,
        tags: UndefOr[String] = UndefOrUndefined
    ): ModifyGuildStickerBody = makeRawFromFields("name" :=? name, "description" :=? description, "tags" :=? tags)

  }

  /**
    * Modify the given sticker. Requires the MANAGE_GUILD_EXPRESSIONS
    * permission. Returns the updated sticker object on success. Fires a Guild
    * Stickers Update Gateway event.
    */
  def modifyGuildSticker(
      guildId: GuildId,
      stickerId: Snowflake[Sticker],
      body: ModifyGuildStickerBody,
      reason: Option[String]
  ): Request[ModifyGuildStickerBody, Sticker] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "stickers" / Parameters[
        Snowflake[Sticker]
      ]("stickerId", stickerId)).toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Delete the given sticker. Requires the MANAGE_GUILD_EXPRESSIONS
    * permission. Returns 204 No Content on success. Fires a Guild Stickers
    * Update Gateway event.
    */
  def deleteGuildSticker(
      guildId: GuildId,
      stickerId: Snowflake[Sticker],
      reason: Option[String]
  ): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "stickers" / Parameters[
        Snowflake[Sticker]
      ]("stickerId", stickerId)).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

}
