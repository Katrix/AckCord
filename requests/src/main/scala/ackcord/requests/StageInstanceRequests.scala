//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.requests

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/requests/StageInstanceRequests.yaml

import ackcord.data._
import ackcord.data.base._
import io.circe.Json
import sttp.model.Method

object StageInstanceRequests {

  class CreateStageInstanceBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** The id of the Stage channel */
    @inline def channelId: StageChannelId = selectDynamic[StageChannelId]("channel_id")

    @inline def withChannelId(newValue: StageChannelId): CreateStageInstanceBody =
      objWith(CreateStageInstanceBody, "channel_id", newValue)

    /** The topic of the Stage instance (1-120 characters) */
    @inline def topic: String = selectDynamic[String]("topic")

    @inline def withTopic(newValue: String): CreateStageInstanceBody =
      objWith(CreateStageInstanceBody, "topic", newValue)

    /** The privacy level of the Stage instance (default GUILD_ONLY) */
    @inline def privacyLevel: UndefOr[StageInstance.StagePrivacyLevel] =
      selectDynamic[UndefOr[StageInstance.StagePrivacyLevel]]("privacy_level")

    @inline def withPrivacyLevel(newValue: UndefOr[StageInstance.StagePrivacyLevel]): CreateStageInstanceBody =
      objWithUndef(CreateStageInstanceBody, "privacy_level", newValue)

    /** Notify @everyone that a Stage instance has started */
    @inline def sendStartNotification: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("send_start_notification")

    @inline def withSendStartNotification(newValue: UndefOr[Boolean]): CreateStageInstanceBody =
      objWithUndef(CreateStageInstanceBody, "send_start_notification", newValue)

    override def values: Seq[() => Any] =
      Seq(() => channelId, () => topic, () => privacyLevel, () => sendStartNotification)
  }
  object CreateStageInstanceBody extends DiscordObjectCompanion[CreateStageInstanceBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateStageInstanceBody =
      new CreateStageInstanceBody(json, cache)

    /**
      * @param channelId
      *   The id of the Stage channel
      * @param topic
      *   The topic of the Stage instance (1-120 characters)
      * @param privacyLevel
      *   The privacy level of the Stage instance (default GUILD_ONLY)
      * @param sendStartNotification
      *   Notify @everyone that a Stage instance has started
      */
    def make20(
        channelId: StageChannelId,
        topic: String,
        privacyLevel: UndefOr[StageInstance.StagePrivacyLevel] = UndefOrUndefined,
        sendStartNotification: UndefOr[Boolean] = UndefOrUndefined
    ): CreateStageInstanceBody = makeRawFromFields(
      "channel_id"               := channelId,
      "topic"                    := topic,
      "privacy_level"           :=? privacyLevel,
      "send_start_notification" :=? sendStartNotification
    )
  }

  /**
    * Creates a new Stage instance associated to a Stage channel. Returns that
    * Stage instance. Fires a Stage Instance Create Gateway event.
    *
    * Requires the user to be a moderator of the Stage channel.
    */
  def createStageInstance(
      body: CreateStageInstanceBody,
      reason: Option[String]
  ): Request[CreateStageInstanceBody, StageInstance] =
    Request.restRequest(
      route = (Route.Empty / "stage-instances").toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Gets the stage instance associated with the Stage channel, if it exists.
    */
  def getStageInstance(channelId: ChannelId): Request[Unit, StageInstance] =
    Request.restRequest(
      route = (Route.Empty / "stage-instances" / Parameters[ChannelId]("channelId", channelId, major = true))
        .toRequest(Method.GET)
    )

  class ModifyStageInstanceBody(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** The topic of the Stage instance (1-120 characters) */
    @inline def topic: UndefOr[String] = selectDynamic[UndefOr[String]]("topic")

    @inline def withTopic(newValue: UndefOr[String]): ModifyStageInstanceBody =
      objWithUndef(ModifyStageInstanceBody, "topic", newValue)

    /** The privacy level of the Stage instance */
    @inline def privacyLevel: UndefOr[StageInstance.StagePrivacyLevel] =
      selectDynamic[UndefOr[StageInstance.StagePrivacyLevel]]("privacy_level")

    @inline def withPrivacyLevel(newValue: UndefOr[StageInstance.StagePrivacyLevel]): ModifyStageInstanceBody =
      objWithUndef(ModifyStageInstanceBody, "privacy_level", newValue)

    override def values: Seq[() => Any] = Seq(() => topic, () => privacyLevel)
  }
  object ModifyStageInstanceBody extends DiscordObjectCompanion[ModifyStageInstanceBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyStageInstanceBody =
      new ModifyStageInstanceBody(json, cache)

    /**
      * @param topic
      *   The topic of the Stage instance (1-120 characters)
      * @param privacyLevel
      *   The privacy level of the Stage instance
      */
    def make20(
        topic: UndefOr[String] = UndefOrUndefined,
        privacyLevel: UndefOr[StageInstance.StagePrivacyLevel] = UndefOrUndefined
    ): ModifyStageInstanceBody = makeRawFromFields("topic" :=? topic, "privacy_level" :=? privacyLevel)
  }

  /**
    * Updates fields of an existing Stage instance. Returns the updated Stage
    * instance. Fires a Stage Instance Update Gateway event.
    *
    * Requires the user to be a moderator of the Stage channel.
    */
  def modifyStageInstance(
      channelId: ChannelId,
      body: ModifyStageInstanceBody,
      reason: Option[String]
  ): Request[ModifyStageInstanceBody, StageInstance] =
    Request.restRequest(
      route = (Route.Empty / "stage-instances" / Parameters[ChannelId]("channelId", channelId, major = true))
        .toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  /**
    * Deletes the Stage instance. Returns 204 No Content. Fires a Stage Instance
    * Delete Gateway event.
    *
    * Requires the user to be a moderator of the Stage channel.
    */
  def deleteStageInstance(channelId: ChannelId, reason: Option[String]): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "stage-instances" / Parameters[ChannelId]("channelId", channelId, major = true))
        .toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )
}
