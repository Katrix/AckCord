//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.requests

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/requests/GuildScheduledEventRequests.yaml

import ackcord.data._
import ackcord.data.base._
import io.circe.Json
import sttp.model.Method

object GuildScheduledEventRequests {

  class ListGuildScheduledEventsQuery(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /**
      * Whether to include the number of users that will be notified by each
      * event
      */
    @inline def withUserCount: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_user_count")

    @inline def withWithUserCount(newValue: UndefOr[Boolean]): ListGuildScheduledEventsQuery =
      objWithUndef(ListGuildScheduledEventsQuery, "with_user_count", newValue)

    override def values: Seq[() => Any] = Seq(() => withUserCount)
  }
  object ListGuildScheduledEventsQuery extends DiscordObjectCompanion[ListGuildScheduledEventsQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): ListGuildScheduledEventsQuery =
      new ListGuildScheduledEventsQuery(json, cache)

    /**
      * @param withUserCount
      *   Whether to include the number of users that will be notified by each
      *   event
      */
    def make20(withUserCount: UndefOr[Boolean] = UndefOrUndefined): ListGuildScheduledEventsQuery =
      makeRawFromFields("with_user_count" :=? withUserCount)
  }

  def listGuildScheduledEvents(
      guildId: GuildId,
      query: ListGuildScheduledEventsQuery = ListGuildScheduledEventsQuery.make20()
  ): Request[Unit, Seq[GuildScheduledEvent]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "scheduled-events" +? Parameters.query("with_user_count", query.withUserCount)).toRequest(Method.GET)
    )

  class CreateGuildScheduledEventBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** The channel id of the scheduled event */
    @inline def channelId: GuildChannelId = selectDynamic[GuildChannelId]("channel_id")

    @inline def withChannelId(newValue: GuildChannelId): CreateGuildScheduledEventBody =
      objWith(CreateGuildScheduledEventBody, "channel_id", newValue)

    /** The entity metadata of the scheduled event */
    @inline def entityMetadata: GuildScheduledEvent.GuildScheduledEventEntityMetadata =
      selectDynamic[GuildScheduledEvent.GuildScheduledEventEntityMetadata]("entity_metadata")

    @inline def withEntityMetadata(
        newValue: GuildScheduledEvent.GuildScheduledEventEntityMetadata
    ): CreateGuildScheduledEventBody = objWith(CreateGuildScheduledEventBody, "entity_metadata", newValue)

    /** The name of the scheduled event */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): CreateGuildScheduledEventBody =
      objWith(CreateGuildScheduledEventBody, "name", newValue)

    /** The privacy level of the scheduled event */
    @inline def privacyLevel: GuildScheduledEvent.GuildScheduledEventPrivacyLevel =
      selectDynamic[GuildScheduledEvent.GuildScheduledEventPrivacyLevel]("privacy_level")

    @inline def withPrivacyLevel(
        newValue: GuildScheduledEvent.GuildScheduledEventPrivacyLevel
    ): CreateGuildScheduledEventBody = objWith(CreateGuildScheduledEventBody, "privacy_level", newValue)

    /** The time to schedule the scheduled event */
    @inline def scheduledStartTime: OffsetDateTime = selectDynamic[OffsetDateTime]("scheduled_start_time")

    @inline def withScheduledStartTime(newValue: OffsetDateTime): CreateGuildScheduledEventBody =
      objWith(CreateGuildScheduledEventBody, "scheduled_start_time", newValue)

    /** The time when the scheduled event is scheduled to end */
    @inline def scheduledEndTime: UndefOr[OffsetDateTime] = selectDynamic[UndefOr[OffsetDateTime]]("scheduled_end_time")

    @inline def withScheduledEndTime(newValue: UndefOr[OffsetDateTime]): CreateGuildScheduledEventBody =
      objWithUndef(CreateGuildScheduledEventBody, "scheduled_end_time", newValue)

    /** The description of the scheduled event */
    @inline def description: UndefOr[String] = selectDynamic[UndefOr[String]]("description")

    @inline def withDescription(newValue: UndefOr[String]): CreateGuildScheduledEventBody =
      objWithUndef(CreateGuildScheduledEventBody, "description", newValue)

    /** The entity type of the scheduled event */
    @inline def entityType: GuildScheduledEvent.GuildScheduledEventEntityType =
      selectDynamic[GuildScheduledEvent.GuildScheduledEventEntityType]("entity_type")

    @inline def withEntityType(
        newValue: GuildScheduledEvent.GuildScheduledEventEntityType
    ): CreateGuildScheduledEventBody = objWith(CreateGuildScheduledEventBody, "entity_type", newValue)

    /** The cover image of the scheduled event */
    @inline def image: UndefOr[String] = selectDynamic[UndefOr[String]]("image")

    @inline def withImage(newValue: UndefOr[String]): CreateGuildScheduledEventBody =
      objWithUndef(CreateGuildScheduledEventBody, "image", newValue)

    override def values: Seq[() => Any] = Seq(
      () => channelId,
      () => entityMetadata,
      () => name,
      () => privacyLevel,
      () => scheduledStartTime,
      () => scheduledEndTime,
      () => description,
      () => entityType,
      () => image
    )
  }
  object CreateGuildScheduledEventBody extends DiscordObjectCompanion[CreateGuildScheduledEventBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildScheduledEventBody =
      new CreateGuildScheduledEventBody(json, cache)

    /**
      * @param channelId
      *   The channel id of the scheduled event
      * @param entityMetadata
      *   The entity metadata of the scheduled event
      * @param name
      *   The name of the scheduled event
      * @param privacyLevel
      *   The privacy level of the scheduled event
      * @param scheduledStartTime
      *   The time to schedule the scheduled event
      * @param scheduledEndTime
      *   The time when the scheduled event is scheduled to end
      * @param description
      *   The description of the scheduled event
      * @param entityType
      *   The entity type of the scheduled event
      * @param image
      *   The cover image of the scheduled event
      */
    def make20(
        channelId: GuildChannelId,
        entityMetadata: GuildScheduledEvent.GuildScheduledEventEntityMetadata,
        name: String,
        privacyLevel: GuildScheduledEvent.GuildScheduledEventPrivacyLevel,
        scheduledStartTime: OffsetDateTime,
        scheduledEndTime: UndefOr[OffsetDateTime] = UndefOrUndefined,
        description: UndefOr[String] = UndefOrUndefined,
        entityType: GuildScheduledEvent.GuildScheduledEventEntityType,
        image: UndefOr[String] = UndefOrUndefined
    ): CreateGuildScheduledEventBody = makeRawFromFields(
      "channel_id"           := channelId,
      "entity_metadata"      := entityMetadata,
      "name"                 := name,
      "privacy_level"        := privacyLevel,
      "scheduled_start_time" := scheduledStartTime,
      "scheduled_end_time"  :=? scheduledEndTime,
      "description"         :=? description,
      "entity_type"          := entityType,
      "image"               :=? image
    )
  }

  def createGuildScheduledEvent(
      guildId: GuildId,
      body: CreateGuildScheduledEventBody,
      reason: Option[String]
  ): Request[CreateGuildScheduledEventBody, GuildScheduledEvent] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId]("guildId", guildId, major = true) / "scheduled-events")
        .toRequest(Method.POST),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  class GetGuildScheduledEventQuery(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /**
      * Whether to include the number of users that will be notified by each
      * event
      */
    @inline def withUserCount: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_user_count")

    @inline def withWithUserCount(newValue: UndefOr[Boolean]): GetGuildScheduledEventQuery =
      objWithUndef(GetGuildScheduledEventQuery, "with_user_count", newValue)

    override def values: Seq[() => Any] = Seq(() => withUserCount)
  }
  object GetGuildScheduledEventQuery extends DiscordObjectCompanion[GetGuildScheduledEventQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildScheduledEventQuery =
      new GetGuildScheduledEventQuery(json, cache)

    /**
      * @param withUserCount
      *   Whether to include the number of users that will be notified by each
      *   event
      */
    def make20(withUserCount: UndefOr[Boolean] = UndefOrUndefined): GetGuildScheduledEventQuery =
      makeRawFromFields("with_user_count" :=? withUserCount)
  }

  def getGuildScheduledEvent(
      guildId: GuildId,
      guildScheduledEventId: GuildScheduledEventId,
      query: GetGuildScheduledEventQuery = GetGuildScheduledEventQuery.make20()
  ): Request[Unit, GuildScheduledEvent] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "scheduled-events" / Parameters[GuildScheduledEventId](
        "guildScheduledEventId",
        guildScheduledEventId
      ) +? Parameters.query("with_user_count", query.withUserCount)).toRequest(Method.GET)
    )

  class ModifyGuildScheduledEventBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** The channel id of the scheduled event */
    @inline def channelId: UndefOr[GuildChannelId] = selectDynamic[UndefOr[GuildChannelId]]("channel_id")

    @inline def withChannelId(newValue: UndefOr[GuildChannelId]): ModifyGuildScheduledEventBody =
      objWithUndef(ModifyGuildScheduledEventBody, "channel_id", newValue)

    /** The entity metadata of the scheduled event */
    @inline def entityMetadata: UndefOr[GuildScheduledEvent.GuildScheduledEventEntityMetadata] =
      selectDynamic[UndefOr[GuildScheduledEvent.GuildScheduledEventEntityMetadata]]("entity_metadata")

    @inline def withEntityMetadata(
        newValue: UndefOr[GuildScheduledEvent.GuildScheduledEventEntityMetadata]
    ): ModifyGuildScheduledEventBody = objWithUndef(ModifyGuildScheduledEventBody, "entity_metadata", newValue)

    /** The name of the scheduled event */
    @inline def name: UndefOr[String] = selectDynamic[UndefOr[String]]("name")

    @inline def withName(newValue: UndefOr[String]): ModifyGuildScheduledEventBody =
      objWithUndef(ModifyGuildScheduledEventBody, "name", newValue)

    /** The privacy level of the scheduled event */
    @inline def privacyLevel: UndefOr[GuildScheduledEvent.GuildScheduledEventPrivacyLevel] =
      selectDynamic[UndefOr[GuildScheduledEvent.GuildScheduledEventPrivacyLevel]]("privacy_level")

    @inline def withPrivacyLevel(
        newValue: UndefOr[GuildScheduledEvent.GuildScheduledEventPrivacyLevel]
    ): ModifyGuildScheduledEventBody = objWithUndef(ModifyGuildScheduledEventBody, "privacy_level", newValue)

    /** The time to schedule the scheduled event */
    @inline def scheduledStartTime: UndefOr[OffsetDateTime] =
      selectDynamic[UndefOr[OffsetDateTime]]("scheduled_start_time")

    @inline def withScheduledStartTime(newValue: UndefOr[OffsetDateTime]): ModifyGuildScheduledEventBody =
      objWithUndef(ModifyGuildScheduledEventBody, "scheduled_start_time", newValue)

    /** The time when the scheduled event is scheduled to end */
    @inline def scheduledEndTime: UndefOr[OffsetDateTime] = selectDynamic[UndefOr[OffsetDateTime]]("scheduled_end_time")

    @inline def withScheduledEndTime(newValue: UndefOr[OffsetDateTime]): ModifyGuildScheduledEventBody =
      objWithUndef(ModifyGuildScheduledEventBody, "scheduled_end_time", newValue)

    /** The description of the scheduled event */
    @inline def description: UndefOr[String] = selectDynamic[UndefOr[String]]("description")

    @inline def withDescription(newValue: UndefOr[String]): ModifyGuildScheduledEventBody =
      objWithUndef(ModifyGuildScheduledEventBody, "description", newValue)

    /** The entity type of the scheduled event */
    @inline def entityType: UndefOr[GuildScheduledEvent.GuildScheduledEventEntityType] =
      selectDynamic[UndefOr[GuildScheduledEvent.GuildScheduledEventEntityType]]("entity_type")

    @inline def withEntityType(
        newValue: UndefOr[GuildScheduledEvent.GuildScheduledEventEntityType]
    ): ModifyGuildScheduledEventBody = objWithUndef(ModifyGuildScheduledEventBody, "entity_type", newValue)

    /** The status of the scheduled event */
    @inline def status: UndefOr[GuildScheduledEvent.GuildScheduledEventStatus] =
      selectDynamic[UndefOr[GuildScheduledEvent.GuildScheduledEventStatus]]("status")

    @inline def withStatus(
        newValue: UndefOr[GuildScheduledEvent.GuildScheduledEventStatus]
    ): ModifyGuildScheduledEventBody = objWithUndef(ModifyGuildScheduledEventBody, "status", newValue)

    /** The cover image of the scheduled event */
    @inline def image: UndefOr[String] = selectDynamic[UndefOr[String]]("image")

    @inline def withImage(newValue: UndefOr[String]): ModifyGuildScheduledEventBody =
      objWithUndef(ModifyGuildScheduledEventBody, "image", newValue)

    override def values: Seq[() => Any] = Seq(
      () => channelId,
      () => entityMetadata,
      () => name,
      () => privacyLevel,
      () => scheduledStartTime,
      () => scheduledEndTime,
      () => description,
      () => entityType,
      () => status,
      () => image
    )
  }
  object ModifyGuildScheduledEventBody extends DiscordObjectCompanion[ModifyGuildScheduledEventBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): ModifyGuildScheduledEventBody =
      new ModifyGuildScheduledEventBody(json, cache)

    /**
      * @param channelId
      *   The channel id of the scheduled event
      * @param entityMetadata
      *   The entity metadata of the scheduled event
      * @param name
      *   The name of the scheduled event
      * @param privacyLevel
      *   The privacy level of the scheduled event
      * @param scheduledStartTime
      *   The time to schedule the scheduled event
      * @param scheduledEndTime
      *   The time when the scheduled event is scheduled to end
      * @param description
      *   The description of the scheduled event
      * @param entityType
      *   The entity type of the scheduled event
      * @param status
      *   The status of the scheduled event
      * @param image
      *   The cover image of the scheduled event
      */
    def make20(
        channelId: UndefOr[GuildChannelId] = UndefOrUndefined,
        entityMetadata: UndefOr[GuildScheduledEvent.GuildScheduledEventEntityMetadata] = UndefOrUndefined,
        name: UndefOr[String] = UndefOrUndefined,
        privacyLevel: UndefOr[GuildScheduledEvent.GuildScheduledEventPrivacyLevel] = UndefOrUndefined,
        scheduledStartTime: UndefOr[OffsetDateTime] = UndefOrUndefined,
        scheduledEndTime: UndefOr[OffsetDateTime] = UndefOrUndefined,
        description: UndefOr[String] = UndefOrUndefined,
        entityType: UndefOr[GuildScheduledEvent.GuildScheduledEventEntityType] = UndefOrUndefined,
        status: UndefOr[GuildScheduledEvent.GuildScheduledEventStatus] = UndefOrUndefined,
        image: UndefOr[String] = UndefOrUndefined
    ): ModifyGuildScheduledEventBody = makeRawFromFields(
      "channel_id"           :=? channelId,
      "entity_metadata"      :=? entityMetadata,
      "name"                 :=? name,
      "privacy_level"        :=? privacyLevel,
      "scheduled_start_time" :=? scheduledStartTime,
      "scheduled_end_time"   :=? scheduledEndTime,
      "description"          :=? description,
      "entity_type"          :=? entityType,
      "status"               :=? status,
      "image"                :=? image
    )
  }

  def modifyGuildScheduledEvent(
      guildId: GuildId,
      guildScheduledEventId: GuildScheduledEventId,
      body: ModifyGuildScheduledEventBody,
      reason: Option[String]
  ): Request[ModifyGuildScheduledEventBody, GuildScheduledEvent] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "scheduled-events" / Parameters[GuildScheduledEventId]("guildScheduledEventId", guildScheduledEventId))
        .toRequest(Method.PATCH),
      params = body,
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

  def deleteGuildScheduledEvent(
      guildId: GuildId,
      guildScheduledEventId: GuildScheduledEventId
  ): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "scheduled-events" / Parameters[GuildScheduledEventId]("guildScheduledEventId", guildScheduledEventId))
        .toRequest(Method.DELETE)
    )

  class GetGuildScheduledEventUsersQuery(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** The maximum number of users to return */
    @inline def limit: UndefOr[Int] = selectDynamic[UndefOr[Int]]("limit")

    @inline def withLimit(newValue: UndefOr[Int]): GetGuildScheduledEventUsersQuery =
      objWithUndef(GetGuildScheduledEventUsersQuery, "limit", newValue)

    /** The user id to offset the returned users by */
    @inline def after: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("after")

    @inline def withAfter(newValue: UndefOr[UserId]): GetGuildScheduledEventUsersQuery =
      objWithUndef(GetGuildScheduledEventUsersQuery, "after", newValue)

    /** The user id to offset the returned users by */
    @inline def before: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("before")

    @inline def withBefore(newValue: UndefOr[UserId]): GetGuildScheduledEventUsersQuery =
      objWithUndef(GetGuildScheduledEventUsersQuery, "before", newValue)

    /** Whether to include the guild members of the returned users */
    @inline def withMember: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_member")

    @inline def withWithMember(newValue: UndefOr[Boolean]): GetGuildScheduledEventUsersQuery =
      objWithUndef(GetGuildScheduledEventUsersQuery, "with_member", newValue)

    override def values: Seq[() => Any] = Seq(() => limit, () => after, () => before, () => withMember)
  }
  object GetGuildScheduledEventUsersQuery extends DiscordObjectCompanion[GetGuildScheduledEventUsersQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildScheduledEventUsersQuery =
      new GetGuildScheduledEventUsersQuery(json, cache)

    /**
      * @param limit
      *   The maximum number of users to return
      * @param after
      *   The user id to offset the returned users by
      * @param before
      *   The user id to offset the returned users by
      * @param withMember
      *   Whether to include the guild members of the returned users
      */
    def make20(
        limit: UndefOr[Int] = UndefOrUndefined,
        after: UndefOr[UserId] = UndefOrUndefined,
        before: UndefOr[UserId] = UndefOrUndefined,
        withMember: UndefOr[Boolean] = UndefOrUndefined
    ): GetGuildScheduledEventUsersQuery =
      makeRawFromFields("limit" :=? limit, "after" :=? after, "before" :=? before, "with_member" :=? withMember)
  }

  def getGuildScheduledEventUsers(
      guildId: GuildId,
      guildScheduledEventId: GuildScheduledEventId,
      query: GetGuildScheduledEventUsersQuery = GetGuildScheduledEventUsersQuery.make20()
  ): Request[Unit, Seq[GuildScheduledEventUser]] =
    Request.restRequest(
      route = (Route.Empty / "guilds" / Parameters[GuildId](
        "guildId",
        guildId,
        major = true
      ) / "scheduled-events" / Parameters[GuildScheduledEventId](
        "guildScheduledEventId",
        guildScheduledEventId
      ) / "users" +? Parameters.query("limit", query.limit) +? Parameters.query("after", query.after) +? Parameters
        .query("before", query.before) +? Parameters.query("with_member", query.withMember)).toRequest(Method.GET)
    )
}
