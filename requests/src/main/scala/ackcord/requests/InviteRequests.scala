//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.requests

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/requests/InviteRequests.yaml

import ackcord.data._
import ackcord.data.base._
import io.circe.Json
import sttp.model.Method

object InviteRequests {

  class GetInviteQuery(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Whether the invite should contain approximate member counts */
    @inline def withCounts: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_counts")

    /** Whether the invite should contain the expiration date */
    @inline def withExpiration: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_expiration")

    /** The guild scheduled event to include with the invite */
    @inline def guildScheduledEventId: UndefOr[Snowflake[GuildScheduledEvent]] =
      selectDynamic[UndefOr[Snowflake[GuildScheduledEvent]]]("guild_scheduled_event_id")

    override def values: Seq[() => Any] = Seq(() => withCounts, () => withExpiration, () => guildScheduledEventId)
  }
  object GetInviteQuery extends DiscordObjectCompanion[GetInviteQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetInviteQuery = new GetInviteQuery(json, cache)

    /**
      * @param withCounts
      *   Whether the invite should contain approximate member counts
      * @param withExpiration
      *   Whether the invite should contain the expiration date
      * @param guildScheduledEventId
      *   The guild scheduled event to include with the invite
      */
    def make20(
        withCounts: UndefOr[Boolean] = UndefOrUndefined,
        withExpiration: UndefOr[Boolean] = UndefOrUndefined,
        guildScheduledEventId: UndefOr[Snowflake[GuildScheduledEvent]] = UndefOrUndefined
    ): GetInviteQuery = makeRawFromFields(
      "with_counts"              :=? withCounts,
      "with_expiration"          :=? withExpiration,
      "guild_scheduled_event_id" :=? guildScheduledEventId
    )

  }

  /** Returns an invite object for the given code. */
  def getInvite(
      inviteCode: String,
      query: GetInviteQuery = GetInviteQuery.make20()
  ): Request[Unit, Invite] =
    Request.restRequest(
      route = (Route.Empty / Parameters[String]("inviteCode", inviteCode) +? Parameters.query(
        "with_counts",
        query.withCounts
      ) +? Parameters.query("with_expiration", query.withExpiration) +? Parameters
        .query("guild_scheduled_event_id", query.guildScheduledEventId)).toRequest(Method.GET)
    )

  /**
    * Delete an invite. Requires the MANAGE_CHANNELS permission on the channel
    * this invite belongs to, or MANAGE_GUILD to remove any invite across the
    * guild. Returns an invite object on success. Fires an Invite Delete Gateway
    * event.
    */
  def deleteInvite(
      inviteCode: String,
      reason: Option[String]
  ): Request[Unit, Invite] =
    Request.restRequest(
      route = (Route.Empty / Parameters[String]("inviteCode", inviteCode)).toRequest(Method.DELETE),
      extraHeaders = reason.fold(Map.empty[String, String])(r => Map("X-Audit-Log-Reason" -> r))
    )

}
