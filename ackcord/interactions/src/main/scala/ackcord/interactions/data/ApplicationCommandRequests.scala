//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.interactions.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/interactions/data/ApplicationCommandRequests.yaml

import ackcord.data._
import ackcord.data.base._
import ackcord.requests._
import io.circe.Json
import sttp.model.Method

object ApplicationCommandRequests {

  class GetGlobalApplicationCommandsQuery(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /**
      * Whether to include full localization dictionaries (name_localizations
      * and description_localizations) in the returned objects, instead of the
      * name_localized and description_localized fields. Default false.
      */
    @inline def withLocalizations: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_localizations")

    @inline def withWithLocalizations(newValue: UndefOr[Boolean]): GetGlobalApplicationCommandsQuery =
      objWithUndef(GetGlobalApplicationCommandsQuery, "with_localizations", newValue)

    override def values: Seq[() => Any] = Seq(() => withLocalizations)
  }
  object GetGlobalApplicationCommandsQuery extends DiscordObjectCompanion[GetGlobalApplicationCommandsQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGlobalApplicationCommandsQuery =
      new GetGlobalApplicationCommandsQuery(json, cache)

    /**
      * @param withLocalizations
      *   Whether to include full localization dictionaries (name_localizations
      *   and description_localizations) in the returned objects, instead of the
      *   name_localized and description_localized fields. Default false.
      */
    def make20(
        withLocalizations: UndefOr[Boolean] = UndefOrUndefined(Some("with_localizations"))
    ): GetGlobalApplicationCommandsQuery = makeRawFromFields("with_localizations" :=? withLocalizations)
  }

  /**
    * Fetch all of the global commands for your application. Returns an array of
    * application command objects.
    */
  def getGlobalApplicationCommands(
      applicationId: ApplicationId,
      query: GetGlobalApplicationCommandsQuery = GetGlobalApplicationCommandsQuery.make20()
  ): Request[Unit, Seq[ApplicationCommand]] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "commands" +? Parameters.query("with_localizations", query.withLocalizations)).toRequest(Method.GET)
    )

  class CreateGlobalApplicationCommandBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Name of command, 1-32 characters */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): CreateGlobalApplicationCommandBody =
      objWith(CreateGlobalApplicationCommandBody, "name", newValue)

    /**
      * Localization dictionary for the name field. Values follow the same
      * restrictions as name
      */
    @inline def nameLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("name_localizations")

    @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): CreateGlobalApplicationCommandBody =
      objWithUndef(CreateGlobalApplicationCommandBody, "name_localizations", newValue)

    /** 1-100 character description for CHAT_INPUT commands */
    @inline def description: UndefOr[String] = selectDynamic[UndefOr[String]]("description")

    @inline def withDescription(newValue: UndefOr[String]): CreateGlobalApplicationCommandBody =
      objWithUndef(CreateGlobalApplicationCommandBody, "description", newValue)

    /**
      * Localization dictionary for the description field. Values follow the
      * same restrictions as description
      */
    @inline def descriptionLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("description_localizations")

    @inline def withDescriptionLocalizations(
        newValue: JsonOption[Map[String, String]]
    ): CreateGlobalApplicationCommandBody =
      objWithUndef(CreateGlobalApplicationCommandBody, "description_localizations", newValue)

    /** The parameters for the command */
    @inline def options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] =
      selectDynamic[UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]]("options")

    @inline def withOptions(
        newValue: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]
    ): CreateGlobalApplicationCommandBody = objWithUndef(CreateGlobalApplicationCommandBody, "options", newValue)

    /** Set of permissions represented as a bit set */
    @inline def defaultMemberPermissions: JsonOption[Permissions] =
      selectDynamic[JsonOption[Permissions]]("default_member_permissions")

    @inline def withDefaultMemberPermissions(newValue: JsonOption[Permissions]): CreateGlobalApplicationCommandBody =
      objWithUndef(CreateGlobalApplicationCommandBody, "default_member_permissions", newValue)

    /**
      * Indicates whether the command is available in DMs with the app, only for
      * globally-scoped commands. By default, commands are visible.
      */
    @inline def dmPermission: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("dm_permission")

    @inline def withDmPermission(newValue: JsonOption[Boolean]): CreateGlobalApplicationCommandBody =
      objWithUndef(CreateGlobalApplicationCommandBody, "dm_permission", newValue)

    /** Type of command, defaults 1 if not set */
    @inline def tpe: UndefOr[ApplicationCommand.ApplicationCommandType] =
      selectDynamic[UndefOr[ApplicationCommand.ApplicationCommandType]]("type")

    @inline def withTpe(
        newValue: UndefOr[ApplicationCommand.ApplicationCommandType]
    ): CreateGlobalApplicationCommandBody = objWithUndef(CreateGlobalApplicationCommandBody, "type", newValue)

    /** Indicates whether the command is age-restricted */
    @inline def nsfw: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("nsfw")

    @inline def withNsfw(newValue: UndefOr[Boolean]): CreateGlobalApplicationCommandBody =
      objWithUndef(CreateGlobalApplicationCommandBody, "nsfw", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => nameLocalizations,
      () => description,
      () => descriptionLocalizations,
      () => options,
      () => defaultMemberPermissions,
      () => dmPermission,
      () => tpe,
      () => nsfw
    )
  }
  object CreateGlobalApplicationCommandBody extends DiscordObjectCompanion[CreateGlobalApplicationCommandBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGlobalApplicationCommandBody =
      new CreateGlobalApplicationCommandBody(json, cache)

    /**
      * @param name
      *   Name of command, 1-32 characters
      * @param nameLocalizations
      *   Localization dictionary for the name field. Values follow the same
      *   restrictions as name
      * @param description
      *   1-100 character description for CHAT_INPUT commands
      * @param descriptionLocalizations
      *   Localization dictionary for the description field. Values follow the
      *   same restrictions as description
      * @param options
      *   The parameters for the command
      * @param defaultMemberPermissions
      *   Set of permissions represented as a bit set
      * @param dmPermission
      *   Indicates whether the command is available in DMs with the app, only
      *   for globally-scoped commands. By default, commands are visible.
      * @param tpe
      *   Type of command, defaults 1 if not set
      * @param nsfw
      *   Indicates whether the command is age-restricted
      */
    def make20(
        name: String,
        nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
        description: UndefOr[String] = UndefOrUndefined(Some("description")),
        descriptionLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("description_localizations")),
        options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] = UndefOrUndefined(Some("options")),
        defaultMemberPermissions: JsonOption[Permissions] = JsonUndefined(Some("default_member_permissions")),
        dmPermission: JsonOption[Boolean] = JsonUndefined(Some("dm_permission")),
        tpe: UndefOr[ApplicationCommand.ApplicationCommandType] = UndefOrUndefined(Some("tpe")),
        nsfw: UndefOr[Boolean] = UndefOrUndefined(Some("nsfw"))
    ): CreateGlobalApplicationCommandBody = makeRawFromFields(
      "name"                        := name,
      "name_localizations"         :=? nameLocalizations,
      "description"                :=? description,
      "description_localizations"  :=? descriptionLocalizations,
      "options"                    :=? options,
      "default_member_permissions" :=? defaultMemberPermissions,
      "dm_permission"              :=? dmPermission,
      "type"                       :=? tpe,
      "nsfw"                       :=? nsfw
    )
  }

  /**
    * Create a new global command. Returns 201 if a command with the same name
    * does not already exist, or a 200 if it does (in which case the previous
    * command will be overwritten). Both responses include an application
    * command object.
    */
  def createGlobalApplicationCommand(
      applicationId: ApplicationId,
      body: CreateGlobalApplicationCommandBody
  ): Request[CreateGlobalApplicationCommandBody, ApplicationCommand] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId]("applicationId", applicationId) / "commands")
        .toRequest(Method.POST),
      params = body
    )

  /**
    * Fetch a global command for your application. Returns an application
    * command object.
    */
  def getGlobalApplicationCommand(
      applicationId: ApplicationId,
      commandId: CommandId
  ): Request[Unit, ApplicationCommand] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "commands" / Parameters[CommandId]("commandId", commandId)).toRequest(Method.GET)
    )

  class EditGlobalApplicationCommandBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Name of command, 1-32 characters */
    @inline def name: UndefOr[String] = selectDynamic[UndefOr[String]]("name")

    @inline def withName(newValue: UndefOr[String]): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "name", newValue)

    /**
      * Localization dictionary for the name field. Values follow the same
      * restrictions as name
      */
    @inline def nameLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("name_localizations")

    @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "name_localizations", newValue)

    /** 1-100 character description */
    @inline def description: UndefOr[String] = selectDynamic[UndefOr[String]]("description")

    @inline def withDescription(newValue: UndefOr[String]): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "description", newValue)

    /**
      * Localization dictionary for the description field. Values follow the
      * same restrictions as description
      */
    @inline def descriptionLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("description_localizations")

    @inline def withDescriptionLocalizations(
        newValue: JsonOption[Map[String, String]]
    ): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "description_localizations", newValue)

    /** The parameters for the command */
    @inline def options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] =
      selectDynamic[UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]]("options")

    @inline def withOptions(
        newValue: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]
    ): EditGlobalApplicationCommandBody = objWithUndef(EditGlobalApplicationCommandBody, "options", newValue)

    /** Set of permissions represented as a bit set */
    @inline def defaultMemberPermissions: JsonOption[Permissions] =
      selectDynamic[JsonOption[Permissions]]("default_member_permissions")

    @inline def withDefaultMemberPermissions(newValue: JsonOption[Permissions]): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "default_member_permissions", newValue)

    /**
      * Indicates whether the command is available in DMs with the app, only for
      * globally-scoped commands. By default, commands are visible.
      */
    @inline def dmPermission: JsonOption[Boolean] = selectDynamic[JsonOption[Boolean]]("dm_permission")

    @inline def withDmPermission(newValue: JsonOption[Boolean]): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "dm_permission", newValue)

    /** Indicates whether the command is age-restricted */
    @inline def nsfw: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("nsfw")

    @inline def withNsfw(newValue: UndefOr[Boolean]): EditGlobalApplicationCommandBody =
      objWithUndef(EditGlobalApplicationCommandBody, "nsfw", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => nameLocalizations,
      () => description,
      () => descriptionLocalizations,
      () => options,
      () => defaultMemberPermissions,
      () => dmPermission,
      () => nsfw
    )
  }
  object EditGlobalApplicationCommandBody extends DiscordObjectCompanion[EditGlobalApplicationCommandBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): EditGlobalApplicationCommandBody =
      new EditGlobalApplicationCommandBody(json, cache)

    /**
      * @param name
      *   Name of command, 1-32 characters
      * @param nameLocalizations
      *   Localization dictionary for the name field. Values follow the same
      *   restrictions as name
      * @param description
      *   1-100 character description
      * @param descriptionLocalizations
      *   Localization dictionary for the description field. Values follow the
      *   same restrictions as description
      * @param options
      *   The parameters for the command
      * @param defaultMemberPermissions
      *   Set of permissions represented as a bit set
      * @param dmPermission
      *   Indicates whether the command is available in DMs with the app, only
      *   for globally-scoped commands. By default, commands are visible.
      * @param nsfw
      *   Indicates whether the command is age-restricted
      */
    def make20(
        name: UndefOr[String] = UndefOrUndefined(Some("name")),
        nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
        description: UndefOr[String] = UndefOrUndefined(Some("description")),
        descriptionLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("description_localizations")),
        options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] = UndefOrUndefined(Some("options")),
        defaultMemberPermissions: JsonOption[Permissions] = JsonUndefined(Some("default_member_permissions")),
        dmPermission: JsonOption[Boolean] = JsonUndefined(Some("dm_permission")),
        nsfw: UndefOr[Boolean] = UndefOrUndefined(Some("nsfw"))
    ): EditGlobalApplicationCommandBody = makeRawFromFields(
      "name"                       :=? name,
      "name_localizations"         :=? nameLocalizations,
      "description"                :=? description,
      "description_localizations"  :=? descriptionLocalizations,
      "options"                    :=? options,
      "default_member_permissions" :=? defaultMemberPermissions,
      "dm_permission"              :=? dmPermission,
      "nsfw"                       :=? nsfw
    )
  }

  /**
    * Edit a global command. Returns 200 and an application command object. All
    * fields are optional, but any fields provided will entirely overwrite the
    * existing values of those fields.
    */
  def editGlobalApplicationCommand(
      applicationId: ApplicationId,
      commandId: CommandId,
      body: EditGlobalApplicationCommandBody
  ): Request[EditGlobalApplicationCommandBody, ApplicationCommand] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "commands" / Parameters[CommandId]("commandId", commandId)).toRequest(Method.PATCH),
      params = body
    )

  /** Deletes a global command. Returns 204 No Content on success. */
  def deleteGlobalApplicationCommand(applicationId: ApplicationId, commandId: CommandId): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "commands" / Parameters[CommandId]("commandId", commandId)).toRequest(Method.DELETE)
    )

  /**
    * Takes a list of application commands, overwriting the existing global
    * command list for this application. Returns 200 and a list of application
    * command objects. Commands that do not already exist will count toward
    * daily application command create limits.
    */
  def bulkOverwriteGlobalApplicationCommands(
      applicationId: ApplicationId,
      body: Seq[ApplicationCommand]
  ): Request[Seq[ApplicationCommand], Seq[ApplicationCommand]] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId]("applicationId", applicationId) / "commands")
        .toRequest(Method.PUT),
      params = body
    )

  class GetGuildApplicationCommandsQuery(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /**
      * Whether to include full localization dictionaries (name_localizations
      * and description_localizations) in the returned objects, instead of the
      * name_localized and description_localized fields. Default false.
      */
    @inline def withLocalizations: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("with_localizations")

    @inline def withWithLocalizations(newValue: UndefOr[Boolean]): GetGuildApplicationCommandsQuery =
      objWithUndef(GetGuildApplicationCommandsQuery, "with_localizations", newValue)

    override def values: Seq[() => Any] = Seq(() => withLocalizations)
  }
  object GetGuildApplicationCommandsQuery extends DiscordObjectCompanion[GetGuildApplicationCommandsQuery] {
    def makeRaw(json: Json, cache: Map[String, Any]): GetGuildApplicationCommandsQuery =
      new GetGuildApplicationCommandsQuery(json, cache)

    /**
      * @param withLocalizations
      *   Whether to include full localization dictionaries (name_localizations
      *   and description_localizations) in the returned objects, instead of the
      *   name_localized and description_localized fields. Default false.
      */
    def make20(
        withLocalizations: UndefOr[Boolean] = UndefOrUndefined(Some("with_localizations"))
    ): GetGuildApplicationCommandsQuery = makeRawFromFields("with_localizations" :=? withLocalizations)
  }

  /**
    * Fetch all of the guild commands for your application for a specific guild.
    * Returns an array of application command objects.
    */
  def getGuildApplicationCommands(
      applicationId: ApplicationId,
      guildId: GuildId,
      query: GetGuildApplicationCommandsQuery = GetGuildApplicationCommandsQuery.make20()
  ): Request[Unit, Seq[ApplicationCommand]] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" +? Parameters
        .query("with_localizations", query.withLocalizations)).toRequest(Method.GET)
    )

  class CreateGuildApplicationCommandBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Name of command, 1-32 characters */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): CreateGuildApplicationCommandBody =
      objWith(CreateGuildApplicationCommandBody, "name", newValue)

    /**
      * Localization dictionary for the name field. Values follow the same
      * restrictions as name
      */
    @inline def nameLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("name_localizations")

    @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): CreateGuildApplicationCommandBody =
      objWithUndef(CreateGuildApplicationCommandBody, "name_localizations", newValue)

    /** 1-100 character description for CHAT_INPUT commands */
    @inline def description: UndefOr[String] = selectDynamic[UndefOr[String]]("description")

    @inline def withDescription(newValue: UndefOr[String]): CreateGuildApplicationCommandBody =
      objWithUndef(CreateGuildApplicationCommandBody, "description", newValue)

    /**
      * Localization dictionary for the description field. Values follow the
      * same restrictions as description
      */
    @inline def descriptionLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("description_localizations")

    @inline def withDescriptionLocalizations(
        newValue: JsonOption[Map[String, String]]
    ): CreateGuildApplicationCommandBody =
      objWithUndef(CreateGuildApplicationCommandBody, "description_localizations", newValue)

    /** Parameters for the command */
    @inline def options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] =
      selectDynamic[UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]]("options")

    @inline def withOptions(
        newValue: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]
    ): CreateGuildApplicationCommandBody = objWithUndef(CreateGuildApplicationCommandBody, "options", newValue)

    /** Set of permissions represented as a bit set */
    @inline def defaultMemberPermissions: JsonOption[Permissions] =
      selectDynamic[JsonOption[Permissions]]("default_member_permissions")

    @inline def withDefaultMemberPermissions(newValue: JsonOption[Permissions]): CreateGuildApplicationCommandBody =
      objWithUndef(CreateGuildApplicationCommandBody, "default_member_permissions", newValue)

    /** Type of command, defaults 1 if not set */
    @inline def tpe: UndefOr[ApplicationCommand.ApplicationCommandType] =
      selectDynamic[UndefOr[ApplicationCommand.ApplicationCommandType]]("type")

    @inline def withTpe(
        newValue: UndefOr[ApplicationCommand.ApplicationCommandType]
    ): CreateGuildApplicationCommandBody = objWithUndef(CreateGuildApplicationCommandBody, "type", newValue)

    /** Indicates whether the command is age-restricted */
    @inline def nsfw: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("nsfw")

    @inline def withNsfw(newValue: UndefOr[Boolean]): CreateGuildApplicationCommandBody =
      objWithUndef(CreateGuildApplicationCommandBody, "nsfw", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => nameLocalizations,
      () => description,
      () => descriptionLocalizations,
      () => options,
      () => defaultMemberPermissions,
      () => tpe,
      () => nsfw
    )
  }
  object CreateGuildApplicationCommandBody extends DiscordObjectCompanion[CreateGuildApplicationCommandBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): CreateGuildApplicationCommandBody =
      new CreateGuildApplicationCommandBody(json, cache)

    /**
      * @param name
      *   Name of command, 1-32 characters
      * @param nameLocalizations
      *   Localization dictionary for the name field. Values follow the same
      *   restrictions as name
      * @param description
      *   1-100 character description for CHAT_INPUT commands
      * @param descriptionLocalizations
      *   Localization dictionary for the description field. Values follow the
      *   same restrictions as description
      * @param options
      *   Parameters for the command
      * @param defaultMemberPermissions
      *   Set of permissions represented as a bit set
      * @param tpe
      *   Type of command, defaults 1 if not set
      * @param nsfw
      *   Indicates whether the command is age-restricted
      */
    def make20(
        name: String,
        nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
        description: UndefOr[String] = UndefOrUndefined(Some("description")),
        descriptionLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("description_localizations")),
        options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] = UndefOrUndefined(Some("options")),
        defaultMemberPermissions: JsonOption[Permissions] = JsonUndefined(Some("default_member_permissions")),
        tpe: UndefOr[ApplicationCommand.ApplicationCommandType] = UndefOrUndefined(Some("tpe")),
        nsfw: UndefOr[Boolean] = UndefOrUndefined(Some("nsfw"))
    ): CreateGuildApplicationCommandBody = makeRawFromFields(
      "name"                        := name,
      "name_localizations"         :=? nameLocalizations,
      "description"                :=? description,
      "description_localizations"  :=? descriptionLocalizations,
      "options"                    :=? options,
      "default_member_permissions" :=? defaultMemberPermissions,
      "type"                       :=? tpe,
      "nsfw"                       :=? nsfw
    )
  }

  /**
    * Create a new guild command. New guild commands will be available in the
    * guild immediately. Returns 201 if a command with the same name does not
    * already exist, or a 200 if it does (in which case the previous command
    * will be overwritten). Both responses include an application command
    * object.
    */
  def createGuildApplicationCommand(
      applicationId: ApplicationId,
      guildId: GuildId,
      body: CreateGuildApplicationCommandBody
  ): Request[CreateGuildApplicationCommandBody, ApplicationCommand] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands").toRequest(Method.POST),
      params = body
    )

  /**
    * Fetch a guild command for your application. Returns an application command
    * object.
    */
  def getGuildApplicationCommand(
      applicationId: ApplicationId,
      guildId: GuildId,
      commandId: CommandId
  ): Request[Unit, ApplicationCommand] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" / Parameters[CommandId](
        "commandId",
        commandId
      )).toRequest(Method.GET)
    )

  class EditGuildApplicationCommandBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Name of command, 1-32 characters */
    @inline def name: UndefOr[String] = selectDynamic[UndefOr[String]]("name")

    @inline def withName(newValue: UndefOr[String]): EditGuildApplicationCommandBody =
      objWithUndef(EditGuildApplicationCommandBody, "name", newValue)

    /**
      * Localization dictionary for the name field. Values follow the same
      * restrictions as name
      */
    @inline def nameLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("name_localizations")

    @inline def withNameLocalizations(newValue: JsonOption[Map[String, String]]): EditGuildApplicationCommandBody =
      objWithUndef(EditGuildApplicationCommandBody, "name_localizations", newValue)

    /** 1-100 character description */
    @inline def description: UndefOr[String] = selectDynamic[UndefOr[String]]("description")

    @inline def withDescription(newValue: UndefOr[String]): EditGuildApplicationCommandBody =
      objWithUndef(EditGuildApplicationCommandBody, "description", newValue)

    /**
      * Localization dictionary for the description field. Values follow the
      * same restrictions as description
      */
    @inline def descriptionLocalizations: JsonOption[Map[String, String]] =
      selectDynamic[JsonOption[Map[String, String]]]("description_localizations")

    @inline def withDescriptionLocalizations(
        newValue: JsonOption[Map[String, String]]
    ): EditGuildApplicationCommandBody =
      objWithUndef(EditGuildApplicationCommandBody, "description_localizations", newValue)

    /** Parameters for the command */
    @inline def options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] =
      selectDynamic[UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]]("options")

    @inline def withOptions(
        newValue: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]]
    ): EditGuildApplicationCommandBody = objWithUndef(EditGuildApplicationCommandBody, "options", newValue)

    /** Set of permissions represented as a bit set */
    @inline def defaultMemberPermissions: JsonOption[Permissions] =
      selectDynamic[JsonOption[Permissions]]("default_member_permissions")

    @inline def withDefaultMemberPermissions(newValue: JsonOption[Permissions]): EditGuildApplicationCommandBody =
      objWithUndef(EditGuildApplicationCommandBody, "default_member_permissions", newValue)

    /** Indicates whether the command is age-restricted */
    @inline def nsfw: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("nsfw")

    @inline def withNsfw(newValue: UndefOr[Boolean]): EditGuildApplicationCommandBody =
      objWithUndef(EditGuildApplicationCommandBody, "nsfw", newValue)

    override def values: Seq[() => Any] = Seq(
      () => name,
      () => nameLocalizations,
      () => description,
      () => descriptionLocalizations,
      () => options,
      () => defaultMemberPermissions,
      () => nsfw
    )
  }
  object EditGuildApplicationCommandBody extends DiscordObjectCompanion[EditGuildApplicationCommandBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): EditGuildApplicationCommandBody =
      new EditGuildApplicationCommandBody(json, cache)

    /**
      * @param name
      *   Name of command, 1-32 characters
      * @param nameLocalizations
      *   Localization dictionary for the name field. Values follow the same
      *   restrictions as name
      * @param description
      *   1-100 character description
      * @param descriptionLocalizations
      *   Localization dictionary for the description field. Values follow the
      *   same restrictions as description
      * @param options
      *   Parameters for the command
      * @param defaultMemberPermissions
      *   Set of permissions represented as a bit set
      * @param nsfw
      *   Indicates whether the command is age-restricted
      */
    def make20(
        name: UndefOr[String] = UndefOrUndefined(Some("name")),
        nameLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("name_localizations")),
        description: UndefOr[String] = UndefOrUndefined(Some("description")),
        descriptionLocalizations: JsonOption[Map[String, String]] = JsonUndefined(Some("description_localizations")),
        options: UndefOr[Seq[ApplicationCommand.ApplicationCommandOption]] = UndefOrUndefined(Some("options")),
        defaultMemberPermissions: JsonOption[Permissions] = JsonUndefined(Some("default_member_permissions")),
        nsfw: UndefOr[Boolean] = UndefOrUndefined(Some("nsfw"))
    ): EditGuildApplicationCommandBody = makeRawFromFields(
      "name"                       :=? name,
      "name_localizations"         :=? nameLocalizations,
      "description"                :=? description,
      "description_localizations"  :=? descriptionLocalizations,
      "options"                    :=? options,
      "default_member_permissions" :=? defaultMemberPermissions,
      "nsfw"                       :=? nsfw
    )
  }

  /**
    * Edit a guild command. Updates for guild commands will be available
    * immediately. Returns 200 and an application command object. All fields are
    * optional, but any fields provided will entirely overwrite the existing
    * values of those fields.
    */
  def editGuildApplicationCommand(
      applicationId: ApplicationId,
      guildId: GuildId,
      commandId: CommandId,
      body: EditGuildApplicationCommandBody
  ): Request[EditGuildApplicationCommandBody, ApplicationCommand] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" / Parameters[CommandId](
        "commandId",
        commandId
      )).toRequest(Method.PATCH),
      params = body
    )

  /** Delete a guild command. Returns 204 No Content on success. */
  def deleteGuildApplicationCommand(
      applicationId: ApplicationId,
      guildId: GuildId,
      commandId: CommandId
  ): Request[Unit, Unit] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" / Parameters[CommandId](
        "commandId",
        commandId
      )).toRequest(Method.DELETE)
    )

  /**
    * Takes a list of application commands, overwriting the existing command
    * list for this application for the targeted guild. Returns 200 and a list
    * of application command objects.
    */
  def bulkOverwriteGuildApplicationCommands(
      applicationId: ApplicationId,
      guildId: GuildId,
      body: Seq[ApplicationCommand]
  ): Request[Seq[ApplicationCommand], Seq[ApplicationCommand]] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands").toRequest(Method.PUT),
      params = body
    )

  /**
    * Fetches permissions for all commands for your application in a guild.
    * Returns an array of guild application command permissions objects.
    */
  def getGuildApplicationCommandPermissions(
      applicationId: ApplicationId,
      guildId: GuildId
  ): Request[Unit, Seq[ApplicationCommand.GuildApplicationCommandPermissions]] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" / "permissions").toRequest(Method.GET)
    )

  /**
    * Fetches permissions for a specific command for your application in a
    * guild. Returns a guild application command permissions object.
    */
  def getApplicationCommandPermissions(
      applicationId: ApplicationId,
      guildId: GuildId,
      commandId: CommandId
  ): Request[Unit, ApplicationCommand.GuildApplicationCommandPermissions] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" / Parameters[CommandId](
        "commandId",
        commandId
      ) / "permissions").toRequest(Method.GET)
    )

  class EditApplicationCommandPermissionsBody(json: Json, cache: Map[String, Any] = Map.empty)
      extends DiscordObject(json, cache) {

    /** Permissions for the command in the guild */
    @inline def permissions: Seq[ApplicationCommand.GuildApplicationCommandPermissions.ApplicationCommandPermissions] =
      selectDynamic[Seq[ApplicationCommand.GuildApplicationCommandPermissions.ApplicationCommandPermissions]](
        "permissions"
      )

    @inline def withPermissions(
        newValue: Seq[ApplicationCommand.GuildApplicationCommandPermissions.ApplicationCommandPermissions]
    ): EditApplicationCommandPermissionsBody = objWith(EditApplicationCommandPermissionsBody, "permissions", newValue)

    override def values: Seq[() => Any] = Seq(() => permissions)
  }
  object EditApplicationCommandPermissionsBody extends DiscordObjectCompanion[EditApplicationCommandPermissionsBody] {
    def makeRaw(json: Json, cache: Map[String, Any]): EditApplicationCommandPermissionsBody =
      new EditApplicationCommandPermissionsBody(json, cache)

    /**
      * @param permissions
      *   Permissions for the command in the guild
      */
    def make20(
        permissions: Seq[ApplicationCommand.GuildApplicationCommandPermissions.ApplicationCommandPermissions]
    ): EditApplicationCommandPermissionsBody = makeRawFromFields("permissions" := permissions)
  }

  /**
    * Edits command permissions for a specific command for your application in a
    * guild and returns a guild application command permissions object. Fires an
    * Application Command Permissions Update Gateway event.
    *
    * You can add up to 100 permission overwrites for a command.
    */
  def editApplicationCommandPermissions(
      applicationId: ApplicationId,
      guildId: GuildId,
      commandId: CommandId,
      body: EditApplicationCommandPermissionsBody
  ): Request[EditApplicationCommandPermissionsBody, ApplicationCommand.GuildApplicationCommandPermissions] =
    Request.restRequest(
      route = (Route.Empty / "applications" / Parameters[ApplicationId](
        "applicationId",
        applicationId
      ) / "guilds" / Parameters[GuildId]("guildId", guildId) / "commands" / Parameters[CommandId](
        "commandId",
        commandId
      ) / "permissions").toRequest(Method.PUT),
      params = body
    )
}
