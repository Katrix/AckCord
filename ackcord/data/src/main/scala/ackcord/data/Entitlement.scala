//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/Entitlement.yaml

import java.time.OffsetDateTime

import ackcord.data.base._
import io.circe.Json

class Entitlement(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** ID of the entitlement */
  @inline def id: Snowflake[Entitlement] = selectDynamic[Snowflake[Entitlement]]("id")

  @inline def withId(newValue: Snowflake[Entitlement]): Entitlement = objWith(Entitlement, "id", newValue)

  /** ID of the SKU */
  @inline def skuId: RawSnowflake = selectDynamic[RawSnowflake]("sku_id")

  @inline def withSkuId(newValue: RawSnowflake): Entitlement = objWith(Entitlement, "sku_id", newValue)

  /** ID of the user that is granted access to the entitlement's sku */
  @inline def userId: UndefOr[UserId] = selectDynamic[UndefOr[UserId]]("user_id")

  @inline def withUserId(newValue: UndefOr[UserId]): Entitlement = objWithUndef(Entitlement, "user_id", newValue)

  /** ID of the guild that is granted access to the entitlement's sku */
  @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")

  @inline def withGuildId(newValue: UndefOr[GuildId]): Entitlement = objWithUndef(Entitlement, "guild_id", newValue)

  /** ID of the parent application */
  @inline def applicationId: ApplicationId = selectDynamic[ApplicationId]("application_id")

  @inline def withApplicationId(newValue: ApplicationId): Entitlement =
    objWith(Entitlement, "application_id", newValue)

  /** Type of entitlement */
  @inline def tpe: Entitlement.EntitlementType = selectDynamic[Entitlement.EntitlementType]("type")

  @inline def withTpe(newValue: Entitlement.EntitlementType): Entitlement =
    objWith(Entitlement, "type", newValue)

  /**
    * Not applicable for App Subscriptions. Subscriptions are not consumed and
    * will be false
    */
  @inline def consumed: Boolean = selectDynamic[Boolean]("consumed")

  @inline def withConsumed(newValue: Boolean): Entitlement = objWith(Entitlement, "consumed", newValue)

  /**
    * Start date at which the entitlement is valid. Not present when using test
    * entitlements.
    */
  @inline def startsAt: UndefOr[OffsetDateTime] = selectDynamic[UndefOr[OffsetDateTime]]("starts_at")

  @inline def withStartsAt(newValue: UndefOr[OffsetDateTime]): Entitlement =
    objWithUndef(Entitlement, "starts_at", newValue)

  /**
    * Date at which the entitlement is no longer valid. Not present when using
    * test entitlements.
    */
  @inline def endsAt: UndefOr[OffsetDateTime] = selectDynamic[UndefOr[OffsetDateTime]]("ends_at")

  @inline def withEndsAt(newValue: UndefOr[OffsetDateTime]): Entitlement =
    objWithUndef(Entitlement, "ends_at", newValue)

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => skuId,
    () => userId,
    () => guildId,
    () => applicationId,
    () => tpe,
    () => consumed,
    () => startsAt,
    () => endsAt
  )
}
object Entitlement extends DiscordObjectCompanion[Entitlement] {
  def makeRaw(json: Json, cache: Map[String, Any]): Entitlement = new Entitlement(json, cache)

  /**
    * @param id
    *   ID of the entitlement
    * @param skuId
    *   ID of the SKU
    * @param userId
    *   ID of the user that is granted access to the entitlement's sku
    * @param guildId
    *   ID of the guild that is granted access to the entitlement's sku
    * @param applicationId
    *   ID of the parent application
    * @param tpe
    *   Type of entitlement
    * @param consumed
    *   Not applicable for App Subscriptions. Subscriptions are not consumed and
    *   will be false
    * @param startsAt
    *   Start date at which the entitlement is valid. Not present when using
    *   test entitlements.
    * @param endsAt
    *   Date at which the entitlement is no longer valid. Not present when using
    *   test entitlements.
    */
  def make20(
      id: Snowflake[Entitlement],
      skuId: RawSnowflake,
      userId: UndefOr[UserId] = UndefOrUndefined(Some("user_id")),
      guildId: UndefOr[GuildId] = UndefOrUndefined(Some("guild_id")),
      applicationId: ApplicationId,
      tpe: Entitlement.EntitlementType,
      consumed: Boolean,
      startsAt: UndefOr[OffsetDateTime] = UndefOrUndefined(Some("starts_at")),
      endsAt: UndefOr[OffsetDateTime] = UndefOrUndefined(Some("ends_at"))
  ): Entitlement = makeRawFromFields(
    "id"             := id,
    "sku_id"         := skuId,
    "user_id"       :=? userId,
    "guild_id"      :=? guildId,
    "application_id" := applicationId,
    "type"           := tpe,
    "consumed"       := consumed,
    "starts_at"     :=? startsAt,
    "ends_at"       :=? endsAt
  )

  sealed case class EntitlementType private (value: Int) extends DiscordEnum[Int]
  object EntitlementType                                 extends DiscordEnumCompanion[Int, EntitlementType] {

    /** Entitlement was purchased as an app subscription */
    val APPLICATION_SUBSCRIPTION: EntitlementType = EntitlementType(8)

    def unknown(value: Int): EntitlementType = new EntitlementType(value)

    val values: Seq[EntitlementType] = Seq(APPLICATION_SUBSCRIPTION)
  }
}
