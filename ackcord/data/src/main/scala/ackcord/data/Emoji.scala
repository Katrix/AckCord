//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/Emoji.yaml

import ackcord.data.base._
import io.circe.Json

/** A custom emoji */
class Emoji(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** The id of this emoji. */
  @inline def id: Option[EmojiId] = selectDynamic[Option[EmojiId]]("id")

  @inline def withId(newValue: Option[EmojiId]): Emoji = objWith(Emoji, "id", newValue)

  /** The name of this emoji. Can be None for reaction emojis */
  @inline def name: Option[String] = selectDynamic[Option[String]]("name")

  @inline def withName(newValue: Option[String]): Emoji = objWith(Emoji, "name", newValue)

  /** The roles this emoji is whitelisted to */
  @inline def roles: UndefOr[Seq[RoleId]] = selectDynamic[UndefOr[Seq[RoleId]]]("roles")

  @inline def withRoles(newValue: UndefOr[Seq[RoleId]]): Emoji = objWithUndef(Emoji, "roles", newValue)

  /** The user that created this emoji */
  @inline def user: UndefOr[User] = selectDynamic[UndefOr[User]]("user")

  @inline def withUser(newValue: UndefOr[User]): Emoji = objWithUndef(Emoji, "user", newValue)

  /** Whether this emoji must be wrapped in colons */
  @inline def requireColons: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("require_colons")

  @inline def withRequireColons(newValue: UndefOr[Boolean]): Emoji = objWithUndef(Emoji, "require_colons", newValue)

  /** Whether this emoji is managed */
  @inline def managed: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("managed")

  @inline def withManaged(newValue: UndefOr[Boolean]): Emoji = objWithUndef(Emoji, "managed", newValue)

  /** Whether this emoji is animated */
  @inline def animated: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("animated")

  @inline def withAnimated(newValue: UndefOr[Boolean]): Emoji = objWithUndef(Emoji, "animated", newValue)

  /**
    * Whether this emoji can be used, may be false due to loss of Server Boosts
    */
  @inline def available: UndefOr[Boolean] = selectDynamic[UndefOr[Boolean]]("available")

  @inline def withAvailable(newValue: UndefOr[Boolean]): Emoji = objWithUndef(Emoji, "available", newValue)

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => name,
    () => roles,
    () => user,
    () => requireColons,
    () => managed,
    () => animated,
    () => available
  )
}
object Emoji extends DiscordObjectCompanion[Emoji] {
  def makeRaw(json: Json, cache: Map[String, Any]): Emoji = new Emoji(json, cache)

  /**
    * @param id
    *   The id of this emoji.
    * @param name
    *   The name of this emoji. Can be None for reaction emojis
    * @param roles
    *   The roles this emoji is whitelisted to
    * @param user
    *   The user that created this emoji
    * @param requireColons
    *   Whether this emoji must be wrapped in colons
    * @param managed
    *   Whether this emoji is managed
    * @param animated
    *   Whether this emoji is animated
    * @param available
    *   Whether this emoji can be used, may be false due to loss of Server
    *   Boosts
    */
  def make20(
      id: Option[EmojiId],
      name: Option[String],
      roles: UndefOr[Seq[RoleId]] = UndefOrUndefined(Some("roles")),
      user: UndefOr[User] = UndefOrUndefined(Some("user")),
      requireColons: UndefOr[Boolean] = UndefOrUndefined(Some("require_colons")),
      managed: UndefOr[Boolean] = UndefOrUndefined(Some("managed")),
      animated: UndefOr[Boolean] = UndefOrUndefined(Some("animated")),
      available: UndefOr[Boolean] = UndefOrUndefined(Some("available"))
  ): Emoji = makeRawFromFields(
    "id"              := id,
    "name"            := name,
    "roles"          :=? roles,
    "user"           :=? user,
    "require_colons" :=? requireColons,
    "managed"        :=? managed,
    "animated"       :=? animated,
    "available"      :=? available
  )
}
