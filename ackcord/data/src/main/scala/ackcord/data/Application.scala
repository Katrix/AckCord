//noinspection ScalaWeakerAccess, ScalaUnusedSymbol, DuplicatedCode
package ackcord.data

// THIS FILE IS MACHINE GENERATED!
//
// Do not edit this file directly.
// Instead, edit the file generated/ackcord/data/Application.yaml

import ackcord.data.base._
import io.circe.Json

/** A Discord application */
class Application(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

  /** ID of the app */
  @inline def id: ApplicationId = selectDynamic[ApplicationId]("id")

  @inline def withId(newValue: ApplicationId): Application = objWith(Application, "id", newValue)

  /** Name of the app */
  @inline def name: String = selectDynamic[String]("name")

  @inline def withName(newValue: String): Application = objWith(Application, "name", newValue)

  /** Icon hash of the app */
  @inline def icon: Option[ImageHash] = selectDynamic[Option[ImageHash]]("icon")

  @inline def withIcon(newValue: Option[ImageHash]): Application = objWith(Application, "icon", newValue)

  /** Description of the app */
  @inline def description: String = selectDynamic[String]("description")

  @inline def withDescription(newValue: String): Application = objWith(Application, "description", newValue)

  /** List of RPC origin URLs, if RPC is enabled */
  @inline def rpcOrigins: UndefOr[Seq[String]] = selectDynamic[UndefOr[Seq[String]]]("rpc_origins")

  @inline def withRpcOrigins(newValue: UndefOr[Seq[String]]): Application =
    objWithUndef(Application, "rpc_origins", newValue)

  /** When false only the app owner can add the app to guilds */
  @inline def botPublic: Boolean = selectDynamic[Boolean]("bot_public")

  @inline def withBotPublic(newValue: Boolean): Application = objWith(Application, "bot_public", newValue)

  /**
    * When true the app's bot will only join upon completion of the full OAuth2
    * code grant flow
    */
  @inline def botRequireCodeGrant: Boolean = selectDynamic[Boolean]("bot_require_code_grant")

  @inline def withBotRequireCodeGrant(newValue: Boolean): Application =
    objWith(Application, "bot_require_code_grant", newValue)

  /** Partial user object for the bot user associated with the app */
  @inline def bot: User.Partial = selectDynamic[User.Partial]("bot")

  @inline def withBot(newValue: User.Partial): Application = objWith(Application, "bot", newValue)

  /** URL of the app's Terms of Service */
  @inline def termsOfServiceUrl: UndefOr[String] = selectDynamic[UndefOr[String]]("terms_of_service_url")

  @inline def withTermsOfServiceUrl(newValue: UndefOr[String]): Application =
    objWithUndef(Application, "terms_of_service_url", newValue)

  /** URL of the app's Privacy Policy */
  @inline def privacyPolicyUrl: UndefOr[String] = selectDynamic[UndefOr[String]]("privacy_policy_url")

  @inline def withPrivacyPolicyUrl(newValue: UndefOr[String]): Application =
    objWithUndef(Application, "privacy_policy_url", newValue)

  /** Partial user object for the owner of the app */
  @inline def owner: UndefOr[Application.ApplicationOwner] =
    selectDynamic[UndefOr[Application.ApplicationOwner]]("owner")

  @inline def withOwner(newValue: UndefOr[Application.ApplicationOwner]): Application =
    objWithUndef(Application, "owner", newValue)

  /**
    * Hex encoded key for verification in interactions and the GameSDK's
    * GetTicket
    */
  @inline def verifyKey: String = selectDynamic[String]("verify_key")

  @inline def withVerifyKey(newValue: String): Application = objWith(Application, "verify_key", newValue)

  /**
    * If the app belongs to a team, this will be a list of the members of that
    * team
    */
  @inline def team: Option[Application.Team] = selectDynamic[Option[Application.Team]]("team")

  @inline def withTeam(newValue: Option[Application.Team]): Application =
    objWith(Application, "team", newValue)

  /** Guild associated with the app. For example, a developer support server. */
  @inline def guildId: UndefOr[GuildId] = selectDynamic[UndefOr[GuildId]]("guild_id")

  @inline def withGuildId(newValue: UndefOr[GuildId]): Application = objWithUndef(Application, "guild_id", newValue)

  /** Partial object of the associated guild */
  @inline def guild: UndefOr[Application.ApplicationGuild] =
    selectDynamic[UndefOr[Application.ApplicationGuild]]("guild")

  @inline def withGuild(newValue: UndefOr[Application.ApplicationGuild]): Application =
    objWithUndef(Application, "guild", newValue)

  /**
    * If this app is a game sold on Discord, this field will be the id of the
    * "Game SKU" that is created, if exists
    */
  @inline def primarySkuId: UndefOr[RawSnowflake] = selectDynamic[UndefOr[RawSnowflake]]("primary_sku_id")

  @inline def withPrimarySkuId(newValue: UndefOr[RawSnowflake]): Application =
    objWithUndef(Application, "primary_sku_id", newValue)

  /**
    * If this app is a game sold on Discord, this field will be the URL slug
    * that links to the store page
    */
  @inline def slug: UndefOr[String] = selectDynamic[UndefOr[String]]("slug")

  @inline def withSlug(newValue: UndefOr[String]): Application = objWithUndef(Application, "slug", newValue)

  /** App's default rich presence invite cover image hash */
  @inline def coverImage: UndefOr[ImageHash] = selectDynamic[UndefOr[ImageHash]]("cover_image")

  @inline def withCoverImage(newValue: UndefOr[ImageHash]): Application =
    objWithUndef(Application, "cover_image", newValue)

  /** App's public flags */
  @inline def flags: UndefOr[Application.Flags] = selectDynamic[UndefOr[Application.Flags]]("flags")

  @inline def withFlags(newValue: UndefOr[Application.Flags]): Application =
    objWithUndef(Application, "flags", newValue)

  /** Approximate count of guilds the app has been added to */
  @inline def approximateGuildCount: UndefOr[Int] = selectDynamic[UndefOr[Int]]("approximate_guild_count")

  @inline def withApproximateGuildCount(newValue: UndefOr[Int]): Application =
    objWithUndef(Application, "approximate_guild_count", newValue)

  /** Array of redirect URIs for the app */
  @inline def redirectUris: UndefOr[Seq[String]] = selectDynamic[UndefOr[Seq[String]]]("redirect_uris")

  @inline def withRedirectUris(newValue: UndefOr[Seq[String]]): Application =
    objWithUndef(Application, "redirect_uris", newValue)

  /** Interactions endpoint URL for the app */
  @inline def interactionsEndpointUrl: UndefOr[String] = selectDynamic[UndefOr[String]]("interactions_endpoint_url")

  @inline def withInteractionsEndpointUrl(newValue: UndefOr[String]): Application =
    objWithUndef(Application, "interactions_endpoint_url", newValue)

  /** Role connection verification URL for the app */
  @inline def roleConnectionsVerificationUrl: UndefOr[String] =
    selectDynamic[UndefOr[String]]("role_connections_verification_url")

  @inline def withRoleConnectionsVerificationUrl(newValue: UndefOr[String]): Application =
    objWithUndef(Application, "role_connections_verification_url", newValue)

  /**
    * List of tags describing the content and functionality of the app. Max of 5
    * tags.
    */
  @inline def tags: UndefOr[Seq[String]] = selectDynamic[UndefOr[Seq[String]]]("tags")

  @inline def withTags(newValue: UndefOr[Seq[String]]): Application = objWithUndef(Application, "tags", newValue)

  /** Settings for the app's default in-app authorization link, if enabled */
  @inline def installParams: UndefOr[Application.InstallParams] =
    selectDynamic[UndefOr[Application.InstallParams]]("install_params")

  @inline def withInstallParams(newValue: UndefOr[Application.InstallParams]): Application =
    objWithUndef(Application, "install_params", newValue)

  /** Default custom authorization URL for the app, if enabled */
  @inline def customInstallUrl: UndefOr[String] = selectDynamic[UndefOr[String]]("custom_install_url")

  @inline def withCustomInstallUrl(newValue: UndefOr[String]): Application =
    objWithUndef(Application, "custom_install_url", newValue)

  override def values: Seq[() => Any] = Seq(
    () => id,
    () => name,
    () => icon,
    () => description,
    () => rpcOrigins,
    () => botPublic,
    () => botRequireCodeGrant,
    () => bot,
    () => termsOfServiceUrl,
    () => privacyPolicyUrl,
    () => owner,
    () => verifyKey,
    () => team,
    () => guildId,
    () => guild,
    () => primarySkuId,
    () => slug,
    () => coverImage,
    () => flags,
    () => approximateGuildCount,
    () => redirectUris,
    () => interactionsEndpointUrl,
    () => roleConnectionsVerificationUrl,
    () => tags,
    () => installParams,
    () => customInstallUrl
  )
}
object Application extends DiscordObjectCompanion[Application] {
  def makeRaw(json: Json, cache: Map[String, Any]): Application = new Application(json, cache)

  /**
    * @param id
    *   ID of the app
    * @param name
    *   Name of the app
    * @param icon
    *   Icon hash of the app
    * @param description
    *   Description of the app
    * @param rpcOrigins
    *   List of RPC origin URLs, if RPC is enabled
    * @param botPublic
    *   When false only the app owner can add the app to guilds
    * @param botRequireCodeGrant
    *   When true the app's bot will only join upon completion of the full
    *   OAuth2 code grant flow
    * @param bot
    *   Partial user object for the bot user associated with the app
    * @param termsOfServiceUrl
    *   URL of the app's Terms of Service
    * @param privacyPolicyUrl
    *   URL of the app's Privacy Policy
    * @param owner
    *   Partial user object for the owner of the app
    * @param verifyKey
    *   Hex encoded key for verification in interactions and the GameSDK's
    *   GetTicket
    * @param team
    *   If the app belongs to a team, this will be a list of the members of that
    *   team
    * @param guildId
    *   Guild associated with the app. For example, a developer support server.
    * @param guild
    *   Partial object of the associated guild
    * @param primarySkuId
    *   If this app is a game sold on Discord, this field will be the id of the
    *   "Game SKU" that is created, if exists
    * @param slug
    *   If this app is a game sold on Discord, this field will be the URL slug
    *   that links to the store page
    * @param coverImage
    *   App's default rich presence invite cover image hash
    * @param flags
    *   App's public flags
    * @param approximateGuildCount
    *   Approximate count of guilds the app has been added to
    * @param redirectUris
    *   Array of redirect URIs for the app
    * @param interactionsEndpointUrl
    *   Interactions endpoint URL for the app
    * @param roleConnectionsVerificationUrl
    *   Role connection verification URL for the app
    * @param tags
    *   List of tags describing the content and functionality of the app. Max of
    *   5 tags.
    * @param installParams
    *   Settings for the app's default in-app authorization link, if enabled
    * @param customInstallUrl
    *   Default custom authorization URL for the app, if enabled
    */
  def make20(
      id: ApplicationId,
      name: String,
      icon: Option[ImageHash],
      description: String,
      rpcOrigins: UndefOr[Seq[String]] = UndefOrUndefined(Some("rpc_origins")),
      botPublic: Boolean,
      botRequireCodeGrant: Boolean,
      bot: User.Partial,
      termsOfServiceUrl: UndefOr[String] = UndefOrUndefined(Some("terms_of_service_url")),
      privacyPolicyUrl: UndefOr[String] = UndefOrUndefined(Some("privacy_policy_url")),
      owner: UndefOr[Application.ApplicationOwner] = UndefOrUndefined(Some("owner")),
      verifyKey: String,
      team: Option[Application.Team],
      guildId: UndefOr[GuildId] = UndefOrUndefined(Some("guild_id")),
      guild: UndefOr[Application.ApplicationGuild] = UndefOrUndefined(Some("guild")),
      primarySkuId: UndefOr[RawSnowflake] = UndefOrUndefined(Some("primary_sku_id")),
      slug: UndefOr[String] = UndefOrUndefined(Some("slug")),
      coverImage: UndefOr[ImageHash] = UndefOrUndefined(Some("cover_image")),
      flags: UndefOr[Application.Flags] = UndefOrUndefined(Some("flags")),
      approximateGuildCount: UndefOr[Int] = UndefOrUndefined(Some("approximate_guild_count")),
      redirectUris: UndefOr[Seq[String]] = UndefOrUndefined(Some("redirect_uris")),
      interactionsEndpointUrl: UndefOr[String] = UndefOrUndefined(Some("interactions_endpoint_url")),
      roleConnectionsVerificationUrl: UndefOr[String] = UndefOrUndefined(Some("role_connections_verification_url")),
      tags: UndefOr[Seq[String]] = UndefOrUndefined(Some("tags")),
      installParams: UndefOr[Application.InstallParams] = UndefOrUndefined(Some("install_params")),
      customInstallUrl: UndefOr[String] = UndefOrUndefined(Some("custom_install_url"))
  ): Application = makeRawFromFields(
    "id"                                 := id,
    "name"                               := name,
    "icon"                               := icon,
    "description"                        := description,
    "rpc_origins"                       :=? rpcOrigins,
    "bot_public"                         := botPublic,
    "bot_require_code_grant"             := botRequireCodeGrant,
    "bot"                                := bot,
    "terms_of_service_url"              :=? termsOfServiceUrl,
    "privacy_policy_url"                :=? privacyPolicyUrl,
    "owner"                             :=? owner,
    "verify_key"                         := verifyKey,
    "team"                               := team,
    "guild_id"                          :=? guildId,
    "guild"                             :=? guild,
    "primary_sku_id"                    :=? primarySkuId,
    "slug"                              :=? slug,
    "cover_image"                       :=? coverImage,
    "flags"                             :=? flags,
    "approximate_guild_count"           :=? approximateGuildCount,
    "redirect_uris"                     :=? redirectUris,
    "interactions_endpoint_url"         :=? interactionsEndpointUrl,
    "role_connections_verification_url" :=? roleConnectionsVerificationUrl,
    "tags"                              :=? tags,
    "install_params"                    :=? installParams,
    "custom_install_url"                :=? customInstallUrl
  )

  sealed case class Flags private (value: Int) extends DiscordEnum[Int]
  object Flags extends DiscordEnumCompanion[Int, Flags] {
    val GATEWAY_PRESENCE: Flags = Flags(1 << 12)

    val GATEWAY_PRESENCE_LIMITED: Flags = Flags(1 << 13)

    val GATEWAY_GUILD_MEMBERS: Flags = Flags(1 << 14)

    val GATEWAY_GUILD_MEMBERS_LIMITED: Flags = Flags(1 << 15)

    val VERIFICATION_PENDING_GUILD_LIMIT: Flags = Flags(1 << 16)

    val EMBEDDED: Flags = Flags(1 << 17)

    val GATEWAY_MESSAGE_CONTENT: Flags = Flags(1 << 18)

    val GATEWAY_MESSAGE_CONTENT_LIMITED: Flags = Flags(1 << 19)

    val APPLICATION_COMMAND_BADGE: Flags = Flags(1 << 23)

    def unknown(value: Int): Flags = new Flags(value)

    val values: Seq[Flags] = Seq(
      GATEWAY_PRESENCE,
      GATEWAY_PRESENCE_LIMITED,
      GATEWAY_GUILD_MEMBERS,
      GATEWAY_GUILD_MEMBERS_LIMITED,
      VERIFICATION_PENDING_GUILD_LIMIT,
      EMBEDDED,
      GATEWAY_MESSAGE_CONTENT,
      GATEWAY_MESSAGE_CONTENT_LIMITED,
      APPLICATION_COMMAND_BADGE
    )

    implicit class FlagsBitFieldOps(private val here: Flags) extends AnyVal {

      def toInt: Int = here.value

      def ++(there: Flags): Flags = Flags(here.value | there.value)

      def --(there: Flags): Flags = Flags(here.value & ~there.value)

      def isNone: Boolean = here.value == 0
    }
  }

  class ApplicationGuild(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    override def values: Seq[() => Any] = Seq()
  }
  object ApplicationGuild extends DiscordObjectCompanion[ApplicationGuild] {
    def makeRaw(json: Json, cache: Map[String, Any]): ApplicationGuild =
      new ApplicationGuild(json, cache)

    def make20(): ApplicationGuild = makeRawFromFields()
  }

  class InstallParams(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Scopes to add the application to the server with */
    @inline def scopes: Seq[String] = selectDynamic[Seq[String]]("scopes")

    @inline def withScopes(newValue: Seq[String]): InstallParams = objWith(InstallParams, "scopes", newValue)

    /** Permissions to request for the bot role */
    @inline def permissions: Permissions = selectDynamic[Permissions]("permissions")

    @inline def withPermissions(newValue: Permissions): InstallParams =
      objWith(InstallParams, "permissions", newValue)

    override def values: Seq[() => Any] = Seq(() => scopes, () => permissions)
  }
  object InstallParams extends DiscordObjectCompanion[InstallParams] {
    def makeRaw(json: Json, cache: Map[String, Any]): InstallParams = new InstallParams(json, cache)

    /**
      * @param scopes
      *   Scopes to add the application to the server with
      * @param permissions
      *   Permissions to request for the bot role
      */
    def make20(scopes: Seq[String], permissions: Permissions): InstallParams =
      makeRawFromFields("scopes" := scopes, "permissions" := permissions)
  }

  class ApplicationOwner(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    @inline def avatar: Option[String] = selectDynamic[Option[String]]("avatar")

    @inline def withAvatar(newValue: Option[String]): ApplicationOwner =
      objWith(ApplicationOwner, "avatar", newValue)

    @inline def discriminator: String = selectDynamic[String]("discriminator")

    @inline def withDiscriminator(newValue: String): ApplicationOwner =
      objWith(ApplicationOwner, "discriminator", newValue)

    @inline def flags: Int = selectDynamic[Int]("flags")

    @inline def withFlags(newValue: Int): ApplicationOwner = objWith(ApplicationOwner, "flags", newValue)

    @inline def id: UserId = selectDynamic[UserId]("id")

    @inline def withId(newValue: UserId): ApplicationOwner = objWith(ApplicationOwner, "id", newValue)

    @inline def username: String = selectDynamic[String]("username")

    @inline def withUsername(newValue: String): ApplicationOwner = objWith(ApplicationOwner, "username", newValue)

    override def values: Seq[() => Any] = Seq(() => avatar, () => discriminator, () => flags, () => id, () => username)
  }
  object ApplicationOwner extends DiscordObjectCompanion[ApplicationOwner] {
    def makeRaw(json: Json, cache: Map[String, Any]): ApplicationOwner =
      new ApplicationOwner(json, cache)

    def make20(
        avatar: Option[String],
        discriminator: String,
        flags: Int,
        id: UserId,
        username: String
    ): ApplicationOwner = makeRawFromFields(
      "avatar"        := avatar,
      "discriminator" := discriminator,
      "flags"         := flags,
      "id"            := id,
      "username"      := username
    )
  }

  class Team(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

    /** Hash of the image of the team's icon */
    @inline def icon: ImageHash = selectDynamic[ImageHash]("icon")

    @inline def withIcon(newValue: ImageHash): Team = objWith(Team, "icon", newValue)

    /** Unique ID of the team */
    @inline def id: Snowflake[Team] = selectDynamic[Snowflake[Team]]("id")

    @inline def withId(newValue: Snowflake[Team]): Team = objWith(Team, "id", newValue)

    /** Members of the team */
    @inline def members: Seq[Team.TeamMember] = selectDynamic[Seq[Team.TeamMember]]("members")

    @inline def withMembers(newValue: Seq[Team.TeamMember]): Team = objWith(Team, "members", newValue)

    /** Name of the team */
    @inline def name: String = selectDynamic[String]("name")

    @inline def withName(newValue: String): Team = objWith(Team, "name", newValue)

    /** User ID of the current team owner */
    @inline def ownerUserId: UserId = selectDynamic[UserId]("owner_user_id")

    @inline def withOwnerUserId(newValue: UserId): Team = objWith(Team, "owner_user_id", newValue)

    override def values: Seq[() => Any] = Seq(() => icon, () => id, () => members, () => name, () => ownerUserId)
  }
  object Team extends DiscordObjectCompanion[Team] {
    def makeRaw(json: Json, cache: Map[String, Any]): Team = new Team(json, cache)

    /**
      * @param icon
      *   Hash of the image of the team's icon
      * @param id
      *   Unique ID of the team
      * @param members
      *   Members of the team
      * @param name
      *   Name of the team
      * @param ownerUserId
      *   User ID of the current team owner
      */
    def make20(
        icon: ImageHash,
        id: Snowflake[Team],
        members: Seq[Team.TeamMember],
        name: String,
        ownerUserId: UserId
    ): Team = makeRawFromFields(
      "icon"          := icon,
      "id"            := id,
      "members"       := members,
      "name"          := name,
      "owner_user_id" := ownerUserId
    )

    class TeamMember(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

      /** User's membership state on the team */
      @inline def membershipState: Team.TeamMembershipState =
        selectDynamic[Team.TeamMembershipState]("membership_state")

      @inline def withMembershipState(newValue: Team.TeamMembershipState): TeamMember =
        objWith(TeamMember, "membership_state", newValue)

      /** ID of the parent team of which they are a member */
      @inline def teamId: Snowflake[Team] = selectDynamic[Snowflake[Team]]("team_id")

      @inline def withTeamId(newValue: Snowflake[Team]): TeamMember = objWith(TeamMember, "team_id", newValue)

      /** Avatar, discriminator, ID, and username of the user */
      @inline def user: Team.TeamUser = selectDynamic[Team.TeamUser]("user")

      @inline def withUser(newValue: Team.TeamUser): TeamMember = objWith(TeamMember, "user", newValue)

      /** Role of the team member */
      @inline def role: TeamMemberRole = selectDynamic[TeamMemberRole]("role")

      @inline def withRole(newValue: TeamMemberRole): TeamMember = objWith(TeamMember, "role", newValue)

      override def values: Seq[() => Any] = Seq(() => membershipState, () => teamId, () => user, () => role)
    }
    object TeamMember extends DiscordObjectCompanion[TeamMember] {
      def makeRaw(json: Json, cache: Map[String, Any]): TeamMember = new TeamMember(json, cache)

      /**
        * @param membershipState
        *   User's membership state on the team
        * @param teamId
        *   ID of the parent team of which they are a member
        * @param user
        *   Avatar, discriminator, ID, and username of the user
        * @param role
        *   Role of the team member
        */
      def make20(
          membershipState: Team.TeamMembershipState,
          teamId: Snowflake[Team],
          user: Team.TeamUser,
          role: TeamMemberRole
      ): TeamMember =
        makeRawFromFields("membership_state" := membershipState, "team_id" := teamId, "user" := user, "role" := role)
    }

    sealed case class TeamMemberRole private (value: String) extends DiscordEnum[String]
    object TeamMemberRole                                    extends DiscordEnumCompanion[String, TeamMemberRole] {

      /**
        * Owners are the most permissiable role, and can take destructive,
        * irreversible actions like deleting team-owned apps or the team itself.
        * Teams are limited to 1 owner.
        */
      val Owner: TeamMemberRole = TeamMemberRole("owner")

      /**
        * Admins have similar access as owners, except they cannot take
        * destructive actions on the team or team-owned apps.
        */
      val Admin: TeamMemberRole = TeamMemberRole("admin")

      /**
        * Developers can access information about team-owned apps, like the
        * client secret or public key. They can also take limited actions on
        * team-owned apps, like configuring interaction endpoints or resetting
        * the bot token. Members with the Developer role cannot manage the team
        * or its members, or take destructive actions on team-owned apps.
        */
      val Developer: TeamMemberRole = TeamMemberRole("developer")

      /**
        * Read-only members can access information about a team and any
        * team-owned apps. Some examples include getting the IDs of applications
        * and exporting payout records.
        */
      val ReadOnly: TeamMemberRole = TeamMemberRole("read_only")

      def unknown(value: String): TeamMemberRole = new TeamMemberRole(value)

      val values: Seq[TeamMemberRole] = Seq(Owner, Admin, Developer, ReadOnly)
    }

    sealed case class TeamMembershipState private (value: Int) extends DiscordEnum[Int]
    object TeamMembershipState extends DiscordEnumCompanion[Int, TeamMembershipState] {
      val INVITED: TeamMembershipState = TeamMembershipState(1)

      val ACCEPTED: TeamMembershipState = TeamMembershipState(2)

      def unknown(value: Int): TeamMembershipState = new TeamMembershipState(value)

      val values: Seq[TeamMembershipState] = Seq(INVITED, ACCEPTED)
    }

    class TeamUser(json: Json, cache: Map[String, Any] = Map.empty) extends DiscordObject(json, cache) {

      @inline def id: UserId = selectDynamic[UserId]("id")

      @inline def withId(newValue: UserId): TeamUser = objWith(TeamUser, "id", newValue)

      @inline def username: String = selectDynamic[String]("username")

      @inline def withUsername(newValue: String): TeamUser = objWith(TeamUser, "username", newValue)

      @inline def avatar: Option[ImageHash] = selectDynamic[Option[ImageHash]]("avatar")

      @inline def withAvatar(newValue: Option[ImageHash]): TeamUser = objWith(TeamUser, "avatar", newValue)

      @inline def discriminator: String = selectDynamic[String]("discriminator")

      @inline def withDiscriminator(newValue: String): TeamUser = objWith(TeamUser, "discriminator", newValue)

      override def values: Seq[() => Any] = Seq(() => id, () => username, () => avatar, () => discriminator)
    }
    object TeamUser extends DiscordObjectCompanion[TeamUser] {
      def makeRaw(json: Json, cache: Map[String, Any]): TeamUser = new TeamUser(json, cache)

      def make20(
          id: UserId,
          username: String,
          avatar: Option[ImageHash],
          discriminator: String
      ): TeamUser =
        makeRawFromFields("id" := id, "username" := username, "avatar" := avatar, "discriminator" := discriminator)
    }
  }
}
