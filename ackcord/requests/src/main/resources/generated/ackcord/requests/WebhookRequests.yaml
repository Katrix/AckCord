name: WebhookRequests
defType: ObjectOnly
imports:
  - ackcord.data._
innerTypes:
  - name: createWebhook
    defType: Request
    documentation: |-
      Creates a new webhook and returns a webhook object on success. Requires the MANAGE_WEBHOOKS permission. Fires a Webhooks Update Gateway event.

      An error will be returned if a webhook name (name) is not valid. A webhook name is valid if:
      - It does not contain the substrings clyde or discord (case-insensitive)
      - It follows the nickname guidelines in the Usernames and Nicknames documentation, with an exception that webhook names can be up to 80 characters
    method: POST
    path: [ channels, { argOf: ChannelId }, webhooks ]
    allowsReason: true
    body:
      fields:
        2.0.x:
          name:
            type: String
            documentation: Name of the webhook (1-80 characters)
            verification:
              min_length: 1
              max_length: 80

          avatar:
            type: ImageData
            withUndefined: true
            withNull: true
            documentation: Image for the default webhook avatar
    return: Webhook

  - name: getChannelWebhooks
    defType: Request
    documentation: >-
      Returns a list of channel webhook objects. Requires the MANAGE_WEBHOOKS
      permission.
    method: GET
    path: [ channels, { argOf: ChannelId }, webhooks ]
    return: Seq[Webhook]

  - name: getGuildWebhooks
    defType: Request
    documentation: >-
      Returns a list of guild webhook objects. Requires the MANAGE_WEBHOOKS
      permission.
    method: GET
    path: [ guilds, { argOf: GuildId }, webhooks ]
    return: Seq[Webhook]

  - name: getWebhook
    defType: Request
    documentation: >-
      Returns the new webhook object for the given id.
    method: GET
    path: [ webhooks, {argOf: WebhookId, major: true} ]
    return: Webhook

  - name: getWebhookwithToken
    defType: Request
    documentation: >-
      Same as above, except this call does not require authentication and returns
      no user in the webhook object.
    method: GET
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true} ]
    return: Webhook

  - name: modifyWebhook
    defType: Request
    documentation: >-
      Modify a webhook. Requires the MANAGE_WEBHOOKS permission. Returns the
      updated webhook object on success. Fires a Webhooks Update Gateway event.
    method: PATCH
    path: [ webhooks, {argOf: WebhookId, major: true} ]
    allowsReason: true
    body:
      allUndefined: true
      fields:
        2.0.x:
          name:
            type: String
            documentation: The default name of the webhook

          avatar:
            type: ImageData
            withNull: true
            documentation: Image for the default webhook avatar

          channel_id:
            type: TextGuildChannelId
            documentation: The new channel id this webhook should be moved to
    return: Webhook

  - name: modifyWebhookwithToken
    defType: Request
    documentation: >-
      Same as above, except this call does not require authentication, does not
      accept a channel_id parameter in the body, and does not return a user in the
      webhook object.
    method: PATCH
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true} ]
    allowsReason: true
    body:
      allUndefined: true
      fields:
        2.0.x:
          name:
            type: String
            documentation: The default name of the webhook

          avatar:
            type: ImageData
            withNull: true
            documentation: Image for the default webhook avatar

    return: Webhook

  - name: deleteWebhook
    defType: Request
    documentation: >-
      Delete a webhook permanently. Requires the MANAGE_WEBHOOKS permission.
      Returns a 204 No Content response on success. Fires a Webhooks Update
      Gateway event.
    method: DELETE
    path: [ webhooks, {argOf: WebhookId, major: true} ]
    allowsReason: true

  - name: deleteWebhookwithToken
    defType: Request
    documentation: >-
      Same as above, except this call does not require authentication.
    method: DELETE
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true} ]
    allowsReason: true

  - name: executeWebhook
    defType: Request
    documentation: >-
      Refer to Uploading Files for details on attachments and multipart/form-data
      requests. Returns a message or 204 No Content depending on the wait query
      parameter.
    method: POST
    path: [ webhooks, {argOf: WebhookId, major: true},{argOf: webhookToken, major: true} ]
    query:
      allUndefined: true
      fields:
        2.0.x:
          doWait:
            jsonName: wait
            type: Boolean
            documentation: Waits for server confirmation of message send before response,
              and returns the created message body (defaults to false; when false
              a message that is not saved does not return an error)

          thread_id:
            type: ThreadChannelId
            documentation: Send a message to the specified thread within a webhook's
              channel. The thread will automatically be unarchived.
    additionalTypeParams: ["MPR"]
    additionalParams:
      parts:
        type: Seq[EncodeBody.Multipart[_, MPR]]
        default: Nil
    complexType:
      R1: MPR
    encodeBody: |-
      EncodeBody.MultipartBody(
        EncodeBody.Multipart.EncodeJson(body, "payload_json"), 
        parts.zipWithIndex.map(t => t._1.withName(s"files[${t._2}]"))
      )
    body:
      allUndefined: true
      objectExtends: ["CreateMessageLikeMixin[ExecuteWebhookBody]"]
      fields:
        2.0.x:
          content:
            type: String
            documentation: Message contents (up to 2000 characters)
            verification:
              max_length: 2000

          username:
            type: String
            documentation: Override the default username of the webhook

          avatar_url:
            type: String
            documentation: Override the default avatar of the webhook

          tts:
            type: Boolean
            documentation: true if this is a TTS message

          embeds:
            type: Seq[OutgoingEmbed]
            documentation: Up to 10 rich embeds (up to 6000 characters)
            verification:
              max_length: 10

          allowed_mentions:
            type: AllowedMentions
            documentation: Allowed mentions for the message

          components:
            type: Seq[Component]
            documentation: Components to include with the message

          attachments:
            type: Seq[ChannelRequests.MessageCreateEditAttachment]
            documentation: Attachment objects with filename and description

          flags:
            type: Message.MessageFlags
            documentation: Message flags combined as a bitfield (only SUPPRESS_EMBEDS and SUPPRESS_NOTIFICATIONS can be set)

          thread_name:
            type: String
            documentation: Name of thread to create (requires the webhook channel to be a forum channel)

    parseResponse: |-
      if (query.doWait.contains(true)) ParseResponse.AsJsonResponse[Message]().map(Some(_))
      else ParseResponse.ExpectNoBody.map(_ => None)
    return: Option[Message]

  - name: executeSlackCompatibleWebhook
    defType: Request
    documentation: >-
      Refer to Slack's documentation for more information. We do not support
      Slack's channel, icon_emoji, mrkdwn, or mrkdwn_in properties.
    method: POST
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true}, slack ]
    query:
      allUndefined: true
      fields:
        2.0.x:
          thread_id:
            type: ThreadChannelId
            documentation: Id of the thread to send the message in

          doWait:
            jsonName: wait
            type: Boolean
            documentation: Waits for server confirmation of message send before response
              (defaults to true; when false a message that is not saved does not
              return an error)
    parseResponse: |-
      if (query.doWait.contains(true)) ParseResponse.AsJsonResponse[Message]().map(Some(_))
      else ParseResponse.ExpectNoBody.map(_ => None)
    return: Option[Message]

  - name: executeGitHubCompatibleWebhook
    defType: Request
    documentation: >-
      Add a new webhook to your GitHub repo (in the repo's settings), and use this
      endpoint as the "Payload URL." You can choose what events your Discord
      channel receives by choosing the "Let me select individual events" option
      and selecting individual events for the new webhook you're configuring.
    method: POST
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true}, github ]
    query:
      allUndefined: true
      fields:
        2.0.x:
          thread_id:
            type: ThreadChannelId
            documentation: Id of the thread to send the message in

          doWait:
            jsonName: wait
            type: Boolean
            documentation: Waits for server confirmation of message send before response
              (defaults to true; when false a message that is not saved does not
              return an error)
    parseResponse: |- 
      if (query.doWait.contains(true)) ParseResponse.AsJsonResponse[Message]().map(Some(_)) 
      else ParseResponse.ExpectNoBody.map(_ => None)
    return: Option[Message]

  - name: getWebhookMessage
    defType: Request
    documentation: >-
      Returns a previously-sent webhook message from the same token. Returns a
      message object on success.
    method: GET
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true}, messages, { argOf: MessageId } ]
    query:
      allUndefined: true
      fields:
        2.0.x:
          thread_id:
            type: ThreadChannelId
            documentation: Id of the thread the message is in
    return: Message

  - name: editWebhookMessage
    defType: Request
    documentation: |-
      Edits a previously-sent webhook message from the same token. Returns a message object on success.

      When the content field is edited, the mentions array in the message object will be reconstructed from scratch based on the new content. The allowed_mentions field of the edit request controls how this happens. If there is no explicit allowed_mentions in the edit request, the content will be parsed with default allowances, that is, without regard to whether or not an allowed_mentions was present in the request that originally created the message.

      Refer to Uploading Files for details on attachments and multipart/form-data requests. Any provided files will be appended to the message. To remove or replace files you will have to supply the attachments field which specifies the files to retain on the message after edit.
    method: PATCH
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true}, messages, { argOf: MessageId } ]
    query:
      allUndefined: true
      fields:
        2.0.x:
          thread_id:
            type: ThreadChannelId
            documentation: Id of the thread the message is in
    additionalTypeParams: ["MPR"]
    additionalParams:
      parts:
        type: Seq[EncodeBody.Multipart[_, MPR]]
        default: Nil
    complexType:
      R1: MPR
    encodeBody: |-
      EncodeBody.MultipartBody(
        EncodeBody.Multipart.EncodeJson(body, "payload_json"), 
        parts.zipWithIndex.map(t => t._1.withName(s"files[${t._2}]"))
      )
    body:
      allUndefined: true
      objectExtends: ["CreateMessageLikeMixin[EditWebhookMessageBody]"]
      fields:
        2.0.x:
          content:
            type: String
            documentation: Message contents (up to 2000 characters)
            verification:
              max_length: 2000

          embeds:
            type: Seq[OutgoingEmbed]
            documentation: Up to 10 rich embeds (up to 6000 characters)
            verification:
              max_length: 10

          allowed_mentions:
            type: AllowedMentions
            documentation: Allowed mentions for the message

          components:
            type: Seq[Component]
            documentation: Components to include with the message

          attachments:
            type: Seq[ChannelRequests.MessageCreateEditAttachment]
            documentation: Attachment objects with filename and description

    return: Message

  - name: deleteWebhookMessage
    defType: Request
    documentation: >-
      Deletes a message that was created by the webhook. Returns a 204 No Content
      response on success.
    method: DELETE
    path: [ webhooks, {argOf: WebhookId, major: true}, {argOf: webhookToken, major: true}, messages, { argOf: MessageId } ]
    query:
      allUndefined: true
      fields:
        2.0.x:
          thread_id:
            type: ThreadChannelId
            documentation: Id of the thread the message is in
